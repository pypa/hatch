{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Hatch","text":"CI/CD Docs Package Meta <p>Hatch is a modern, extensible Python project manager. See the Why Hatch? page for more information.</p> <ul> <li> <p> Build system</p> <p>Reproducible builds by default with a rich ecosystem of plugins</p> <p> Configure builds</p> </li> <li> <p> Environments</p> <p>Robust environment management with support for custom scripts and UV</p> <p> Getting started</p> </li> <li> <p> Python management</p> <p>Choose between easy manual installations or automatic as part of environments</p> <p> Try it</p> </li> <li> <p> Testing</p> <p>Test execution with known best practices</p> <p> Run</p> </li> <li> <p> Static analysis</p> <p>Static analysis backed by Ruff with up-to-date, sane defaults</p> <p> Learn</p> </li> <li> <p> Script runner</p> <p>Execute Python scripts with specific dependencies and Python versions</p> <p> Execute</p> </li> <li> <p> Publishing</p> <p>Easily upload to PyPI or other indices</p> <p> See how</p> </li> <li> <p> Versioning</p> <p>Streamlined workflow for bumping versions</p> <p> Managing versions</p> </li> <li> <p> Project generation</p> <p>Create new projects from templates with known best practices</p> <p> Project setup</p> </li> <li> <p> Responsive CLI</p> <p>Hatch is up to 3x faster than equivalent tools</p> <p> CLI reference</p> </li> </ul>"},{"location":"#license","title":"License","text":"<p>Hatch is distributed under the terms of the MIT license.</p>"},{"location":"#navigation","title":"Navigation","text":"<p>Documentation for specific <code>MAJOR.MINOR</code> versions can be chosen by using the dropdown on the top of every page. The <code>dev</code> version reflects changes that have not yet been released.</p> <p>Also, desktop readers can use special keyboard shortcuts:</p> Keys Action <ul><li>, (comma)</li><li>p</li></ul> Navigate to the \"previous\" page <ul><li>. (period)</li><li>n</li></ul> Navigate to the \"next\" page <ul><li>/</li><li>s</li></ul> Display the search modal"},{"location":"build/","title":"Builds","text":""},{"location":"build/#configuration","title":"Configuration","text":"<p>Builds are configured using the <code>tool.hatch.build</code> table. Every target is defined by a section within <code>tool.hatch.build.targets</code>, for example:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build.targets.sdist]\nexclude = [\n  \"/.github\",\n  \"/docs\",\n]\n\n[tool.hatch.build.targets.wheel]\npackages = [\"src/foo\"]\n</code></pre> <pre><code>[build.targets.sdist]\nexclude = [\n  \"/.github\",\n  \"/docs\",\n]\n\n[build.targets.wheel]\npackages = [\"src/foo\"]\n</code></pre>"},{"location":"build/#building","title":"Building","text":"<p>Invoking the <code>build</code> command without any arguments will build the sdist and wheel targets:</p> <pre><code>$ hatch build\n[sdist]\ndist/hatch_demo-1rc0.tar.gz\n\n[wheel]\ndist/hatch_demo-1rc0-py3-none-any.whl\n</code></pre> <p>To only build specific targets, use the <code>-t</code>/<code>--target</code> option:</p> <pre><code>$ hatch build -t wheel\n[wheel]\ndist/hatch_demo-1rc0-py3-none-any.whl\n</code></pre> <p>If the target supports multiple versions, you can specify the exact versions to build by appending a colon followed by the desired versions separated by commas:</p> <pre><code>$ hatch -v build -t wheel:standard\n[wheel]\nBuilding `wheel` version `standard`\ndist/hatch_demo-1rc0-py3-none-any.whl\n</code></pre>"},{"location":"build/#packaging-ecosystem","title":"Packaging ecosystem","text":"<p>Hatch complies with modern Python packaging specs and therefore your projects can be used by other tools with Hatch serving as just the build backend.</p> <p>So you could use tox as an alternative to Hatch's environment management, or cibuildwheel to distribute packages for every platform, and they both will transparently use Hatch without any extra modification.</p>"},{"location":"environment/","title":"Environments","text":"<p>Environments are designed to allow for isolated workspaces for testing, building documentation, or anything else projects need.</p> <p>Unless an environment is chosen explicitly, Hatch will use the <code>default</code> environment.</p> <p>Tip</p> <p>For a more comprehensive walk-through, see the Basic usage tutorial.</p>"},{"location":"environment/#creation","title":"Creation","text":"<p>You can create environments by using the <code>env create</code> command. Let's enter the directory of the project we created in the setup phase:</p> <pre><code>$ hatch env create\nCreating environment: default\nInstalling project in development mode\nSyncing dependencies\n</code></pre> <p>Tip</p> <p>You never need to manually create environments as spawning a shell or running commands within one will automatically trigger creation.</p>"},{"location":"environment/#entering-environments","title":"Entering environments","text":"<p>You can spawn a shell within an environment by using the <code>shell</code> command.</p> <pre><code>$ hatch shell\n(hatch-demo) $\n</code></pre> <p>Now confirm the project has been installed:</p> <pre><code>(hatch-demo) $ pip show hatch-demo\nName: hatch-demo\nVersion: 0.0.1\n...\n</code></pre> <p>Finally, see where your environment's Python is located:</p> <pre><code>(hatch-demo) $ python -c \"import sys;print(sys.executable)\"\n...\n</code></pre> <p>You can type <code>exit</code> to leave the environment.</p>"},{"location":"environment/#command-execution","title":"Command execution","text":"<p>The <code>run</code> command allows you to execute commands in an environment as if you had already entered it. For example, running the following command will output the same path as before:</p> <pre><code>hatch run python -c \"import sys;print(sys.executable)\"\n</code></pre> <p>Tip</p> <p>Be sure to check out how to define scripts for your project.</p>"},{"location":"environment/#dependencies","title":"Dependencies","text":"<p>Hatch ensures that environments are always compatible with the currently defined project dependencies (if installed and in dev mode) and environment dependencies.</p> <p>To add <code>cowsay</code> as a dependency, open <code>pyproject.toml</code> and add it to the <code>dependencies</code> array:</p>  pyproject.toml <pre><code>[project]\n...\ndependencies = [\n  \"cowsay\"\n]\n</code></pre> <p>This dependency will be installed the next time you spawn a shell or run a command. For example:</p> <pre><code>$ hatch run cowsay -t \"Hello, world!\"\nSyncing dependencies\n  _____________\n| Hello, world! |\n  =============\n             \\\n              \\\n                ^__^\n                (oo)\\_______\n                (__)\\       )\\/\\\n                    ||----w |\n                    ||     ||\n</code></pre> <p>Note</p> <p>The <code>Syncing dependencies</code> status will display temporarily when Hatch updates environments in response to any dependency changes that you make.</p>"},{"location":"environment/#selection","title":"Selection","text":"<p>You can select which environment to enter or run commands in by using the <code>-e</code>/<code>--env</code> root option or by setting the <code>HATCH_ENV</code> environment variable.</p> <p>The <code>run</code> command allows for more explicit selection by prepending <code>&lt;ENV_NAME&gt;:</code> to commands. For example, if you had the following configuration:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.docs]\ndependencies = [\n  \"mkdocs\"\n]\n[tool.hatch.envs.docs.scripts]\nbuild = \"mkdocs build --clean --strict\"\nserve = \"mkdocs serve --dev-addr localhost:8000\"\n</code></pre> <pre><code>[envs.docs]\ndependencies = [\n  \"mkdocs\"\n]\n[envs.docs.scripts]\nbuild = \"mkdocs build --clean --strict\"\nserve = \"mkdocs serve --dev-addr localhost:8000\"\n</code></pre> <p>you could then serve your documentation by running:</p> <pre><code>hatch run docs:serve\n</code></pre> <p>Tip</p> <p>If you've already entered an environment, commands will target it by default.</p>"},{"location":"environment/#matrix","title":"Matrix","text":"<p>Every environment can define its own set of matrices:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.test]\ndependencies = [\n  \"pytest\"\n]\n\n[[tool.hatch.envs.test.matrix]]\npython = [\"3.10\", \"3.11\"]\nversion = [\"42\", \"3.14\"]\n\n[[tool.hatch.envs.test.matrix]]\npython = [\"3.11\", \"3.12\"]\nversion = [\"9000\"]\nfeature = [\"foo\", \"bar\"]\n</code></pre> <pre><code>[envs.test]\ndependencies = [\n  \"pytest\"\n]\n\n[[envs.test.matrix]]\npython = [\"3.10\", \"3.11\"]\nversion = [\"42\", \"3.14\"]\n\n[[envs.test.matrix]]\npython = [\"3.11\", \"3.12\"]\nversion = [\"9000\"]\nfeature = [\"foo\", \"bar\"]\n</code></pre> <p>Using the <code>env show</code> command would then display:</p> <pre><code>$ hatch env show --ascii\n     Standalone\n+---------+---------+\n| Name    | Type    |\n+=========+=========+\n| default | virtual |\n+---------+---------+\n                        Matrices\n+------+---------+----------------------+--------------+\n| Name | Type    | Envs                 | Dependencies |\n+======+=========+======================+==============+\n| test | virtual | test.py3.10-42       | pytest       |\n|      |         | test.py3.10-3.14     |              |\n|      |         | test.py3.11-42       |              |\n|      |         | test.py3.11-3.14     |              |\n|      |         | test.py3.11-9000-foo |              |\n|      |         | test.py3.11-9000-bar |              |\n|      |         | test.py3.12-9000-foo |              |\n|      |         | test.py3.12-9000-bar |              |\n+------+---------+----------------------+--------------+\n</code></pre>"},{"location":"environment/#removal","title":"Removal","text":"<p>You can remove a single environment or environment matrix by using the <code>env remove</code> command or all of a project's environments by using the <code>env prune</code> command.</p>"},{"location":"install/","title":"Installation","text":""},{"location":"install/#github-actions","title":"GitHub Actions","text":"<pre><code>- name: Install Hatch\n  uses: pypa/hatch@install\n</code></pre> <p>Refer to the official action for more information.</p>"},{"location":"install/#installers","title":"Installers","text":"macOSWindows GUI installerCommand line installer <ol> <li>In your browser, download the <code>.pkg</code> file: hatch-universal.pkg</li> <li>Run your downloaded file and follow the on-screen instructions.</li> <li>Restart your terminal.</li> <li> <p>To verify that the shell can find and run the <code>hatch</code> command in your <code>PATH</code>, use the following command.</p> <pre><code>$ hatch --version\n1.12.0\n</code></pre> </li> </ol> <ol> <li> <p>Download the file using the <code>curl</code> command. The <code>-o</code> option specifies the file name that the downloaded package is written to. In this example, the file is written to <code>hatch-universal.pkg</code> in the current directory.</p> <pre><code>curl -Lo hatch-universal.pkg https://github.com/pypa/hatch/releases/latest/download/hatch-universal.pkg\n</code></pre> </li> <li> <p>Run the standard macOS <code>installer</code> program, specifying the downloaded <code>.pkg</code> file as the source. Use the <code>-pkg</code> parameter to specify the name of the package to install, and the <code>-target /</code> parameter for the drive in which to install the package. The files are installed to <code>/usr/local/hatch</code>, and an entry is created at <code>/etc/paths.d/hatch</code> that instructs shells to add the <code>/usr/local/hatch</code> directory to. You must include sudo on the command to grant write permissions to those folders.</p> <pre><code>sudo installer -pkg ./hatch-universal.pkg -target /\n</code></pre> </li> <li> <p>Restart your terminal.</p> </li> <li> <p>To verify that the shell can find and run the <code>hatch</code> command in your <code>PATH</code>, use the following command.</p> <pre><code>$ hatch --version\n1.12.0\n</code></pre> </li> </ol> GUI installerCommand line installer <ol> <li>In your browser, download one the <code>.msi</code> files:<ul> <li>hatch-x64.msi</li> </ul> </li> <li>Run your downloaded file and follow the on-screen instructions.</li> <li>Restart your terminal.</li> <li> <p>To verify that the shell can find and run the <code>hatch</code> command in your <code>PATH</code>, use the following command.</p> <pre><code>$ hatch --version\n1.12.0\n</code></pre> </li> </ol> <ol> <li> <p>Download and run the installer using the standard Windows <code>msiexec</code> program, specifying one of the <code>.msi</code> files as the source. Use the <code>/passive</code> and <code>/i</code> parameters to request an unattended, normal installation.</p> x64x86 <pre><code>msiexec /passive /i https://github.com/pypa/hatch/releases/latest/download/hatch-x64.msi\n</code></pre> <pre><code>msiexec /passive /i https://github.com/pypa/hatch/releases/latest/download/hatch-x86.msi\n</code></pre> </li> <li> <p>Restart your terminal.</p> </li> <li> <p>To verify that the shell can find and run the <code>hatch</code> command in your <code>PATH</code>, use the following command.</p> <pre><code>$ hatch --version\n1.12.0\n</code></pre> </li> </ol>"},{"location":"install/#standalone-binaries","title":"Standalone binaries","text":"<p>After downloading the archive corresponding to your platform and architecture, extract the binary to a directory that is on your PATH and rename to <code>hatch</code>.</p> LinuxmacOSWindows <ul> <li>hatch-aarch64-unknown-linux-gnu.tar.gz</li> <li>hatch-x86_64-unknown-linux-gnu.tar.gz</li> <li>hatch-x86_64-unknown-linux-musl.tar.gz</li> <li>hatch-powerpc64le-unknown-linux-gnu.tar.gz</li> </ul> <ul> <li>hatch-aarch64-apple-darwin.tar.gz</li> <li>hatch-x86_64-apple-darwin.tar.gz</li> </ul> <ul> <li>hatch-x86_64-pc-windows-msvc.zip</li> <li>hatch-i686-pc-windows-msvc.zip</li> </ul>"},{"location":"install/#pip","title":"pip","text":"<p>Hatch is available on PyPI and can be installed with pip.</p> <pre><code>pip install hatch\n</code></pre> <p>Warning</p> <p>This method modifies the Python environment in which you choose to install. Consider instead using pipx to avoid dependency conflicts.</p>"},{"location":"install/#pipx","title":"pipx","text":"<p>pipx allows for the global installation of Python applications in isolated environments.</p> <pre><code>pipx install hatch\n</code></pre>"},{"location":"install/#homebrew","title":"Homebrew","text":"<p>See the formula for more details.</p> <pre><code>brew install hatch\n</code></pre>"},{"location":"install/#conda","title":"Conda","text":"<p>See the feedstock for more details.</p> <pre><code>conda install -c conda-forge hatch\n</code></pre> <p>or with mamba:</p> <pre><code>mamba install hatch\n</code></pre> <p>Warning</p> <p>This method modifies the Conda environment in which you choose to install. Consider instead using pipx or condax to avoid dependency conflicts.</p>"},{"location":"install/#macports","title":"MacPorts","text":"<p>See the port for more details.</p> <pre><code>sudo port install hatch\n</code></pre>"},{"location":"install/#fedora","title":"Fedora","text":"<p>The minimum supported version is 37, currently in development as Rawhide.</p> <pre><code>sudo dnf install hatch\n</code></pre>"},{"location":"install/#void-linux","title":"Void Linux","text":"<pre><code>xbps-install hatch\n</code></pre>"},{"location":"install/#build-system-availability","title":"Build system availability","text":"<p>Hatchling is Hatch's build backend which you will never need to install manually. See its changelog for version information.</p> <p></p>"},{"location":"intro/","title":"Introduction","text":""},{"location":"intro/#setup","title":"Setup","text":"<p>Projects can be set up for use by Hatch using the <code>new</code> command.</p>"},{"location":"intro/#new-project","title":"New project","text":"<p>Let's say you want to create a project named <code>Hatch Demo</code>. You would run:</p> <pre><code>hatch new \"Hatch Demo\"\n</code></pre> <p>This would create the following structure in your current working directory:</p> <pre><code>hatch-demo\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 hatch_demo\n\u2502       \u251c\u2500\u2500 __about__.py\n\u2502       \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 tests\n\u2502   \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 LICENSE.txt\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 pyproject.toml\n</code></pre> <p>Tip</p> <p>There are many ways to customize project generation.</p>"},{"location":"intro/#existing-project","title":"Existing project","text":"<p>To initialize an existing project, enter the directory containing the project and run the following:</p> <pre><code>hatch new --init\n</code></pre> <p>If your project has a <code>setup.py</code> file the command will automatically migrate <code>setuptools</code> configuration for you. Otherwise, this will interactively guide you through the setup process.</p>"},{"location":"intro/#project-metadata","title":"Project metadata","text":"<p>Next you'll want to define more of your project's metadata located in the <code>pyproject.toml</code> file. You can specify things like its license, the supported versions of Python, and URLs referring to various parts of your project, like documentation.</p>"},{"location":"intro/#dependencies","title":"Dependencies","text":"<p>The last step of the setup process is to define any dependencies that you'd like your project to begin with.</p>"},{"location":"intro/#configuration","title":"Configuration","text":"<p>All project-specific configuration recognized by Hatch can be defined in either the <code>pyproject.toml</code> file, or a file named <code>hatch.toml</code> where options are not contained within the <code>tool.hatch</code> table:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch]\noption = \"...\"\n\n[tool.hatch.table1]\noption = \"...\"\n\n[tool.hatch.table2]\noption = \"...\"\n</code></pre> <pre><code>option = \"...\"\n\n[table1]\noption = \"...\"\n\n[table2]\noption = \"...\"\n</code></pre> <p>Top level keys in the latter file take precedence when defined in both.</p> <p>Tip</p> <p>If you want to make your file more compact, you can use dotted keys, turning the above example into:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch]\noption = \"...\"\ntable1.option = \"...\"\ntable2.option = \"...\"\n</code></pre> <pre><code>option = \"...\"\ntable1.option = \"...\"\ntable2.option = \"...\"\n</code></pre>"},{"location":"next-steps/","title":"Next steps","text":""},{"location":"next-steps/#learn-more","title":"Learn more","text":"<p>At this point you should have a basic understanding of how to use Hatch.</p> <p>Now you may want to check out advanced configuration for environments or builds, set up your preferred shell, or read more about Hatch's CLI.</p> <p>After that, check out the Hatch Showcase project to see examples of what is possible.</p> <p>Finally, if you see a need, feel free to write a plugin for extended functionality.</p>"},{"location":"next-steps/#community","title":"Community","text":"<p>For any projects using Hatch, you may add its official badge somewhere prominent like the README.</p> <p></p> MarkdownreStructuredText <pre><code>[![Hatch project](https://img.shields.io/badge/%F0%9F%A5%9A-Hatch-4051b5.svg)](https://github.com/pypa/hatch)\n</code></pre> <pre><code>.. image:: https://img.shields.io/badge/%F0%9F%A5%9A-Hatch-4051b5.svg\n   :alt: Hatch project\n   :target: https://github.com/pypa/hatch\n</code></pre>"},{"location":"publish/","title":"Publishing","text":"<p>After your project is built, you can distribute it using the <code>publish</code> command.</p> <p>The <code>-p</code>/<code>--publisher</code> option controls which publisher to use, with the default being index.</p>"},{"location":"publish/#artifact-selection","title":"Artifact selection","text":"<p>By default, the <code>dist</code> directory located at the root of your project will be used:</p> <pre><code>$ hatch publish\ndist/hatch_demo-1rc0-py3-none-any.whl ... success\ndist/hatch_demo-1rc0.tar.gz ... success\n\n[hatch-demo]\nhttps://pypi.org/project/hatch-demo/1rc0/\n</code></pre> <p>You can instead pass specific paths as arguments:</p> <pre><code>hatch publish /path/to/artifacts foo-1.tar.gz\n</code></pre> <p>Only files ending with <code>.whl</code> or <code>.tar.gz</code> will be published.</p>"},{"location":"publish/#further-resources","title":"Further resources","text":"<p>Please refer to the publisher plugin reference for configuration options.</p> <p>There's a How-To on authentication and on options to select the target repository.</p> <p>The <code>publish</code> command is implemented as a built-in plugin, if you're planning your own plugin, read about the publisher plugin API. </p>"},{"location":"version/","title":"Versioning","text":""},{"location":"version/#configuration","title":"Configuration","text":"<p>When the version is not statically set, configuration is defined in the <code>tool.hatch.version</code> table. The <code>source</code> option determines the source to use for retrieving and updating the version. The regex source is used by default.</p> <p>The <code>regex</code> source requires an option <code>path</code> that represents a relative path to a file containing the project's version:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.version]\npath = \"src/hatch_demo/__about__.py\"\n</code></pre> <pre><code>[version]\npath = \"src/hatch_demo/__about__.py\"\n</code></pre> <p>The default pattern looks for a variable named <code>__version__</code> or <code>VERSION</code> that is set to a string containing the version, optionally prefixed with the lowercase letter <code>v</code>.</p> <p>If this doesn't reflect how you store the version, you can define a different regular expression using the <code>pattern</code> option:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.version]\npath = \"pkg/__init__.py\"\npattern = \"BUILD = 'b(?P&lt;version&gt;[^']+)'\"\n</code></pre> <pre><code>[version]\npath = \"pkg/__init__.py\"\npattern = \"BUILD = 'b(?P&lt;version&gt;[^']+)'\"\n</code></pre> <p>The pattern must have a named group called <code>version</code> that represents the version.</p>"},{"location":"version/#display","title":"Display","text":"<p>Invoking the <code>version</code> command without any arguments will display the current version of the project:</p> <pre><code>$ hatch version\n0.0.1\n</code></pre>"},{"location":"version/#updating","title":"Updating","text":"<p>You can update the version like so:</p> <pre><code>$ hatch version \"0.1.0\"\nOld: 0.0.1\nNew: 0.1.0\n</code></pre> <p>The <code>scheme</code> option determines the scheme to use for parsing both the existing and new versions. The standard scheme is used by default, which is based on PEP 440.</p> <p>Rather than setting the version explicitly, you can select the name of a segment used to increment the version:</p> <pre><code>$ hatch version minor\nOld: 0.1.0\nNew: 0.2.0\n</code></pre> <p>You can chain multiple segment updates with a comma. For example, if you wanted to release a preview of your project's first major version, you could do:</p> <pre><code>$ hatch version major,rc\nOld: 0.2.0\nNew: 1.0.0rc0\n</code></pre> <p>When you want to release the final version, you would do:</p> <pre><code>$ hatch version release\nOld: 1.0.0rc0\nNew: 1.0.0\n</code></pre>"},{"location":"version/#supported-segments","title":"Supported segments","text":"<p>Here are the supported segments and how they would influence an existing version of <code>1.0.0</code>:</p> Segments New version <code>release</code> <code>1.0.0</code> <code>major</code> <code>2.0.0</code> <code>minor</code> <code>1.1.0</code> <code>micro</code><code>patch</code><code>fix</code> <code>1.0.1</code> <code>a</code><code>alpha</code> <code>1.0.0a0</code> <code>b</code><code>beta</code> <code>1.0.0b0</code> <code>c</code><code>rc</code><code>pre</code><code>preview</code> <code>1.0.0rc0</code> <code>r</code><code>rev</code><code>post</code> <code>1.0.0.post0</code> <code>dev</code> <code>1.0.0.dev0</code>"},{"location":"why/","title":"Why Hatch?","text":"<p>The high level value proposition of Hatch is that if one adopts all functionality then many other tools become unnecessary since there is support for everything one might require. Further, if one chooses to use only specific features then there are still benefits compared to alternatives.</p>"},{"location":"why/#build-backend","title":"Build backend","text":"<p>Hatchling, the build backend sister project, has many benefits compared to setuptools. Here we only compare setuptools as that is the one most people are familiar with.</p> <ul> <li>Better defaults: The default behavior for setuptools is often not desirable for the average user.<ul> <li>For source distributions, setuptools has a custom enumeration of files that get included and excluded by default. Hatchling takes the defaults from your version control system such as Git's <code>.gitignore</code> file.</li> <li>For wheels, setuptools attempts to find every directory that looks like a Python package. This is often undesirable as you might ship files to the end-user unintentionally such as test or tooling directories. Hatchling defaults to very specific inclusion based on the project name and errors if no heuristic is satisfied.</li> </ul> </li> <li>Ease of configurability: Hatchling was designed based on a history of significant challenges when configuring setuptools.<ul> <li>Hatchling uses the same glob pattern syntax as Git itself for every option which is what most users are familiar with. On the other hand, setuptools uses shell-style glob patterns for source distributions while wheels use a mix of shell-style globs and Python package syntax.</li> <li>Configuring what gets included in source distributions requires a separate <code>MANIFEST.in</code> file. The custom syntax and directives must be learned and it is difficult knowing which options in the main files like <code>setup.py</code> influence the behavior and under what conditions. For Hatchling, everything gets configured in a single file under dedicated sections for specific targets like <code>[tool.hatch.build.targets.wheel]</code>.</li> <li>By default, non-Python files are excluded from wheels. Including such files requires usually verbose rules for every nested package directory. Hatchling makes no such distinction between file types and acts more like a general build system one might already be familiar with.</li> </ul> </li> <li>Editable installations: The default behavior of Hatchling allows for proper static analysis by external tools such as IDEs. With setuptools, you must provide additional configuration which means that by default, for example, you would not get autocompletion in Visual Studio Code. This is marked as a legacy feature and may in fact be removed in future versions of setuptools.</li> <li>Reproducibility: Hatchling builds reproducible wheels and source distributions by default. setuptools does not support this for source distributions and there is no guarantee that wheels are reproducible.</li> <li>Extensibility: Although it is possible to extend setuptools, the API is quite low level. Hatchling has the concept of plugins that are separated into discrete types and only expose what is necessary, leading to an easier developer experience.</li> </ul> <p>Why not?:</p> <p>If building extension modules is required then it is recommended that you continue using setuptools, or even other backends that specialize in interfacing with compilers.</p>"},{"location":"why/#environment-management","title":"Environment management","text":"<p>Here we compare to both <code>tox</code> and <code>nox</code>. At a high level, there are a few common advantages:</p> <ul> <li>Python management: Hatch is able to automatically download Python distributions on the fly when specific versions that environments request cannot be found. The alternatives will raise an error, with the option to ignore unknown distributions.</li> <li> <p>Philosophy: In the alternatives, environments are for the most part treated as executable units where a dependency set is associated with an action. If you are familiar with container ecosystems, this would be like defining a <code>CMD</code> at the end of a Dockerfile but without the ability to change the action at runtime. This involves significant wasted disk space usually because one often requires slight modifications to the actions and therefore will define entirely different environments inherited from a base config just to perform different logic. Additionally, this can be confusing to users not just configuration-wise but also for execution of the different environments.</p> <p>In Hatch, environments are treated as isolated areas where you can execute arbitrary commands at runtime. For example, you can define a single test environment with named scripts that runs unit vs non-unit tests, each command being potentially very long but named however you wish so you get to control the interface. Since environments are treated as places where work is performed, you can also spawn a shell into any which will execute a subprocess that automatically drops into your shell of choice. Your shell will be configured appropriately like <code>python</code> on PATH being updated and the prompt being changed to reflect the chosen environment.</p> </li> <li> <p>Configuration:</p> <ul> <li><code>nox</code> config is defined in Python which often leads to increased verbosity and makes it challenging to onboard folks compared to a standardized format with known behaviors.</li> </ul> </li> <li>Extensibility:<ul> <li><code>tox</code> allows for extending most aspects of its functionality however the API is so low-level and attached to internals that creating plugins may be challenging. For example, here is a <code>tox</code> plugin that was migrated to an equivalent Hatch environment collector plugin.</li> <li><code>nox</code> is configured with Python so for the local project you can do whatever you want, however there is no concept of third-party plugins per se. To achieve that, you must usually use a package that wraps <code>nox</code> and use that package's imports instead (example).</li> </ul> </li> </ul> <p>Why not?:</p> <p>If you are using <code>nox</code> and you wish to migrate, and for some reason you notify sessions, then migration wouldn't be a straight translation but rather you might have to redesign that conditional step.</p>"},{"location":"why/#python-management","title":"Python management","text":"<p>Here we compare Python management to that of pyenv.</p> <ul> <li>Cross-platform: Hatch allows for the same experience no matter the system whereas <code>pyenv</code> does not support Windows so you must use an entirely different project that tries to emulate the functionality.</li> <li>No build dependencies: Hatch guarantees that every available distribution is prebuilt whereas the alternative requires one to maintain a precise build environment which differs by platform and potentially Python version. Another benefit to this is extremely fast installations since the distributions are simply downloaded and unpacked.</li> <li>Optimized by default: The CPython distributions are built with profile guided optimization and link-time optimization, resulting in a 10-30% performance improvement depending on the workload. These distributions have seen wide adoption throughout the industry and are even used by the build system Bazel.</li> <li>Simplicity: Hatch treats Python installations as just another directory that one would add to PATH. It can do this for you or you can manage PATH yourself, even allowing for custom install locations. On the other hand, <code>pyenv</code> operates by adding shims which then act as wrappers around the actual underlying binaries. This has many unfortunate side effects:<ul> <li>It is incumbent upon the user to manage which specific Python comes first via the CLI, switch when necessary, and/or have a mental model of which versions are exposed globally and locally per-project. This can become confusing quite quickly. When working with Hatch, your global Python installations are only important insofar as they are on PATH somewhere since environments do not use them directly but rather create virtual environments from them, always using a version that is compatible with your project.</li> <li>Configuration is required for each shell to properly set up <code>pyenv</code> on start, leading to inconsistencies when running processes that do not spawn a shell.</li> <li>Debugging issues with Python search paths can be extremely difficult, especially for users of software. If you or users have ever ran into an issue where code was being executed that you did not anticipate, the issue is almost always <code>pyenv</code> influencing the <code>python</code> on PATH.</li> </ul> </li> </ul> <p>Why not?:</p> <p>Currently, Hatch does not allow for the installation of specific patch release versions but rather only uses minor release granularity that tracks the latest patch release. If specific patch releases are important to you then it is best to use an alternative installation mechanism.</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2024/05/02/hatch-v1100/","title":"Hatch v1.10.0","text":"<p>Hatch v1.10.0 brings a test command, support for UV, and a Python script runner.</p>"},{"location":"blog/2024/05/02/hatch-v1100/#test-command","title":"Test command","text":"<p>The new <code>test</code> command allows you to easily run tests for your project on multiple versions of Python. The default behavior follows best practices, using pytest with select plugins for test execution and coverage.py for code coverage measurement.</p> <p>The command is designed to be both simple to use while also satisfying the needs of most projects. For example, the following shows Hatch running tests for Jinja in all environments in the default matrix:</p> <p></p> <p>Here is us testing Rich, with a bit of configuration:</p> <p></p> <p>See the tutorial for a detailed walk-through and the config reference for options.</p>"},{"location":"blog/2024/05/02/hatch-v1100/#uv","title":"UV","text":"<p>The package installer UV, brought to you by the same folks behind Ruff, is now supported. In any environment, you can set the <code>installer</code> option to <code>uv</code> to use UV in place of virtualenv &amp; pip for virtual environment creation and dependency management, respectively. This often results in a significant performance benefit.</p> <p>For example, if you wanted to enable this functionality for the default environment, you could set the following:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.default]\ninstaller = \"uv\"\n</code></pre> <pre><code>[envs.default]\ninstaller = \"uv\"\n</code></pre> <p>Semi-internal environments like those used for testing and static analysis have this enabled by default.</p> <p>See the how-to guide for more information about switching the installer.</p>"},{"location":"blog/2024/05/02/hatch-v1100/#python-script-runner","title":"Python script runner","text":"<p>The <code>run</code> command now supports executing Python scripts with inline metadata as standardized by PEP 723.</p> <p>As an example, consider the following script:</p>  script.py <pre><code># /// script\n# requires-python = \"&gt;=3.11\"\n# dependencies = [\n#   \"httpx\",\n#   \"rich\",\n# ]\n# ///\n\nimport httpx\nfrom rich.pretty import pprint\n\nresp = httpx.get(\"https://peps.python.org/api/peps.json\")\ndata = resp.json()\npprint([(k, v[\"title\"]) for k, v in data.items()][:10])\n</code></pre> <p>If you run the script for the first time as follows:</p> <pre><code>hatch run script.py\n</code></pre> <p>Hatch will create a dedicated environment for that script using a version of Python greater than or equal to 3.11 with dependencies <code>httpx</code> and <code>rich</code>.</p> <p></p> <p>See the how-to guide for more information.</p>"},{"location":"blog/2024/05/02/hatch-v1100/#static-analysis","title":"Static analysis","text":"<p>The environment used for static analysis is now completely configurable such that you can fully alter the underlying behavior of the <code>fmt</code> command (see the how-to).</p> <p>Additionally, Ruff has been updated to version 1.4.0 and the rules selected by default have been updated accordingly. Check out their blog post about how the new hand-written parser has made it twice as fast!</p>"},{"location":"blog/2024/05/02/hatch-v1100/#community-highlights","title":"Community highlights","text":""},{"location":"blog/2024/05/02/hatch-v1100/#visual-studio-code","title":"Visual Studio Code","text":"<p>Visual Studio Code announced support for Hatch environments in their latest release. This means that you can now easily discover and select Hatch environments for your projects directly from the editor.</p> <p>See the how-to guide for detailed instructions.</p>"},{"location":"blog/2024/05/02/hatch-v1100/#cmake-build-plugin","title":"CMake build plugin","text":"<p>A new release of the extension module builder scikit-build-core has introduced a build plugin for Hatchling. This means that you can use Hatchling as your build backend while also shipping extension modules built with CMake.</p> <p>To get started, add the dependency to your build requirements:</p>  pyproject.toml <pre><code>[build-system]\nrequires = [\"hatchling&gt;=1.24.2\", \"scikit-build-core~=0.9.3\"]\nbuild-backend = \"hatchling.build\"\n</code></pre> <p>Then explicitly enable the <code>experimental</code> option (acknowledging that the plugin will move to a dedicated package in the future):</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build.targets.wheel.hooks.scikit-build]\nexperimental = true\n</code></pre> <pre><code>[build.targets.wheel.hooks.scikit-build]\nexperimental = true\n</code></pre> <p>At this point, you can create your <code>CMakeLists.txt</code> file as usual and start building your extension modules with CMake! Check out the dedicated example project for a complete demonstration.</p>"},{"location":"blog/2024/05/02/hatch-v1100/#meta","title":"Meta","text":""},{"location":"blog/2024/05/02/hatch-v1100/#docs","title":"Docs","text":"<p>The efforts toward documentation improvements have increased substantially and the priorities have shifted. From now on expect to see far more tutorials and how-to guides rather than just reference material.</p>"},{"location":"blog/2024/05/02/hatch-v1100/#future","title":"Future","text":"<p>Upcoming features include:</p> <ul> <li>workspaces functionality similar to Cargo</li> <li>commands to manage dependencies</li> <li>Windows release artifacts signed by the PSF (just like macOS)</li> <li>performance improvements for both the CLI and the Hatchling build system</li> </ul>"},{"location":"blog/2024/05/02/hatch-v1100/#support","title":"Support","text":"<p>If you or your organization finds value in what Hatch provides, consider a sponsorship to assist with maintenance and more rapid development!</p>"},{"location":"blog/2022/10/08/hatch-v160/","title":"Hatch v1.6.0","text":"<p>Hatch v1.6.0 brings improvements to build environments, better handling of dynamic metadata, and support for tools like Visual Studio Code.</p>"},{"location":"blog/2022/10/08/hatch-v160/#build-environments","title":"Build environments","text":"<p>Originally, the environment interface method for providing builder sub-environments was intended to be used in conjunction with some cleanup logic in order to provide a fresh setup every time. However, this is unnecessary in practice because build dependencies rarely change.</p> <p>Without caching, repeat build environment use is slow which affects the following scenarios:</p> <ul> <li>the <code>build</code> command</li> <li>commands that read project metadata, like <code>dep hash</code>, if any fields are set dynamically</li> </ul> <p>Now a new environment interface method <code>build_environment_exists</code> is used by Hatch to determine whether or not it has already been created, for implementations that have a caching mechanism.</p> <p>The <code>virtual</code> environment type now uses this method to cache build environments.</p>"},{"location":"blog/2022/10/08/hatch-v160/#project-metadata","title":"Project metadata","text":"<p>Dynamically defined metadata is now supported everywhere, thanks to the new caching of <code>virtual</code> build environments.</p> <p>A <code>project metadata</code> command is introduced that displays the fully resolved metadata. The output format is JSON unless a field is specified as an argument.</p> <p>For example, if you checkout a project that is built by Hatch, like FastAPI, and run:</p> <pre><code>hatch project metadata readme\n</code></pre> <p>only the <code>readme</code> text will be displayed. If the content is in Markdown, then Rich will render it directly in your terminal:</p> <p></p>"},{"location":"blog/2022/10/08/hatch-v160/#virtual-environment-location","title":"Virtual environment location","text":"<p>The <code>virtual</code> environment type now uses a flat layout for storage in the configured <code>virtual</code> environment directory if the directory resides somewhere within the project root or if it is set to a <code>.virtualenvs</code> directory within the user's home directory.</p> <p>For example, if you define the following Hatch configuration:</p>  config.toml <pre><code>[dirs.env]\nvirtual = \".hatch\"\n</code></pre> <p>and the following matrix:</p>  pyproject.toml hatch.toml <pre><code>[[tool.hatch.envs.test.matrix]]\npython = [\"3.7\", \"3.8\", \"3.9\", \"3.10\", \"3.11\"]\n</code></pre> <pre><code>[[envs.test.matrix]]\npython = [\"3.7\", \"3.8\", \"3.9\", \"3.10\", \"3.11\"]\n</code></pre> <p>then locating environments with the following command:</p> <pre><code>hatch env find test\n</code></pre> <p>will show that the general directory structure is:</p> <pre><code>.hatch\n\u251c\u2500\u2500 test.py3.7\n\u251c\u2500\u2500 test.py3.8\n\u251c\u2500\u2500 test.py3.9\n\u251c\u2500\u2500 test.py3.10\n\u2514\u2500\u2500 test.py3.11\n</code></pre> <p>This flat structure is required for detection of virtual environments by tools like Visual Studio Code and PyCharm.</p> <p>Additionally, the <code>virtual</code> environment type now supports a <code>path</code> option to specify an explicit path that all inherited environments will share, such as the common <code>.venv</code>.</p>"},{"location":"blog/2022/10/08/hatch-v160/#migration-script-improvements","title":"Migration script improvements","text":"<p>The script used to migrate existing projects from <code>setuptools</code> has been improved to handle more edge cases that were encountered in the wild and now no longer modifies the formatting of existing <code>pyproject.toml</code> configuration.</p>"},{"location":"blog/2022/10/08/hatch-v160/#hatchling","title":"Hatchling","text":"<p>Hatch now depends on Hatchling v1.11.0, which was also just released.</p>"},{"location":"blog/2022/10/08/hatch-v160/#environment-version-source","title":"Environment version source","text":"<p>A new <code>env</code> version source is available that allows for the project version to be defined by an environment variable.</p>"},{"location":"blog/2022/10/08/hatch-v160/#relaxed-version-bumping","title":"Relaxed version bumping","text":"<p>The <code>standard</code> version scheme now supports a <code>validate-bump</code> option that when set to <code>false</code> will forego the check when updating the version that the desired version is higher than the current version.</p> <p>This use case comes from Project Jupyter:</p> <p>A common pattern we use in Jupyter is to bump to a <code>.dev0</code> minor version bump after making a release.  If we have a  bug fix that needs to go out in the interim, we'd rather not be forced to create a branch every time.</p>"},{"location":"blog/2023/12/11/hatch-v180/","title":"Hatch v1.8.0","text":"<p>Hatch v1.8.0 brings Python distribution management, static analysis and formatting backed by Ruff, and binaries for every platform.</p>"},{"location":"blog/2023/12/11/hatch-v180/#installation-made-easy","title":"Installation made easy","text":"<p>One thing that has been a perpetual problem for Hatch and other Python applications is that Python itself is a dependency. You, and more importantly your users, need to in some way get Python before your software can even be used. The recommended way to go about that is platform-dependent and even differs based on your target audience. I viewed this as a central UX problem for Hatch and so severe that I took a bit of a hiatus to solve it.</p> <p>Luckily, I have to my satisfaction solved this problem in the form of PyApp. It is a runtime installer for Python projects written in Rust. Apps are distributed as standalone executables as users have come to expect and bootstrapping occurs upon the first invocation. Here is an example of what you would see the first time you run a binary from this release:</p> <p></p> <p>Now that we have binaries, creating installers for different platforms becomes trivial. Starting with this release not only are binaries available for every platform but also we have installers for Windows and macOS. The installer for macOS is signed using a certificate from the same account used to sign the official distributions from https://www.python.org, so users will not get any security pop-ups. Shout out to @ewdurbin for their extreme generosity in setting up multiple certificates in their free time!</p> <p>These installers and binaries are now the recommended way to install and update Hatch. These binaries have built-in management so you can update to the latest version by running <code>hatch self update</code>.</p> <p>Windows signing</p> <p>In future we will sign the installers for Windows but I did not have time to look into how that works. macOS signing took way longer than I anticipated </p>"},{"location":"blog/2023/12/11/hatch-v180/#python-management","title":"Python management","text":"<p>For a long time I and other users have desired that Hatch gain the ability to manage Python distributions. In my mind this was always blocked on a better installation experience because there was sort of a chicken-or-egg problem where you want a Python manager but you first need Python. No longer is that the case!</p> <p>The new <code>python</code> command group allows for easy installation of various distributions to arbitrary locations which are then added to your PATH by default. Hatch supports CPython and PyPy distributions:</p> <p></p>"},{"location":"blog/2023/12/11/hatch-v180/#virtual-environment-python-resolution","title":"Virtual environment Python resolution","text":"<p>The <code>virtual</code> environment type is now far more intelligent when resolving the parent distribution to use and guarantees that, when no specific version is requested, the resolved distribution will always be compatible with the project.</p> <p>Additionally, when a requested version cannot be found on PATH it will automatically be downloaded and managed internally.</p>"},{"location":"blog/2023/12/11/hatch-v180/#static-analysis","title":"Static analysis","text":"<p>There is a new <code>fmt</code> command, backed entirely by Ruff, that checks and fixes your code for formatting and linting issues.</p> <p>Starting with this release, Hatch maintains default settings that are guaranteed to be up-to-date and represent best practices for programming in modern Python. The idea is to provide defaults that are so broadly applicable that the majority of users will maintain little if any of their own overrides.</p> <p>The default behavior is internal management of settings to provide an OOTB experience that works. It is recommended however that you persist the default config file in version control so that other tools like IDEs can utilize your full configuration.</p> <p>Since Ruff is now provided as a built-in feature, new project templates no longer have such configuration and are much less verbose.</p>"},{"location":"blog/2023/12/11/hatch-v180/#build-improvements","title":"Build improvements","text":"<p>Building projects that do not use Hatchling as a backend is now supported and such builds are managed with the standard build tool.</p> <p>The bridge between Hatch and the Hatchling CLI has been removed. Previously, the builder would send serialized messages to Hatch that would contain the desired content and style for each line of output. This was done in an effort to allow builder and build hook plugins to output pretty messages without actually requiring a dependency like Rich. A problem that arises with this is that builders that invoke subprocesses will not display ANSI codes as one might expect and will lose out on the interactive experience of such invocations, like the built-in binary builder plugin calling <code>cargo build</code>. So now everything is simpler at the expense of no colored output without manual logic, or adding a dependency if you're a third-party plugin.</p>"},{"location":"blog/2023/12/11/hatch-v180/#faster-environment-usage","title":"Faster environment usage","text":"<p>Spawning a shell or running commands within environments always first checks that your project's dependencies are satisfied and if not synchronizes the environment with what is defined. Previously, this had the potential to be quite slow for projects that have many dependencies.</p> <p>Now the set of dependency definitions is hashed and no check is performed if the hash is the same as before, significantly speeding up environment usage in most cases.</p>"},{"location":"blog/2023/12/11/hatch-v180/#hatchling","title":"Hatchling","text":"<p>Hatch now depends on Hatchling v1.19.0, which was also just released.</p>"},{"location":"blog/2023/12/11/hatch-v180/#better-defaults","title":"Better defaults","text":"<p>Hatchling is all about providing the best possible defaults, even at the expense of backward compatibility. In this release, there are two breaking changes that provide a much better user experience and were in fact requested by users.</p> <ul> <li>Both the <code>force-include</code> option and the <code>force_include_editable</code> wheel build data setting now raise errors if source paths do not exist.</li> <li>The <code>wheel</code> build target now raises an error when no file inclusion options have been defined and none of its heuristics to determine what to ship are satisfied.</li> </ul>"},{"location":"blog/2023/12/11/hatch-v180/#binary-build-target","title":"Binary build target","text":"<p>A new <code>binary</code> build target is now stable that allows for the building of standalone binaries for projects. This is what Hatch itself uses for its binaries.</p>"},{"location":"blog/2023/12/11/hatch-v180/#meta","title":"Meta","text":""},{"location":"blog/2023/12/11/hatch-v180/#why-hatch","title":"Why Hatch?","text":"<p>A new page has been introduced that discusses the value proposition of Hatch and Hatchling in comparison to alternatives. Currently, it only addresses a few features but in future this page will become more comprehensive.</p>"},{"location":"blog/2023/12/11/hatch-v180/#future","title":"Future","text":"<p>Upcoming features include a <code>test</code> command, commands to manage dependencies, and workspaces functionality similar to Cargo that will make managing monorepos far easier.</p> <p>Next year there will be two large efforts that you should expect to see:</p> <ol> <li> <p>A significant amount of my free time (and some at work) will be devoted to introducing lock file functionality in Hatch and trying to get whatever that happens to be standardized.</p> <p>I met with @brettcannon about his thoughts post-PEP 665 and about mousebender. I also met with the prefix.dev team about rip and was fortunate enough to be shown a demo before its official announcement.</p> <p>At the moment, the two options I see are to either go all in and contribute to mousebender or rely on the Prefix folks and use rip. The latter has the benefit of potentially supporting Conda as a side effect with the downside of being quite new with the spec firmly out of our control. The former has the benefit of being able to easily gain institutional support from the Python packaging team and each of our employers with the downside being a significant amount of work needing to be done.</p> </li> <li> <p>When @henryiii is able to get some free time away from teaching I plan to work with him once again and push very hard for the Python build ecosystem to adopt the extensionlib approach.</p> <p>I am of the opinion that the Python community has not fully completed the expressed outcome of PEP 517 in that build backends are still (for the most part) reliant on setuptools for building non-Python code bases.</p> <p>Basically, there are components that interact with compilers to produce extension modules and components that pack files into an archive which we call a build backend. These are two distinct pieces of functionality and my view is that there should be an API that allows backends to consume extension module builders to find out where things got created and where they should be shipped inside archives.</p> <p>In this hypothetical future any build backend would be able to trigger the building of extension modules based on user configuration.</p> </li> </ol>"},{"location":"blog/2023/12/11/hatch-v180/#support","title":"Support","text":"<p>If you or your organization finds value in what Hatch provides, consider a sponsorship to assist with maintenance and more rapid development!</p>"},{"location":"blog/2023/12/18/hatch-v190/","title":"Hatch v1.9.0","text":"<p>Hatch v1.9.0 brings improvements to static analysis and important bug fixes.</p>"},{"location":"blog/2023/12/18/hatch-v190/#static-analysis","title":"Static analysis","text":"<p>The default version of Ruff has been increased to v0.1.8. This release brings formatting capabilities to docstrings and Hatch enables this by default with line length set to 80. This length was chosen as the default because it plays nicely with the rendering of the most popular themes for Python documentation, such as Material for MkDocs and Furo.</p> <p>Additionally, it is now possible for projects to pin to specific versions of Ruff for upgrading at a later time:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.hatch-static-analysis]\ndependencies = [\"ruff==X.Y.Z\"]\n</code></pre> <pre><code>[envs.hatch-static-analysis]\ndependencies = [\"ruff==X.Y.Z\"]\n</code></pre>"},{"location":"blog/2023/12/18/hatch-v190/#notable-fixes","title":"Notable fixes","text":"<ul> <li>Python resolution for environments that do not install the project is no longer bound by the project's Python requirement.</li> <li>Fixed an edge case for out-of-the-box static analysis when there was existing configuration.</li> <li>Compatibility checks for environments no longer occur if the environment is already created. This significantly increases the responsiveness of environment usage.</li> </ul>"},{"location":"cli/about/","title":"CLI usage","text":""},{"location":"cli/about/#verbosity","title":"Verbosity","text":"<p>The amount of displayed output is controlled solely by the <code>-v</code>/<code>--verbose</code> (environment variable <code>HATCH_VERBOSE</code>) and  <code>-q</code>/<code>--quiet</code> (environment variable <code>HATCH_QUIET</code>) root options.</p> <p>The levels are documented here.</p>"},{"location":"cli/about/#project-awareness","title":"Project awareness","text":"<p>No matter the mode, Hatch will always change to the project's root directory for entering or running commands in environments.</p>"},{"location":"cli/about/#tab-completion","title":"Tab completion","text":"<p>Completion is achieved by saving a script and then executing it as a part of your shell's startup sequence.</p> <p>Afterward, you'll need to start a new shell in order for the changes to take effect.</p> BashZ shellfish <p>Save the script somewhere:</p> <pre><code>_HATCH_COMPLETE=bash_source hatch &gt; ~/.hatch-complete.bash\n</code></pre> <p>Source the file in <code>~/.bashrc</code> (or <code>~/.bash_profile</code> if on macOS):</p> <pre><code>. ~/.hatch-complete.bash\n</code></pre> <p>Save the script somewhere:</p> <pre><code>_HATCH_COMPLETE=zsh_source hatch &gt; ~/.hatch-complete.zsh\n</code></pre> <p>Source the file in <code>~/.zshrc</code>:</p> <pre><code>. ~/.hatch-complete.zsh\n</code></pre> <p>Save the script in <code>~/.config/fish/completions</code>:</p> <pre><code>_HATCH_COMPLETE=fish_source hatch &gt; ~/.config/fish/completions/hatch.fish\n</code></pre>"},{"location":"cli/reference/","title":"hatch","text":"<p>Usage:</p> <pre><code>hatch [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--env</code>, <code>-e</code> text The name of the environment to use [env var: <code>HATCH_ENV</code>] <code>default</code> <code>--project</code>, <code>-p</code> text The name of the project to work on [env var: <code>HATCH_PROJECT</code>] <code>Sentinel.UNSET</code> <code>--verbose</code>, <code>-v</code> integer range (<code>0</code> and above) Increase verbosity (can be used additively) [env var: <code>HATCH_VERBOSE</code>] <code>0</code> <code>--quiet</code>, <code>-q</code> integer range (<code>0</code> and above) Decrease verbosity (can be used additively) [env var: <code>HATCH_QUIET</code>] <code>0</code> <code>--color</code> / <code>--no-color</code> boolean Whether or not to display colored output (default is auto-detection) [env vars: <code>FORCE_COLOR</code>/<code>NO_COLOR</code>] None <code>--interactive</code> / <code>--no-interactive</code> boolean Whether or not to allow features like prompts and progress bars (default is auto-detection) [env var: <code>HATCH_INTERACTIVE</code>] None <code>--data-dir</code> text The path to a custom directory used to persist data [env var: <code>HATCH_DATA_DIR</code>] <code>Sentinel.UNSET</code> <code>--cache-dir</code> text The path to a custom directory used to cache data [env var: <code>HATCH_CACHE_DIR</code>] <code>Sentinel.UNSET</code> <code>--config</code> text The path to a custom config file to use [env var: <code>HATCH_CONFIG</code>] <code>Sentinel.UNSET</code> <code>--version</code> boolean Show the version and exit. <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-build","title":"hatch build","text":"<p>Build a project.</p> <p>Usage:</p> <pre><code>hatch build [OPTIONS] [LOCATION]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--target</code>, <code>-t</code> text The target to build, overriding project defaults. This may be selected multiple times e.g. <code>-t sdist -t wheel</code> <code>Sentinel.UNSET</code> <code>--hooks-only</code> boolean Whether or not to only execute build hooks [env var: <code>HATCH_BUILD_HOOKS_ONLY</code>] <code>False</code> <code>--no-hooks</code> boolean Whether or not to disable build hooks [env var: <code>HATCH_BUILD_NO_HOOKS</code>] <code>False</code> <code>--ext</code> boolean Whether or not to only execute build hooks for distributing binary Python packages, such as compiling extensions. Equivalent to <code>--hooks-only -t wheel</code> <code>False</code> <code>--clean</code>, <code>-c</code> boolean Whether or not existing artifacts should first be removed [env var: <code>HATCH_BUILD_CLEAN</code>] <code>False</code> <code>--clean-hooks-after</code> boolean Whether or not build hook artifacts should be removed after each build [env var: <code>HATCH_BUILD_CLEAN_HOOKS_AFTER</code>] <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-clean","title":"hatch clean","text":"<p>Remove build artifacts.</p> <p>Usage:</p> <pre><code>hatch clean [OPTIONS] [LOCATION]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--target</code>, <code>-t</code> text The target with which to remove artifacts, overriding project defaults. This may be selected multiple times e.g. <code>-t sdist -t wheel</code> <code>Sentinel.UNSET</code> <code>--hooks-only</code> boolean Whether or not to only remove artifacts from build hooks [env var: <code>HATCH_BUILD_HOOKS_ONLY</code>] <code>False</code> <code>--no-hooks</code> boolean Whether or not to ignore artifacts from build hooks [env var: <code>HATCH_BUILD_NO_HOOKS</code>] <code>False</code> <code>--ext</code> boolean Whether or not to only remove artifacts from build hooks for distributing binary Python packages, such as compiled extensions. Equivalent to <code>--hooks-only -t wheel</code> <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-config","title":"hatch config","text":"<p>Manage the config file</p> <p>Usage:</p> <pre><code>hatch config [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-config-explore","title":"hatch config explore","text":"<p>Open the config location in your file manager.</p> <p>Usage:</p> <pre><code>hatch config explore [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-config-find","title":"hatch config find","text":"<p>Show the location of the config file.</p> <p>Usage:</p> <pre><code>hatch config find [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-config-restore","title":"hatch config restore","text":"<p>Restore the config file to default settings.</p> <p>Usage:</p> <pre><code>hatch config restore [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-config-set","title":"hatch config set","text":"<p>Assign values to config file entries. If the value is omitted, you will be prompted, with the input hidden if it is sensitive.</p> <p>Usage:</p> <pre><code>hatch config set [OPTIONS] KEY [VALUE]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-config-show","title":"hatch config show","text":"<p>Show the contents of the config file.</p> <p>Usage:</p> <pre><code>hatch config show [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--all</code>, <code>-a</code> boolean Do not scrub secret fields <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-config-update","title":"hatch config update","text":"<p>Update the config file with any new fields.</p> <p>Usage:</p> <pre><code>hatch config update [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-dep","title":"hatch dep","text":"<p>Manage environment dependencies</p> <p>Usage:</p> <pre><code>hatch dep [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-dep-hash","title":"hatch dep hash","text":"<p>Output a hash of the currently defined dependencies.</p> <p>Usage:</p> <pre><code>hatch dep hash [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--project-only</code>, <code>-p</code> boolean Whether or not to exclude environment dependencies <code>False</code> <code>--env-only</code>, <code>-e</code> boolean Whether or not to exclude project dependencies <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-dep-show","title":"hatch dep show","text":"<p>Display dependencies in various formats</p> <p>Usage:</p> <pre><code>hatch dep show [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-dep-show-requirements","title":"hatch dep show requirements","text":"<p>Enumerate dependencies as a list of requirements.</p> <p>Usage:</p> <pre><code>hatch dep show requirements [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--project-only</code>, <code>-p</code> boolean Whether or not to exclude environment dependencies <code>False</code> <code>--env-only</code>, <code>-e</code> boolean Whether or not to exclude project dependencies <code>False</code> <code>--feature</code>, <code>-f</code> text Whether or not to only show the dependencies of the specified features <code>Sentinel.UNSET</code> <code>--all</code> boolean Whether or not to include the dependencies of all features <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-dep-show-table","title":"hatch dep show table","text":"<p>Enumerate dependencies in a tabular format.</p> <p>Usage:</p> <pre><code>hatch dep show table [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--project-only</code>, <code>-p</code> boolean Whether or not to exclude environment dependencies <code>False</code> <code>--env-only</code>, <code>-e</code> boolean Whether or not to exclude project dependencies <code>False</code> <code>--lines</code>, <code>-l</code> boolean Whether or not to show lines between table rows <code>False</code> <code>--ascii</code> boolean Whether or not to only use ASCII characters <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-env","title":"hatch env","text":"<p>Manage project environments</p> <p>Usage:</p> <pre><code>hatch env [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-env-create","title":"hatch env create","text":"<p>Create environments.</p> <p>Usage:</p> <pre><code>hatch env create [OPTIONS] [ENV_NAME]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-env-find","title":"hatch env find","text":"<p>Locate environments.</p> <p>Usage:</p> <pre><code>hatch env find [OPTIONS] [ENV_NAME]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-env-prune","title":"hatch env prune","text":"<p>Remove all environments.</p> <p>Usage:</p> <pre><code>hatch env prune [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-env-remove","title":"hatch env remove","text":"<p>Remove environments.</p> <p>Usage:</p> <pre><code>hatch env remove [OPTIONS] [ENV_NAME]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-env-run","title":"hatch env run","text":"<p>Run commands within project environments.</p> <p>The <code>-e</code>/<code>--env</code> option overrides the equivalent root option and the <code>HATCH_ENV</code> environment variable.</p> <p>The <code>-i</code>/<code>--include</code> and <code>-x</code>/<code>--exclude</code> options may be used to include or exclude certain variables, optionally followed by specific comma-separated values, and may be selected multiple times. For example, if you have the following configuration:</p>  pyproject.toml hatch.toml <pre><code>[[tool.hatch.envs.test.matrix]]\npython = [\"3.9\", \"3.10\"]\nversion = [\"42\", \"3.14\", \"9000\"]\n</code></pre> <pre><code>[[envs.test.matrix]]\npython = [\"3.9\", \"3.10\"]\nversion = [\"42\", \"3.14\", \"9000\"]\n</code></pre> <p>then running:</p> <pre><code>hatch env run -i py=3.10 -x version=9000 test:pytest\n</code></pre> <p>would execute <code>pytest</code> in the environments <code>test.py3.10-42</code> and <code>test.py3.10-3.14</code>. Note that <code>py</code> may be used as an alias for <code>python</code>.</p> <p>Note</p> <p>The inclusion option is treated as an intersection while the exclusion option is treated as a union i.e. an environment must match all of the included variables to be selected while matching any of the excluded variables will prevent selection.</p> <p>Usage:</p> <pre><code>hatch env run [OPTIONS] ARGS...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--env</code>, <code>-e</code> text The environments to target <code>Sentinel.UNSET</code> <code>--include</code>, <code>-i</code> text The matrix variables to include <code>Sentinel.UNSET</code> <code>--exclude</code>, <code>-x</code> text The matrix variables to exclude <code>Sentinel.UNSET</code> <code>--filter</code>, <code>-f</code> text The JSON data used to select environments None <code>--force-continue</code> boolean Run every command and if there were any errors exit with the first code <code>False</code> <code>--ignore-compat</code> boolean Ignore incompatibility when selecting specific environments <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-env-show","title":"hatch env show","text":"<p>Show the available environments.</p> <p>Usage:</p> <pre><code>hatch env show [OPTIONS] [ENVS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--ascii</code> boolean Whether or not to only use ASCII characters <code>False</code> <code>--json</code> boolean Whether or not to output in JSON format <code>False</code> <code>--internal</code>, <code>-i</code> boolean Show internal environments <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-fmt","title":"hatch fmt","text":"<p>Format and lint source code.</p> <p>Usage:</p> <pre><code>hatch fmt [OPTIONS] [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--check</code> boolean Only check for errors rather than fixing them <code>False</code> <code>--linter</code>, <code>-l</code> boolean Only run the linter <code>False</code> <code>--formatter</code>, <code>-f</code> boolean Only run the formatter <code>False</code> <code>--sync</code> boolean Sync the default config file with the current version of Hatch <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-new","title":"hatch new","text":"<p>Create or initialize a project.</p> <p>Usage:</p> <pre><code>hatch new [OPTIONS] [NAME] [LOCATION]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--interactive</code>, <code>-i</code> boolean Interactively choose details about the project <code>False</code> <code>--cli</code> boolean Give the project a command line interface <code>False</code> <code>--init</code> boolean Initialize an existing project <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-project","title":"hatch project","text":"<p>View project information</p> <p>Usage:</p> <pre><code>hatch project [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-project-metadata","title":"hatch project metadata","text":"<p>Display project metadata.</p> <p>If you want to view the raw readme file without rendering, you can use a JSON parser like jq:</p> <pre><code>hatch project metadata | jq -r .readme\n</code></pre> <p>Usage:</p> <pre><code>hatch project metadata [OPTIONS] [FIELD]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-publish","title":"hatch publish","text":"<p>Publish build artifacts.</p> <p>Usage:</p> <pre><code>hatch publish [OPTIONS] [ARTIFACTS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--repo</code>, <code>-r</code> text The repository with which to publish artifacts [env var: <code>HATCH_INDEX_REPO</code>] <code>Sentinel.UNSET</code> <code>--user</code>, <code>-u</code> text The user with which to authenticate [env var: <code>HATCH_INDEX_USER</code>] <code>Sentinel.UNSET</code> <code>--auth</code>, <code>-a</code> text The credentials to use for authentication [env var: <code>HATCH_INDEX_AUTH</code>] <code>Sentinel.UNSET</code> <code>--ca-cert</code> text The path to a CA bundle [env var: <code>HATCH_INDEX_CA_CERT</code>] <code>Sentinel.UNSET</code> <code>--client-cert</code> text The path to a client certificate, optionally containing the private key [env var: <code>HATCH_INDEX_CLIENT_CERT</code>] <code>Sentinel.UNSET</code> <code>--client-key</code> text The path to the client certificate's private key [env var: <code>HATCH_INDEX_CLIENT_KEY</code>] <code>Sentinel.UNSET</code> <code>--no-prompt</code>, <code>-n</code> boolean Disable prompts, such as for missing required fields <code>False</code> <code>--initialize-auth</code> boolean Save first-time authentication information even if nothing was published <code>False</code> <code>--publisher</code>, <code>-p</code> text The publisher plugin to use (default is <code>index</code>) [env var: <code>HATCH_PUBLISHER</code>] <code>index</code> <code>--option</code>, <code>-o</code> text Options to pass to the publisher plugin. This may be selected multiple times e.g. <code>-o foo=bar -o baz=23</code> [env var: <code>HATCH_PUBLISHER_OPTIONS</code>] <code>Sentinel.UNSET</code> <code>--yes</code>, <code>-y</code> boolean Confirm without prompting when the plugin is disabled <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-python","title":"hatch python","text":"<p>Manage Python installations</p> <p>Usage:</p> <pre><code>hatch python [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-python-find","title":"hatch python find","text":"<p>Locate Python binaries.</p> <p>Usage:</p> <pre><code>hatch python find [OPTIONS] NAME\n</code></pre> <p>Options:</p> Name Type Description Default <code>-p</code>, <code>--parent</code> boolean Show the parent directory of the Python binary <code>False</code> <code>--dir</code>, <code>-d</code> text The directory in which distributions reside <code>Sentinel.UNSET</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-python-install","title":"hatch python install","text":"<p>Install Python distributions.</p> <p>You may select <code>all</code> to install all compatible distributions:</p> <pre><code>hatch python install all\n</code></pre> <p>You can set custom sources for distributions by setting the <code>HATCH_PYTHON_SOURCE_&lt;NAME&gt;</code> environment variable where <code>&lt;NAME&gt;</code> is the uppercased version of the distribution name with periods replaced by underscores e.g. <code>HATCH_PYTHON_SOURCE_PYPY3_10</code>.</p> <p>Usage:</p> <pre><code>hatch python install [OPTIONS] NAMES...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--private</code> boolean Do not add distributions to the user PATH <code>False</code> <code>--update</code>, <code>-u</code> boolean Update existing installations <code>False</code> <code>--dir</code>, <code>-d</code> text The directory in which to install distributions, overriding configuration <code>Sentinel.UNSET</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-python-remove","title":"hatch python remove","text":"<p>Remove Python distributions.</p> <p>You may select <code>all</code> to remove all installed distributions:</p> <pre><code>hatch python remove all\n</code></pre> <p>Usage:</p> <pre><code>hatch python remove [OPTIONS] NAMES...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--dir</code>, <code>-d</code> text The directory in which distributions reside <code>Sentinel.UNSET</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-python-show","title":"hatch python show","text":"<p>Show the available Python distributions.</p> <p>Usage:</p> <pre><code>hatch python show [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--ascii</code> boolean Whether or not to only use ASCII characters <code>False</code> <code>--dir</code>, <code>-d</code> text The directory in which distributions reside <code>Sentinel.UNSET</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-python-update","title":"hatch python update","text":"<p>Update Python distributions.</p> <p>You may select <code>all</code> to update all installed distributions:</p> <pre><code>hatch python update all\n</code></pre> <p>Usage:</p> <pre><code>hatch python update [OPTIONS] NAMES...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--dir</code>, <code>-d</code> text The directory in which distributions reside <code>Sentinel.UNSET</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-run","title":"hatch run","text":"<p>Run commands within project environments. This is a convenience wrapper around the <code>env run</code> command.</p> <p>If the first argument contains a colon, then the preceding component will be interpreted as the name of the environment to target, overriding the <code>-e</code>/<code>--env</code> root option and the <code>HATCH_ENV</code> environment variable.</p> <p>If the environment provides matrices, then you may also provide leading arguments starting with a <code>+</code> or <code>-</code> to select or exclude certain variables, optionally followed by specific comma-separated values. For example, if you have the following configuration:</p>  pyproject.toml hatch.toml <pre><code>[[tool.hatch.envs.test.matrix]]\npython = [\"3.9\", \"3.10\"]\nversion = [\"42\", \"3.14\", \"9000\"]\n</code></pre> <pre><code>[[envs.test.matrix]]\npython = [\"3.9\", \"3.10\"]\nversion = [\"42\", \"3.14\", \"9000\"]\n</code></pre> <p>then running:</p> <pre><code>hatch run +py=3.10 -version=9000 test:pytest\n</code></pre> <p>would execute <code>pytest</code> in the environments <code>test.py3.10-42</code> and <code>test.py3.10-3.14</code>. Note that <code>py</code> may be used as an alias for <code>python</code>.</p> <p>Note</p> <p>Inclusions are treated as an intersection while exclusions are treated as a union i.e. an environment must match all of the included variables to be selected while matching any of the excluded variables will prevent selection.</p> <p>Usage:</p> <pre><code>hatch run [OPTIONS] [ENV:]ARGS...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-self","title":"hatch self","text":"<p>Manage Hatch</p> <p>Usage:</p> <pre><code>hatch self [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-self-report","title":"hatch self report","text":"<p>Generate a pre-populated GitHub issue.</p> <p>Usage:</p> <pre><code>hatch self report [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--no-open</code>, <code>-n</code> boolean Show the URL instead of opening it <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-self-restore","title":"hatch self restore","text":"<p>Restore the installation</p> <p>Usage:</p> <pre><code>hatch self restore [OPTIONS] [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-self-update","title":"hatch self update","text":"<p>Install the latest version</p> <p>Usage:</p> <pre><code>hatch self update [OPTIONS] [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-shell","title":"hatch shell","text":"<p>Enter a shell within a project's environment.</p> <p>Usage:</p> <pre><code>hatch shell [OPTIONS] [ENV_NAME]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--name</code> text N/A <code>Sentinel.UNSET</code> <code>--path</code> text N/A <code>Sentinel.UNSET</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-status","title":"hatch status","text":"<p>Show information about the current environment.</p> <p>Usage:</p> <pre><code>hatch status [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-test","title":"hatch test","text":"<p>Run tests using the <code>hatch-test</code> environment matrix.</p> <p>If no filtering options are selected, then tests will be run in the first compatible environment found in the matrix with priority given to those matching the current interpreter.</p> <p>The <code>-i</code>/<code>--include</code> and <code>-x</code>/<code>--exclude</code> options may be used to include or exclude certain variables, optionally followed by specific comma-separated values, and may be selected multiple times. For example, if you have the following configuration:</p>  pyproject.toml hatch.toml <pre><code>[[tool.hatch.envs.hatch-test.matrix]]\npython = [\"3.9\", \"3.10\"]\nversion = [\"42\", \"3.14\", \"9000\"]\n</code></pre> <pre><code>[[envs.hatch-test.matrix]]\npython = [\"3.9\", \"3.10\"]\nversion = [\"42\", \"3.14\", \"9000\"]\n</code></pre> <p>then running:</p> <pre><code>hatch test -i py=3.10 -x version=9000\n</code></pre> <p>would run tests in the environments <code>hatch-test.py3.10-42</code> and <code>hatch-test.py3.10-3.14</code>.</p> <p>The <code>-py</code>/<code>--python</code> option is a shortcut for specifying the inclusion <code>-i py=...</code>.</p> <p>Note</p> <p>The inclusion option is treated as an intersection while the exclusion option is treated as a union i.e. an environment must match all of the included variables to be selected while matching any of the excluded variables will prevent selection.</p> <p>Usage:</p> <pre><code>hatch test [OPTIONS] [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--randomize</code>, <code>-r</code> boolean Randomize the order of test execution <code>False</code> <code>--parallel</code>, <code>-p</code> boolean Parallelize test execution <code>False</code> <code>--retries</code> integer Number of times to retry failed tests <code>Sentinel.UNSET</code> <code>--retry-delay</code> float Seconds to wait between retries <code>Sentinel.UNSET</code> <code>--cover</code>, <code>-c</code> boolean Measure code coverage <code>False</code> <code>--cover-quiet</code> boolean Disable coverage reporting after tests, implicitly enabling --cover <code>False</code> <code>--all</code>, <code>-a</code> boolean Test all environments in the matrix <code>False</code> <code>--python</code>, <code>-py</code> text The Python versions to test, equivalent to: -i py=... <code>Sentinel.UNSET</code> <code>--include</code>, <code>-i</code> text The matrix variables to include <code>Sentinel.UNSET</code> <code>--exclude</code>, <code>-x</code> text The matrix variables to exclude <code>Sentinel.UNSET</code> <code>--show</code>, <code>-s</code> boolean Show information about environments in the matrix <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"cli/reference/#hatch-version","title":"hatch version","text":"<p>View or set a project's version.</p> <p>Usage:</p> <pre><code>hatch version [OPTIONS] [DESIRED_VERSION]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--force</code>, <code>-f</code> boolean Allow an explicit downgrading version to be given <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"community/contributing/","title":"Contributing","text":"<p>The usual process to make a contribution is to:</p> <ol> <li>Check for existing related issues</li> <li>Fork the repository and create a new branch</li> <li>Make your changes</li> <li>Make sure formatting, linting and tests passes.</li> <li>Add tests if possible to cover the lines you added.</li> <li>Commit, and send a Pull Request.</li> </ol>"},{"location":"community/contributing/#clone-the-repository","title":"Clone the repository","text":"<p>Clone the <code>hatch</code> repository, <code>cd</code> into it, and create a new branch for your contribution:</p> <pre><code>cd hatch\ngit switch -c add-my-contribution\n</code></pre>"},{"location":"community/contributing/#run-the-tests","title":"Run the tests","text":"<p>Run the test suite while developing:</p> <pre><code>hatch test\n</code></pre> <p>Run the test suite with coverage report:</p> <pre><code>hatch test --cover\n</code></pre> <p>Run the extended test suite with coverage:</p> <pre><code>hatch test --cover --all\n</code></pre>"},{"location":"community/contributing/#lint","title":"Lint","text":"<p>Run automated formatting:</p> <pre><code>hatch fmt\n</code></pre> <p>Run full linting and type checking:</p> <pre><code>hatch fmt --check\nhatch run types:check\n</code></pre>"},{"location":"community/contributing/#docs","title":"Docs","text":"<p>Start the documentation in development:</p> <pre><code>hatch run docs:serve\n</code></pre> <p>Build and validate the documentation website:</p> <pre><code>hatch run docs:build-check\n</code></pre>"},{"location":"community/highlights/","title":"Community highlights","text":""},{"location":"community/highlights/#integration","title":"Integration","text":"<ul> <li>Project Jupyter - https://blog.jupyter.org/packaging-for-jupyter-in-2022-c7be64c38926</li> <li>Visual Studio Code - https://code.visualstudio.com/updates/v1_88#_hatch-environment-discovery</li> </ul>"},{"location":"community/highlights/#adoption","title":"Adoption","text":"<ul> <li>Black - https://ichard26.github.io/blog/2022/10/black-22.10.0/#goodbye-python-36-and-hello-hatchling</li> <li>\"Switching to Hatch\" - https://andrich.me/2023/08/switching-to-hatch/</li> </ul>"},{"location":"community/users/","title":"Users","text":"<p>The following is not intended to be a complete enumeration. Be sure to view the development version of this page for an up-to-date listing.</p>"},{"location":"community/users/#projects","title":"Projects","text":"<p>aiogram | Apache Airflow | argon2-cffi | attrs | Black | coffea | Colorama | Django Anymail | Django Debug Toolbar | Django NYT | Django OTP | Django OTP Agents | Django OTP Twilio | Django OTP YubiKey | Django Places | Django Wiki | FastAPI | filelock | Fluentd | github3.py | Gradio | HTTPX | iCalendar for Humans | LinkChecker | Litestar | Material for MkDocs | MicroPython | MkDocs | openSUSE | Nox | Packit | pipx | platformdirs | Pydantic | Pygments | PyHamcrest | PyMdown Extensions | Python JSON Schema | Rye | SALib | Spack | Starlette | structlog | tox | Twisted | urllib3 | Uvicorn | virtualenv | Voil\u00e0 | XGBoost | Ypy | yt-dlp</p>"},{"location":"community/users/#industry","title":"Industry","text":"<ul> <li>Anaconda <sup>[1|2|3|4|5|6|7]</sup></li> <li>Airbnb <sup>[1]</sup></li> <li>Astronomer <sup>[1|2|3]</sup></li> <li>Bitwarden <sup>[1]</sup></li> <li>Bloomberg <sup>[1|2]</sup></li> <li>Blue Robotics <sup>[1]</sup></li> <li>Cars.com <sup>[1]</sup></li> <li>Cisco <sup>[1|2]</sup></li> <li>Databricks <sup>[1|2|3]</sup></li> <li>Datadog <sup>[1|2|3|4]</sup></li> <li>deepset <sup>[1|2]</sup></li> <li>Elastic <sup>[1|2|3]</sup></li> <li>Google <sup>[1|2|3|4|5|6]</sup></li> <li>IBM <sup>[1]</sup></li> <li>JPMorgan Chase <sup>[1]</sup></li> <li>Intel Corporation <sup>[1|2|3]</sup></li> <li>McKinsey <sup>[1|2]</sup></li> <li>Meta <sup>[1|2|3]</sup></li> <li>Microsoft <sup>[1|2|3|4|5|6]</sup></li> <li>OpenAI <sup>[1]</sup></li> <li>Oracle <sup>[1]</sup></li> <li>Palo Alto Networks <sup>[1]</sup></li> <li>Quansight <sup>[1]</sup></li> <li>Red Hat <sup>[1|2|3|4|5]</sup></li> <li>Salesforce <sup>[1]</sup></li> <li>Snowflake <sup>[1]</sup></li> <li>Splunk <sup>[1]</sup></li> <li>The Westervelt Company <sup>[1|2|3|4|5|6]</sup></li> <li>Virtru <sup>[1|2]</sup></li> <li>VMware <sup>[1|2|3]</sup></li> <li>Volvo Group <sup>[1]</sup></li> </ul>"},{"location":"community/users/#organizations","title":"Organizations","text":"<ul> <li>Free Ebook Foundation <sup>[1]</sup></li> <li>Greater Paris University Hospitals (AP-HP) <sup>[1]</sup></li> <li>Massachusetts General Hospital <sup>[1]</sup></li> <li>Let's Encrypt <sup>[1]</sup></li> <li>Max Planck Society <sup>[1]</sup></li> <li>OpenTelemetry <sup>[1|2]</sup></li> <li>Smithsonian Institution <sup>[1]</sup></li> <li>The New York Public Library <sup>[1]</sup></li> </ul>"},{"location":"community/users/#government","title":"Government","text":"<ul> <li>European Molecular Biology Laboratory<ul> <li>European Bioinformatics Institute <sup>[1]</sup></li> </ul> </li> <li>Germany<ul> <li>Berlin Institute of Health <sup>[1]</sup></li> <li>Helmholtz Munich <sup>[1|2]</sup></li> </ul> </li> <li>Norway<ul> <li>Statistics Norway <sup>[1]</sup></li> </ul> </li> <li>United Kingdom<ul> <li>The Alan Turing Institute <sup>[1]</sup></li> <li>Department for Business and Trade <sup>[1]</sup></li> <li>The National Archives <sup>[1]</sup></li> </ul> </li> <li>United States<ul> <li>NASA <sup>[1]</sup></li> <li>National Institute of Standards and Technology <sup>[1|2|3|4|5]</sup></li> <li>National Security Agency <sup>[1|2]</sup></li> <li>National Telecommunications and Information Administration <sup>[1|2|3|4]</sup></li> </ul> </li> </ul>"},{"location":"community/users/#academia","title":"Academia","text":"<ul> <li>Brown University<ul> <li>Carney Institute for Brain Science <sup>[1]</sup></li> </ul> </li> <li>Carnegie Mellon University<ul> <li>Department of Chemical Engineering <sup>[1|2|3|4|5|6]</sup></li> </ul> </li> <li>Chinese Academy of Sciences<ul> <li>Academy of Mathematics and Systems Science <sup>[1]</sup></li> </ul> </li> <li>Georgia Institute of Technology<ul> <li>Georgia Tech Database Group <sup>[1]</sup></li> </ul> </li> <li>Harvard University<ul> <li>Department of Molecular and Cellular Biology <sup>[1]</sup></li> </ul> </li> <li>Heidelberg University<ul> <li>Center for Molecular Biology <sup>[1]</sup></li> </ul> </li> <li>Leiden University<ul> <li>Leiden University Libraries <sup>[1|2]</sup></li> </ul> </li> <li>Maastricht University<ul> <li>Institute of Data Science <sup>[1|2|3|4|5|6|7|8]</sup></li> </ul> </li> <li>Massachusetts Institute of Technology<ul> <li>Computer Science and Artificial Intelligence Laboratory <sup>[1]</sup></li> <li>Digital Humanities <sup>[1]</sup></li> </ul> </li> <li>Medical University of Innsbruck<ul> <li>Institute of Bioinformatics <sup>[1]</sup></li> </ul> </li> <li>Polytechnique Montr\u00e9al<ul> <li>Department of Computer Engineering and Software Engineering <sup>[1]</sup></li> </ul> </li> <li>Siberian Branch of the Russian Academy of Sciences<ul> <li>Institute of Cytology and Genetics <sup>[1|2|3|4]</sup></li> </ul> </li> <li>Stanford University<ul> <li>Empirical Security Research Group <sup>[1]</sup></li> </ul> </li> <li>University of British Columbia<ul> <li>Department of Earth, Ocean and Atmospheric Sciences <sup>[1|2|3]</sup></li> </ul> </li> <li>University of California, Berkeley<ul> <li>Center for Computational Biology <sup>[1]</sup></li> </ul> </li> <li>University of California, Santa Barbara<ul> <li>Department of Computer Science <sup>[1]</sup></li> </ul> </li> <li>University of Freiburg<ul> <li>Freiburg Center for Data Analysis and Modeling <sup>[1]</sup></li> </ul> </li> <li>University of Illinois Urbana-Champaign<ul> <li>Grainger College of Engineering <sup>[1]</sup></li> </ul> </li> <li>University of Lausanne<ul> <li>Department of Computational Biology <sup>[1]</sup></li> </ul> </li> <li>University of Ljubljana<ul> <li>Faculty of Mechanical Engineering <sup>[1]</sup></li> </ul> </li> <li>University of Massachusetts Amherst<ul> <li>College of Information and Computer Sciences <sup>[1]</sup></li> </ul> </li> <li>University of Oxford<ul> <li>Oxford Research Software Engineering <sup>[1]</sup></li> </ul> </li> <li>University of Pennsylvania<ul> <li>Lifespan Informatics and Neuroimaging Center <sup>[1|2|3|4]</sup></li> </ul> </li> <li>University of Regensburg<ul> <li>Spang Lab <sup>[1]</sup></li> </ul> </li> <li>University of Sussex<ul> <li>Predictive Analytics Lab <sup>[1]</sup></li> </ul> </li> <li>University of Toronto Scarborough<ul> <li>utsc-networking <sup>[1|2|3|4]</sup></li> </ul> </li> <li>University of Washington<ul> <li>Interactive Data Lab <sup>[1]</sup></li> <li>Virtual Brain Lab <sup>[1]</sup></li> </ul> </li> <li>University of Wisconsin-Madison<ul> <li>Data Science Institute <sup>[1]</sup></li> </ul> </li> <li>Waseda University<ul> <li>Tackeuchi Laboratory <sup>[1|2|3|4|5]</sup></li> </ul> </li> <li>Wellcome Sanger Institute <sup>[1]</sup></li> </ul>"},{"location":"community/users/#research","title":"Research","text":"<ul> <li>Clariah <sup>[1]</sup></li> <li>CloudDrift <sup>[1]</sup></li> <li>Dask <sup>[1|2]</sup></li> <li>GAMA <sup>[1]</sup></li> <li>IPython <sup>[1|2|3]</sup></li> <li>MNE <sup>[1|2|3]</sup></li> <li>NIPY <sup>[1|2]</sup></li> <li>Project Jupyter<ul> <li>Jupyter <sup>[1|2|3|4]</sup></li> <li>JupyterLab <sup>[1|2|3|4|5]</sup></li> <li>Jupyter Server <sup>[1|2|3|4]</sup></li> </ul> </li> <li>RAPIDS <sup>[1] <li>Scikit-HEP <sup>[1|2|3|4|5|6|7|8|9|10]</sup></li> <li>scverse <sup>[1|2|3]</sup></li> <li>Spyder <sup>[1]</sup></li>"},{"location":"community/users/#security","title":"Security","text":"<ul> <li>Armory</li> <li>in-toto</li> <li>The Update Framework</li> </ul>"},{"location":"community/users/#crypto","title":"Crypto","text":"<ul> <li>Ocean Protocol <sup>[1]</sup></li> </ul>"},{"location":"config/build/","title":"Build configuration","text":"<p>Build targets are defined as sections within <code>tool.hatch.build.targets</code>:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build.targets.&lt;TARGET_NAME&gt;]\n</code></pre> <pre><code>[build.targets.&lt;TARGET_NAME&gt;]\n</code></pre> <p>Tip</p> <p>Although not recommended, you may define global configuration in the <code>tool.hatch.build</code> table. Keys may then be overridden by target config.</p>"},{"location":"config/build/#build-system","title":"Build system","text":"<p>To be compatible with the broader Python packaging ecosystem, you must define the build system as follows:</p>  pyproject.toml <pre><code>[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n</code></pre> <p>The version of <code>hatchling</code> defined here will be used to build all targets.</p> <p>Hatchling is a standards-compliant<sup>1</sup> build backend and is a dependency of Hatch itself.</p>"},{"location":"config/build/#file-selection","title":"File selection","text":""},{"location":"config/build/#vcs","title":"VCS","text":"<p>By default, Hatch will respect the first <code>.gitignore</code> or <code>.hgignore</code> file found in your project's root directory or parent directories. Set <code>ignore-vcs</code> to <code>true</code> to disable this behavior:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build.targets.sdist]\nignore-vcs = true\n</code></pre> <pre><code>[build.targets.sdist]\nignore-vcs = true\n</code></pre> <p>Note</p> <p>For <code>.hgignore</code> files only glob syntax is supported.</p>"},{"location":"config/build/#patterns","title":"Patterns","text":"<p>You can set the <code>include</code> and <code>exclude</code> options to select exactly which files will be shipped in each build, with <code>exclude</code> taking precedence. Every entry represents a Git-style glob pattern.</p> <p>For example, the following configuration:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build.targets.sdist]\ninclude = [\n  \"pkg/*.py\",\n  \"/tests\",\n]\nexclude = [\n  \"*.json\",\n  \"pkg/_compat.py\",\n]\n</code></pre> <pre><code>[build.targets.sdist]\ninclude = [\n  \"pkg/*.py\",\n  \"/tests\",\n]\nexclude = [\n  \"*.json\",\n  \"pkg/_compat.py\",\n]\n</code></pre> <p>will exclude every file with a <code>.json</code> extension, and will include everything under a <code>tests</code> directory located at the root and every file with a <code>.py</code> extension that is directly under a <code>pkg</code> directory located at the root except for <code>_compat.py</code>.</p>"},{"location":"config/build/#artifacts","title":"Artifacts","text":"<p>If you want to include files that are ignored by your VCS, such as those that might be created by build hooks, you can use the <code>artifacts</code> option. This option is semantically equivalent to <code>include</code>.</p> <p>Note that artifacts are not affected by the <code>exclude</code> option. Artifacts can be excluded by using more explicit paths or by using the <code>!</code> negation operator. When using the <code>!</code> operator, the negated pattern(s) must come after the more generic ones.</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build.targets.wheel]\nartifacts = [\n  \"*.so\",\n  \"*.dll\",\n  \"!/foo/*.so\",\n]\n</code></pre> <pre><code>[build.targets.wheel]\nartifacts = [\n  \"*.so\",\n  \"*.dll\",\n  \"!/foo/*.so\",\n]\n</code></pre>"},{"location":"config/build/#explicit-selection","title":"Explicit selection","text":""},{"location":"config/build/#generic","title":"Generic","text":"<p>You can use the <code>only-include</code> option to prevent directory traversal starting at the project root and only select specific relative paths to directories or files. Using this option ignores any defined <code>include</code> patterns.</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build.targets.sdist]\nonly-include = [\"pkg\", \"tests/unit\"]\n</code></pre> <pre><code>[build.targets.sdist]\nonly-include = [\"pkg\", \"tests/unit\"]\n</code></pre>"},{"location":"config/build/#packages","title":"Packages","text":"<p>The <code>packages</code> option is semantically equivalent to <code>only-include</code> (which takes precedence) except that the shipped path will be collapsed to only include the final component.</p> <p>So for example, if you want to ship a package <code>foo</code> that is stored in a directory <code>src</code> you would do:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build.targets.wheel]\npackages = [\"src/foo\"]\n</code></pre> <pre><code>[build.targets.wheel]\npackages = [\"src/foo\"]\n</code></pre>"},{"location":"config/build/#forced-inclusion","title":"Forced inclusion","text":"<p>The <code>force-include</code> option allows you to select specific files or directories from anywhere on the file system that should be included and map them to the desired relative distribution path.</p> <p>For example, if there was a directory alongside the project root named <code>artifacts</code> containing a file named <code>lib.so</code> and a file named <code>lib.h</code> in your home directory, you could ship both files in a <code>pkg</code> directory with the following configuration:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build.targets.wheel.force-include]\n\"../artifacts\" = \"pkg\"\n\"~/lib.h\" = \"pkg/lib.h\"\n</code></pre> <pre><code>[build.targets.wheel.force-include]\n\"../artifacts\" = \"pkg\"\n\"~/lib.h\" = \"pkg/lib.h\"\n</code></pre> <p>Note</p> <ul> <li>Files must be mapped exactly to their desired paths, not to directories.</li> <li>The contents of directory sources are recursively included.</li> <li>To map directory contents directly to the root use <code>/</code> (a forward slash).</li> <li>Sources that do not exist will raise an error.</li> </ul> <p>Warning</p> <p>Files included using this option will overwrite any file path that was already included by other file selection options.</p>"},{"location":"config/build/#default-file-selection","title":"Default file selection","text":"<p>If no file selection options are provided, then what gets included is determined by each build target.</p>"},{"location":"config/build/#excluding-files-outside-packages","title":"Excluding files outside packages","text":"<p>If you want to exclude non-artifact files that do not reside within a Python package, set <code>only-packages</code> to <code>true</code>:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build.targets.wheel]\nonly-packages = true\n</code></pre> <pre><code>[build.targets.wheel]\nonly-packages = true\n</code></pre>"},{"location":"config/build/#rewriting-paths","title":"Rewriting paths","text":"<p>You can rewrite relative paths to directories with the <code>sources</code> option. For example, the following configuration:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build.targets.wheel.sources]\n\"src/foo\" = \"bar\"\n</code></pre> <pre><code>[build.targets.wheel.sources]\n\"src/foo\" = \"bar\"\n</code></pre> <p>would distribute the file <code>src/foo/file.ext</code> as <code>bar/file.ext</code>.</p> <p>If you want to remove path prefixes entirely, rather than setting each to an empty string, you can define <code>sources</code> as an array:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build.targets.wheel]\nsources = [\"src\"]\n</code></pre> <pre><code>[build.targets.wheel]\nsources = [\"src\"]\n</code></pre> <p>If you want to add a prefix to paths, you can use an empty string. For example, the following configuration:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build.targets.wheel.sources]\n\"\" = \"foo\"\n</code></pre> <pre><code>[build.targets.wheel.sources]\n\"\" = \"foo\"\n</code></pre> <p>would distribute the file <code>bar/file.ext</code> as <code>foo/bar/file.ext</code>.</p> <p>The packages option itself relies on sources. Defining <code>packages = [\"src/foo\"]</code> for the <code>wheel</code> target is equivalent to the following:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build.targets.wheel]\nonly-include = [\"src/foo\"]\nsources = [\"src\"]\n</code></pre> <pre><code>[build.targets.wheel]\nonly-include = [\"src/foo\"]\nsources = [\"src\"]\n</code></pre>"},{"location":"config/build/#performance","title":"Performance","text":"<p>All encountered directories are traversed by default. To skip non-artifact directories that are excluded, set <code>skip-excluded-dirs</code> to <code>true</code>:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build]\nskip-excluded-dirs = true\n</code></pre> <pre><code>[build]\nskip-excluded-dirs = true\n</code></pre> <p>Warning</p> <p>This may result in not shipping desired files. For example, if you want to include the file <code>a/b/c.txt</code> but your VCS ignores <code>a/b</code>, the file <code>c.txt</code> will not be seen because its parent directory will not be entered. In such cases you can use the <code>force-include</code> option.</p>"},{"location":"config/build/#reproducible-builds","title":"Reproducible builds","text":"<p>By default, build targets will build in a reproducible manner provided that they support that behavior. To disable this, set <code>reproducible</code> to <code>false</code>:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build]\nreproducible = false\n</code></pre> <pre><code>[build]\nreproducible = false\n</code></pre> <p>When enabled, the SOURCE_DATE_EPOCH environment variable will be used for all build timestamps. If not set, then Hatch will use an unchanging default value.</p>"},{"location":"config/build/#output-directory","title":"Output directory","text":"<p>When the output directory is not provided to the <code>build</code> command, the <code>dist</code> directory will be used by default. You can change the default to a different directory using a relative or absolute path like so:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build]\ndirectory = \"&lt;PATH&gt;\"\n</code></pre> <pre><code>[build]\ndirectory = \"&lt;PATH&gt;\"\n</code></pre>"},{"location":"config/build/#dev-mode","title":"Dev mode","text":"<p>By default for dev mode environment installations or editable installs, the <code>wheel</code> target will determine which directories should be added to Python's search path based on the selected files.</p> <p>If you want to override this detection or perhaps instruct other build targets as well, you can use the <code>dev-mode-dirs</code> option:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build]\ndev-mode-dirs = [\".\"]\n</code></pre> <pre><code>[build]\ndev-mode-dirs = [\".\"]\n</code></pre> <p>If you don't want to add entire directories to Python's search path, you can enable a more targeted mechanism with the mutually exclusive <code>dev-mode-exact</code> option:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build]\ndev-mode-exact = true\n</code></pre> <pre><code>[build]\ndev-mode-exact = true\n</code></pre> <p>Warning</p> <p>The <code>dev-mode-exact</code> mechanism is not supported by static analysis tools &amp; IDEs, therefore functionality such as autocompletion is unlikely to work.</p>"},{"location":"config/build/#build-targets","title":"Build targets","text":"<p>A build target can be provided by any builder plugin. There are three built-in build targets: wheel, sdist, and custom.</p>"},{"location":"config/build/#target-dependencies","title":"Dependencies","text":"<p>You can specify additional dependencies that will be installed in each build environment, such as for third party builders:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build.targets.your-target-name]\ndependencies = [\n  \"your-builder-plugin\"\n]\n</code></pre> <pre><code>[build.targets.your-target-name]\ndependencies = [\n  \"your-builder-plugin\"\n]\n</code></pre> <p>You can also declare dependence on the project's runtime dependencies with the <code>require-runtime-dependencies</code> option:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build.targets.your-target-name]\nrequire-runtime-dependencies = true\n</code></pre> <pre><code>[build.targets.your-target-name]\nrequire-runtime-dependencies = true\n</code></pre> <p>Additionally, you may declare dependence on specific runtime features of the project with the <code>require-runtime-features</code> option:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build.targets.your-target-name]\nrequire-runtime-features = [\n  \"feature1\",\n  \"feature2\",\n]\n</code></pre> <pre><code>[build.targets.your-target-name]\nrequire-runtime-features = [\n  \"feature1\",\n  \"feature2\",\n]\n</code></pre>"},{"location":"config/build/#versions","title":"Versions","text":"<p>If a build target supports multiple build strategies or if there are major changes over time, you can specify exactly which versions you want to build using the <code>versions</code> option:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build.targets.&lt;TARGET_NAME&gt;]\nversions = [\n  \"v1\",\n  \"beta-feature\",\n]\n</code></pre> <pre><code>[build.targets.&lt;TARGET_NAME&gt;]\nversions = [\n  \"v1\",\n  \"beta-feature\",\n]\n</code></pre> <p>See the wheel target for a real world example.</p>"},{"location":"config/build/#build-hooks","title":"Build hooks","text":"<p>A build hook defines code that will be executed at various stages of the build process and can be provided by any build hook plugin. There is one built-in build hook: custom.</p> <p>Build hooks can be applied either globally:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build.hooks.&lt;HOOK_NAME&gt;]\n</code></pre> <pre><code>[build.hooks.&lt;HOOK_NAME&gt;]\n</code></pre> <p>or to specific build targets:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build.targets.&lt;TARGET_NAME&gt;.hooks.&lt;HOOK_NAME&gt;]\n</code></pre> <pre><code>[build.targets.&lt;TARGET_NAME&gt;.hooks.&lt;HOOK_NAME&gt;]\n</code></pre>"},{"location":"config/build/#hook-dependencies","title":"Dependencies","text":"<p>You can specify additional dependencies that will be installed in each build environment, such as for third party build hooks:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build.hooks.your-hook-name]\ndependencies = [\n  \"your-build-hook-plugin\"\n]\n</code></pre> <pre><code>[build.hooks.your-hook-name]\ndependencies = [\n  \"your-build-hook-plugin\"\n]\n</code></pre> <p>You can also declare dependence on the project's runtime dependencies with the <code>require-runtime-dependencies</code> option:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build.hooks.your-hook-name]\nrequire-runtime-dependencies = true\n</code></pre> <pre><code>[build.hooks.your-hook-name]\nrequire-runtime-dependencies = true\n</code></pre> <p>Additionally, you may declare dependence on specific runtime features of the project with the <code>require-runtime-features</code> option:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build.hooks.your-hook-name]\nrequire-runtime-features = [\n  \"feature1\",\n  \"feature2\",\n]\n</code></pre> <pre><code>[build.hooks.your-hook-name]\nrequire-runtime-features = [\n  \"feature1\",\n  \"feature2\",\n]\n</code></pre>"},{"location":"config/build/#order-of-execution","title":"Order of execution","text":"<p>For each build target, build hooks execute in the order in which they are defined, starting with global hooks.</p> <p>As an example, for the following configuration:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build.targets.foo.hooks.hook2]\n\n[tool.hatch.build.hooks.hook3]\n[tool.hatch.build.hooks.hook1]\n</code></pre> <pre><code>[build.targets.foo.hooks.hook2]\n\n[build.hooks.hook3]\n[build.hooks.hook1]\n</code></pre> <p>When target <code>foo</code> is built, build hook <code>hook3</code> will be executed first, followed by <code>hook1</code>, and then finally <code>hook2</code>.</p>"},{"location":"config/build/#conditional-execution","title":"Conditional execution","text":"<p>If you want to disable a build hook by default and control its use by environment variables, you can do so by setting the <code>enable-by-default</code> option to <code>false</code>:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build.hooks.&lt;HOOK_NAME&gt;]\nenable-by-default = false\n</code></pre> <pre><code>[build.hooks.&lt;HOOK_NAME&gt;]\nenable-by-default = false\n</code></pre>"},{"location":"config/build/#environment-variables","title":"Environment variables","text":"Variable Default Description <code>HATCH_BUILD_CLEAN</code> <code>false</code> Whether or not existing artifacts should first be removed <code>HATCH_BUILD_CLEAN_HOOKS_AFTER</code> <code>false</code> Whether or not build hook artifacts should be removed after each build <code>HATCH_BUILD_HOOKS_ONLY</code> <code>false</code> Whether or not to only execute build hooks <code>HATCH_BUILD_NO_HOOKS</code> <code>false</code> Whether or not to disable all build hooks; this takes precedence over other options <code>HATCH_BUILD_HOOKS_ENABLE</code> <code>false</code> Whether or not to enable all build hooks <code>HATCH_BUILD_HOOK_ENABLE_&lt;HOOK_NAME&gt;</code> <code>false</code> Whether or not to enable the build hook named <code>&lt;HOOK_NAME&gt;</code> <code>HATCH_BUILD_LOCATION</code> <code>dist</code> The location with which to build the targets; only used by the <code>build</code> command <ol> <li> <p>Support for PEP 517 and PEP 660 guarantees interoperability with other build tools.\u00a0\u21a9</p> </li> </ol>"},{"location":"config/context/","title":"Context formatting","text":"<p>You can populate configuration with the values of certain supported fields using the syntax of Python's format strings. Each field interprets the modifier part after the colon differently, if at all.</p>"},{"location":"config/context/#global-fields","title":"Global fields","text":"<p>Any configuration that declares support for context formatting will always support these fields.</p>"},{"location":"config/context/#paths","title":"Paths","text":"Field Description <code>root</code> The root project directory <code>home</code> The user's home directory <p>All paths support the following modifiers:</p> Modifier Description <code>uri</code> The normalized absolute URI path prefixed by <code>file:</code> <code>real</code> The path with all symbolic links resolved <code>parent</code> The parent of the preceding path <p>Tip</p> <p>The <code>parent</code> modifier can be chained and may be combined with either the <code>uri</code> or <code>real</code> modifier, with the latter placed at the end. For example:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.test]\ndependencies = [\n    \"example-project @ {root:parent:parent:uri}/example-project\",\n]\n</code></pre> <pre><code>[envs.test]\ndependencies = [\n    \"example-project @ {root:parent:parent:uri}/example-project\",\n]\n</code></pre>"},{"location":"config/context/#system-separators","title":"System separators","text":"Field Description <code>/</code> <code>\\</code> on Windows, <code>/</code> otherwise <code>;</code> <code>;</code> on Windows, <code>:</code> otherwise"},{"location":"config/context/#environment-variables","title":"Environment variables","text":"<p>The <code>env</code> field and its modifier allow you to select the value of an environment variable. If the environment variable is not set, you must specify a default value as an additional modifier e.g. <code>{env:PATH:DEFAULT}</code>.</p>"},{"location":"config/context/#field-nesting","title":"Field nesting","text":"<p>You can insert fields within others. For example, if you wanted a script that displays the value of the environment variable <code>FOO</code>, with a fallback to the environment variable <code>BAR</code>, with its own fallback to the user's home directory, you could do the following:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.test.scripts]\ndisplay = \"echo {env:FOO:{env:BAR:{home}}}\"\n</code></pre> <pre><code>[envs.test.scripts]\ndisplay = \"echo {env:FOO:{env:BAR:{home}}}\"\n</code></pre>"},{"location":"config/dependency/","title":"Dependency configuration","text":"<p>Project dependencies are defined with PEP 508 strings using optional PEP 440 version specifiers.</p>"},{"location":"config/dependency/#version-specifiers","title":"Version specifiers","text":"<p>A version specifier consists of a series of version clauses, separated by commas. For example:</p>  pyproject.toml <pre><code>[project]\n...\ndependencies = [\n  \"cryptography\",\n  \"click&gt;=7, &lt;9, != 8.0.0\",\n  \"python-dateutil==2.8.*\",\n  \"numpy~=1.21.4\",\n]\n</code></pre> <p>The comma is equivalent to a logical <code>AND</code> operator: a candidate version must match all given version clauses in order to match the specifier as a whole.</p>"},{"location":"config/dependency/#operators","title":"Operators","text":"Operators Function <code>~=</code> Compatible release <code>==</code> Version matching <code>!=</code> Version exclusion <code>&lt;=</code>, <code>&gt;=</code> Inclusive ordered comparison <code>&lt;</code>, <code>&gt;</code> Exclusive ordered comparison <code>===</code> Arbitrary equality"},{"location":"config/dependency/#version-matching","title":"Version matching","text":"<p>A version matching clause includes the version matching operator <code>==</code> and a version identifier.</p> <p>By default, the version matching operator is based on a strict equality comparison: the specified version must be exactly the same as the requested version.</p> Clause Allowed versions <code>==1</code> <code>1.0.0</code> <code>==1.2</code> <code>1.2.0</code> <p>Prefix matching may be requested instead of strict comparison, by appending a trailing <code>.*</code> to the version identifier in the version matching clause. This means that additional trailing segments will be ignored when determining whether or not a version identifier matches the clause.</p> Clause Allowed versions <code>==1.*</code> <code>&gt;=1.0.0, &lt;2.0.0</code> <code>==1.2.*</code> <code>&gt;=1.2.0, &lt;1.3.0</code>"},{"location":"config/dependency/#compatible-release","title":"Compatible release","text":"<p>A compatible release clause consists of the compatible release operator <code>~=</code> and a version identifier. It matches any candidate version that is expected to be compatible with the specified version.</p> <p>For a given release identifier <code>V.N</code>, the compatible release clause is approximately equivalent to the following pair of comparison clauses:</p> <pre><code>&gt;= V.N, == V.*\n</code></pre> <p>This operator cannot be used with a single segment version number such as <code>~=1</code>.</p> Clause Allowed versions <code>~=1.2</code> <code>&gt;=1.2.0, &lt;2.0.0</code> <code>~=1.2.3</code> <code>&gt;=1.2.3, &lt;1.3.0</code>"},{"location":"config/dependency/#version-exclusion","title":"Version exclusion","text":"<p>A version exclusion clause includes the version exclusion operator <code>!=</code> and a version identifier.</p> <p>The allowed version identifiers and comparison semantics are the same as those of the Version matching operator, except that the sense of any match is inverted.</p>"},{"location":"config/dependency/#ordered-comparison","title":"Ordered comparison","text":"<p>Inclusive comparisons allow for the version identifier part of clauses whereas exclusive comparisons do not. For example, <code>&gt;=1.2</code> allows for version <code>1.2.0</code> while <code>&gt;1.2</code> does not.</p> <p>Unlike the inclusive ordered comparisons <code>&lt;=</code> and <code>&gt;=</code>, the exclusive ordered comparisons <code>&lt;</code> and <code>&gt;</code> specifically exclude pre-releases, post-releases, and local versions of the specified version.</p>"},{"location":"config/dependency/#arbitrary-equality","title":"Arbitrary equality","text":"<p>Though heavily discouraged, arbitrary equality comparisons allow for simple string matching without any version semantics, for example <code>===foobar</code>.</p>"},{"location":"config/dependency/#environment-markers","title":"Environment markers","text":"<p>Environment markers allow for dependencies to only be installed when certain conditions are met.</p> <p>For example, if you need to install the latest version of <code>cryptography</code> that is available for a given Python major version you could define the following:</p> <pre><code>cryptography==3.3.2; python_version &lt; \"3\"\ncryptography&gt;=35.0; python_version &gt; \"3\"\n</code></pre> <p>Alternatively, if you only need it on Python 3 when running on Windows you could do:</p> <pre><code>cryptography; python_version ~= \"3.0\" and platform_system == \"Windows\"\n</code></pre> <p>The available environment markers are as follows.</p> Marker Python equivalent Examples <code>os_name</code> <code>import os</code><code>os.name</code> <ul><li>posix</li><li>java</li></ul> <code>sys_platform</code> <code>import sys</code><code>sys.platform</code> <ul><li>linux</li><li>win32</li><li>darwin</li></ul> <code>platform_machine</code> <code>import platform</code><code>platform.machine()</code> <ul><li>x86_64</li></ul> <code>platform_python_implementation</code> <code>import platform</code><code>platform.python_implementation()</code> <ul><li>CPython</li><li>Jython</li></ul> <code>platform_release</code> <code>import platform</code><code>platform.release()</code> <ul><li>1.8.0_51</li><li>3.14.1-x86_64-linode39</li></ul> <code>platform_system</code> <code>import platform</code><code>platform.system()</code> <ul><li>Linux</li><li>Windows</li><li>Darwin</li></ul> <code>platform_version</code> <code>import platform</code><code>platform.version()</code> <ul><li>10.0.19041</li><li>#1 SMP Fri Apr 2 22:23:49 UTC 2021</li></ul> <code>python_version</code> <code>import platform</code><code>'.'.join(platform.python_version_tuple()[:2])</code> <ul><li>2.7</li><li>3.10</li></ul> <code>python_full_version</code> <code>import platform</code><code>platform.python_version()</code> <ul><li>2.7.18</li><li>3.11.0b1</li></ul> <code>implementation_name</code> <code>import sys</code><code>sys.implementation.name</code> <ul><li>cpython</li></ul> <code>implementation_version</code> See here <ul><li>2.7.18</li><li>3.11.0b1</li></ul>"},{"location":"config/dependency/#features","title":"Features","text":"<p>You can select groups of optional dependencies to install using the extras syntax. For example, if a dependency named <code>foo</code> defined the following:</p>  pyproject.toml <pre><code>[project.optional-dependencies]\ncrypto = [\n  \"PyJWT\",\n  \"cryptography\",\n]\nfastjson = [\n  \"orjson\",\n]\ncli = [\n  \"prompt-toolkit\",\n  \"colorama; platform_system == 'Windows'\",\n]\n</code></pre> <p>You can select the <code>cli</code> and <code>crypto</code> features like so:</p> <pre><code>foo[cli,crypto]==1.*\n</code></pre> <p>Note that the features come immediately after the package name, before any version specifiers.</p>"},{"location":"config/dependency/#self-referential","title":"Self-referential","text":"<p>Feature groups can self-referentially extend others. For example, for a project called <code>awesome-project</code>, the <code>dev</code> feature group in the following <code>pyproject.toml</code> file would select everything in the <code>crypto</code> feature group, plus <code>black</code>:</p>  pyproject.toml <pre><code>[project]\nname = \"awesome-project\"\n\n[project.optional-dependencies]\ncrypto = [\n  \"PyJWT\",\n  \"cryptography\",\n]\ndev = [\n  \"awesome-project[crypto]\",\n  \"black\",\n]\n</code></pre>"},{"location":"config/dependency/#direct-references","title":"Direct references","text":"<p>Instead of using normal version specifiers and fetching packages from an index like PyPI, you can define exact sources using direct references with an explicit URI.</p> <p>Direct references are usually not meant to be used for dependencies of a published project but rather are used for defining dependencies for an environment.</p> <p>All direct reference types are prefixed by the package name like:</p> <pre><code>&lt;NAME&gt; @ &lt;REFERENCE&gt;\n</code></pre>"},{"location":"config/dependency/#version-control-systems","title":"Version control systems","text":"<p>Various version control systems (VCS) are supported as long as the associated executable is available along your <code>PATH</code>.</p> <p>VCS direct references are defined using one of the following formats:</p> <pre><code>&lt;NAME&gt; @ &lt;SCHEME&gt;://&lt;PATH&gt;\n&lt;NAME&gt; @ &lt;SCHEME&gt;://&lt;PATH&gt;@&lt;REVISION&gt;\n</code></pre> <p>You may also append a <code>#subdirectory=&lt;PATH&gt;</code> component for specifying the relative path to the Python package when it is not located at the root e.g. <code>#subdirectory=lib/foo</code>.</p> <p>For more information, refer to this.</p>"},{"location":"config/dependency/#supported-vcs","title":"Supported VCS","text":"GitMercurialSubversionBazaar Executable Schemes Revisions Example <code>git</code> <ul><li><code>git+file</code></li><li><code>git+https</code></li><li><code>git+ssh</code></li><li><code>git+http</code> </li><li><code>git+git</code> </li><li><code>git</code> </li></ul> <ul><li>Commit hash</li><li>Tag name</li><li>Branch name</li></ul> <code>proj @ git+https://github.com/org/proj.git@v1</code> Executable Schemes Revisions Example <code>hg</code> <ul><li><code>hg+file</code></li><li><code>hg+https</code></li><li><code>hg+ssh</code></li><li><code>hg+http</code> </li><li><code>hg+static-http</code> </li></ul> <ul><li>Revision hash</li><li>Revision number</li><li>Tag name</li><li>Branch name</li></ul> <code>proj @ hg+file:///path/to/proj@v1</code> Executable Schemes Revisions Example <code>svn</code> <ul><li><code>svn+https</code></li><li><code>svn+ssh</code></li><li><code>svn+http</code> </li><li><code>svn+svn</code> </li><li><code>svn</code> </li></ul> <ul><li>Revision number</li></ul> <code>proj @ svn+file:///path/to/proj</code> Executable Schemes Revisions Example <code>bzr</code> <ul><li><code>bzr+https</code></li><li><code>bzr+ssh</code></li><li><code>bzr+sftp</code></li><li><code>bzr+lp</code></li><li><code>bzr+http</code> </li><li><code>bzr+ftp</code> </li></ul> <ul><li>Revision number</li><li>Tag name</li></ul> <code>proj @ bzr+lp:proj@v1</code>"},{"location":"config/dependency/#local","title":"Local","text":"<p>You can install local packages with the <code>file</code> scheme in the following format:</p> <pre><code>&lt;NAME&gt; @ file://&lt;HOST&gt;/&lt;PATH&gt;\n</code></pre> <p>The <code>&lt;HOST&gt;</code> is only used on Windows systems, where it can refer to a network share. If omitted it is assumed to be <code>localhost</code> and the third slash must still be present.</p> <p>The <code>&lt;PATH&gt;</code> can refer to a source archive, a wheel, or a directory containing a Python package.</p> Type Unix Windows Source archive <code>proj @ file:///path/to/pkg.tar.gz</code> <code>proj @ file:///c:/path/to/pkg.tar.gz</code> Wheel <code>proj @ file:///path/to/pkg.whl</code> <code>proj @ file:///c:/path/to/pkg.whl</code> Directory <code>proj @ file:///path/to/pkg</code> <code>proj @ file:///c:/path/to/pkg</code> <p>Tip</p> <p>You may also specify paths relative to your project's root directory on all platforms by using context formatting:</p> <pre><code>&lt;NAME&gt; @ {root:uri}/pkg_inside_project\n&lt;NAME&gt; @ {root:parent:uri}/pkg_alongside_project\n</code></pre>"},{"location":"config/dependency/#remote","title":"Remote","text":"<p>You can install source archives and wheels by simply referring to a URL:</p> <pre><code>black @ https://github.com/psf/black/archive/refs/tags/21.10b0.zip\npytorch @ https://download.pytorch.org/whl/cu102/torch-1.10.0%2Bcu102-cp39-cp39-linux_x86_64.whl\n</code></pre> <p>An expected hash value may be specified by appending a <code>#&lt;HASH_ALGORITHM&gt;=&lt;EXPECTED_HASH&gt;</code> component:</p> <pre><code>requests @ https://github.com/psf/requests/archive/refs/tags/v2.26.0.zip#sha256=eb729a757f01c10546ebd179ae2aec852dd0d7f8ada2328ccf4558909d859985\n</code></pre> <p>If the hash differs from the expected hash, the installation will fail.</p> <p>It is recommended that only hashes which are unconditionally provided by the latest version of the standard library's hashlib module be used for hashes. As of Python 3.10, that list consists of:</p> <ul> <li><code>md5</code></li> <li><code>sha1</code></li> <li><code>sha224</code></li> <li><code>sha256</code></li> <li><code>sha384</code></li> <li><code>sha512</code></li> <li><code>blake2b</code></li> <li><code>blake2s</code></li> </ul>"},{"location":"config/dependency/#complex-syntax","title":"Complex syntax","text":"<p>The following is an example that uses features and environment markers:</p> <pre><code>pkg[feature1,feature2] @ &lt;REFERENCE&gt; ; python_version &lt; \"3.7\"\n</code></pre> <p>Note that the space before the semicolon is required.</p>"},{"location":"config/hatch/","title":"Hatch configuration","text":"<p>Configuration for Hatch itself is stored in a <code>config.toml</code> file located by default in one of the following platform-specific directories.</p> Platform Path macOS <code>~/Library/Application Support/hatch</code> Windows <code>%USERPROFILE%\\AppData\\Local\\hatch</code> Unix <code>$XDG_CONFIG_HOME/hatch</code> (the XDG_CONFIG_HOME environment variable default is <code>~/.config</code>) <p>You can select a custom path to the file using the <code>--config</code> root option or by setting the <code>HATCH_CONFIG</code> environment variable.</p> <p>The file can be managed by the <code>config</code> command group.</p>"},{"location":"config/hatch/#mode","title":"Mode","text":"<p>The <code>mode</code> key controls how Hatch selects the project to work on.</p>"},{"location":"config/hatch/#local","title":"Local","text":"config.toml <pre><code>mode = \"local\"\n</code></pre> <p>By default, Hatch will look for a <code>pyproject.toml</code> file in the current working directory and any parent directories. The directory storing the first found file will be considered the project root.</p>"},{"location":"config/hatch/#project","title":"Project","text":"config.toml <pre><code>mode = \"project\"\nproject = \"proj1\"\n\n[projects]\nproj1 = \"/path/to/project1\"\nproj2 = {\"location\": \"/path/to/project2\"}\n\n[dirs]\nproject = [\"/path/to/monorepo1\", \"/path/to/monorepo2\"]\n</code></pre> <p>In this mode, Hatch will only work on the selected <code>project</code>. The project is located using multiple heuristics:</p> <ol> <li>If the project is defined in the <code>projects</code> table then it must be a string, or an inline table with a <code>location</code> key, that is the full path to the project.</li> <li>If the project matches a subdirectory in any of the directories listed in <code>dirs.project</code>, then that will be used as the project root.</li> </ol> <p>An error will occur if the project cannot be found.</p> <p>You can use the <code>config set</code> command to change the project you are working on:</p> <pre><code>$ hatch config set project proj2\nNew setting:\nproject = \"proj2\"\n</code></pre> <p>The project can be selected on a per-command basis with the <code>-p</code>/<code>--project</code> (environment variable <code>HATCH_PROJECT</code>) root option.</p>"},{"location":"config/hatch/#aware","title":"Aware","text":"config.toml <pre><code>mode = \"aware\"\n</code></pre> <p>This is essentially the <code>local</code> mode with a fallback to the <code>project</code> mode.</p>"},{"location":"config/hatch/#shell","title":"Shell","text":"<p>You can control the shell used to enter environments with the <code>shell</code> key.</p> <p>If defined as a string, it must be the name of one of the supported shells and be available along your <code>PATH</code>.</p>  config.toml <pre><code>shell = \"fish\"\n</code></pre> <p>If the executable name of your shell differs from the supported name, you can define the <code>shell</code> as a table with <code>name</code> and <code>path</code> keys.</p>  config.toml <pre><code>[shell]\nname = \"bash\"\npath = \"/bin/ash\"\n</code></pre> <p>You can change the default arguments used to spawn most shells with the <code>args</code> key. The default for such supported shells is usually <code>[\"-i\"]</code>.</p>  config.toml <pre><code>[shell]\nname = \"bash\"\nargs = [\"--login\"]\n</code></pre>"},{"location":"config/hatch/#supported","title":"Supported","text":"Shell Name Arguments macOS Windows Unix Almquist shell <code>ash</code> <code>[\"-i\"]</code> Bash <code>bash</code> <code>[\"-i\"]</code> Command Prompt <code>cmd</code> C shell <code>csh</code> <code>[\"-i\"]</code> fish <code>fish</code> <code>[\"-i\"]</code> Nushell <code>nu</code> <code>[]</code> PowerShell <code>pwsh</code>, <code>powershell</code> tcsh <code>tcsh</code> <code>[\"-i\"]</code> xonsh <code>xonsh</code> <code>[\"-i\"]</code> Z shell <code>zsh</code> <code>[\"-i\"]</code>"},{"location":"config/hatch/#default","title":"Default","text":"<p>Hatch will attempt to use the current shell based on parent processes. If the shell cannot be determined, then on Windows systems Hatch will use the <code>SHELL</code> environment variable, if present, followed by the <code>COMSPEC</code> environment variable, defaulting to <code>cmd</code>. On all other platforms only the <code>SHELL</code> environment variable will be used, defaulting to <code>bash</code>.</p>"},{"location":"config/hatch/#directories","title":"Directories","text":""},{"location":"config/hatch/#data","title":"Data","text":"config.toml <pre><code>[dirs]\ndata = \"...\"\n</code></pre> <p>This is the directory that is used to persist data. By default it is set to one of the following platform-specific directories.</p> Platform Path macOS <code>~/Library/Application Support/hatch</code> Windows <code>%USERPROFILE%\\AppData\\Local\\hatch</code> Unix <code>$XDG_DATA_HOME/hatch</code> (the XDG_DATA_HOME environment variable default is <code>~/.local/share</code>) <p>You can select a custom path to the directory using the <code>--data-dir</code> root option or by setting the <code>HATCH_DATA_DIR</code> environment variable.</p>"},{"location":"config/hatch/#cache","title":"Cache","text":"config.toml <pre><code>[dirs]\ncache = \"...\"\n</code></pre> <p>This is the directory that is used to cache data. By default it is set to one of the following platform-specific directories.</p> Platform Path macOS <code>~/Library/Caches/hatch</code> Windows <code>%USERPROFILE%\\AppData\\Local\\hatch\\Cache</code> Unix <code>$XDG_CACHE_HOME/hatch</code> (the XDG_CACHE_HOME environment variable default is <code>~/.cache</code>) <p>You can select a custom path to the directory using the <code>--cache-dir</code> root option or by setting the <code>HATCH_CACHE_DIR</code> environment variable.</p>"},{"location":"config/hatch/#environments","title":"Environments","text":"config.toml <pre><code>[dirs.env]\n&lt;ENV_TYPE&gt; = \"...\"\n</code></pre> <p>This determines where to store environments, with every key being the type of environment and the value being the desired storage location.</p> <p>For example, if you wanted to store virtual environments in a <code>.virtualenvs</code> directory within your home directory, you could specify the following:</p>  config.toml <pre><code>[dirs.env]\nvirtual = \"~/.virtualenvs\"\n</code></pre> <p>Any environment variables are also expanded.</p> <p>If the path is not absolute, then it will be relative to the project root. So if you wanted to use a directory named <code>.hatch</code> in each project directory, you could do:</p>  config.toml <pre><code>[dirs.env]\nvirtual = \".hatch\"\n</code></pre> <p>Any type of environment that is not explicitly defined will default to <code>&lt;DATA_DIR&gt;/env/&lt;ENV_TYPE&gt;</code>.</p>"},{"location":"config/hatch/#python-installations","title":"Python installations","text":"config.toml <pre><code>[dirs]\npython = \"...\"\n</code></pre> <p>This determines where to install specific versions of Python.</p> <p>The following values have special meanings:</p> Value Path <code>isolated</code> (default) <code>&lt;DATA_DIR&gt;/pythons</code>"},{"location":"config/hatch/#terminal","title":"Terminal","text":"<p>You can configure how all output is displayed using the <code>terminal.styles</code> table. These settings are also applied to all plugins.</p>  config.toml <pre><code>[terminal.styles]\nerror = \"...\"\n...\n</code></pre> <p>Cross-platform terminal capabilities are provided by Rich.</p>"},{"location":"config/hatch/#output-levels","title":"Output levels","text":"<p>The levels of output are as follows. Note that the verbosity indicates the minimum level at which the output is displayed.</p> Level Default Verbosity Description <code>debug</code> <code>bold</code> 1 - 3 Messages that are not useful for most user experiences <code>error</code> <code>bold red</code> -2 Messages indicating some unrecoverable error <code>info</code> <code>bold</code> 0 Messages conveying basic information <code>success</code> <code>bold cyan</code> 0 Messages indicating some positive outcome <code>waiting</code> <code>bold magenta</code> 0 Messages shown before potentially time consuming operations <code>warning</code> <code>bold yellow</code> -1 Messages conveying important information <p>See the documentation and color reference for guidance on valid values.</p>"},{"location":"config/hatch/#spinner","title":"Spinner","text":"<p>You can select the sequence used for waiting animations with the <code>spinner</code> option.</p>  config.toml <pre><code>[terminal.styles]\nspinner = \"...\"\n</code></pre>"},{"location":"config/metadata/","title":"Configuring project metadata","text":"<p>Project metadata is stored in a <code>pyproject.toml</code> file located at the root of a project's tree and is based entirely on the standard.</p>"},{"location":"config/metadata/#name","title":"Name (required)","text":"<p>The name of the project.</p>  pyproject.toml <pre><code>[project]\nname = \"your-app\"\n</code></pre>"},{"location":"config/metadata/#version","title":"Version (required)","text":"pyproject.toml DynamicStatic <p>See the dedicated versioning section.</p> <pre><code>[project]\n...\ndynamic = [\"version\"]\n\n[tool.hatch.version]\npath = \"...\"\n</code></pre> <pre><code>[project]\n...\nversion = \"0.0.1\"\n</code></pre>"},{"location":"config/metadata/#description","title":"Description","text":"<p>A brief summary of the project.</p>  pyproject.toml <pre><code>[project]\n...\ndescription = '...'\n</code></pre>"},{"location":"config/metadata/#readme","title":"Readme","text":"<p>The full description of the project.</p>  pyproject.toml SimpleComplex <p>The file extension must be <code>.md</code>, <code>.rst</code>, or <code>.txt</code>.</p> <pre><code>[project]\n...\nreadme = \"README.md\"\n</code></pre> <p>The <code>content-type</code> field must be set to <code>text/markdown</code>, <code>text/x-rst</code>, or <code>text/plain</code>.</p> FileText <p>A <code>charset</code> field may also be set to instruct which encoding to use for reading the file, defaulting to <code>utf-8</code>.</p> <pre><code>[project]\n...\nreadme = {\"file\" = \"README.md\", \"content-type\" = \"text/markdown\"}\n</code></pre> <p>The <code>content-type</code> field must be set to <code>text/markdown</code> or <code>text/x-rst</code>.</p> <pre><code>[project]\n...\nreadme = {\"text\" = \"...\", \"content-type\" = \"text/markdown\"}\n</code></pre> <p>Note</p> <p>If this is defined as a file, then it will always be included in source distributions for consistent builds.</p>"},{"location":"config/metadata/#python-support","title":"Python support","text":"<p>The Python version requirements of the project.</p>  pyproject.toml <pre><code>[project]\n...\nrequires-python = \"&gt;=3.8\"\n</code></pre>"},{"location":"config/metadata/#license","title":"License","text":"<p>For more information, see PEP 639.</p>  pyproject.toml SPDX expressionFiles <pre><code>[project]\n...\nlicense = \"Apache-2.0 OR MIT\"\n</code></pre> <pre><code>[project]\n...\nlicense-files = [\"LICENSES/*\"]\n</code></pre>"},{"location":"config/metadata/#ownership","title":"Ownership","text":"<p>The people or organizations considered to be the <code>authors</code> or <code>maintainers</code> of the project. The exact meaning is open to interpretation; it may list the original or primary authors, current maintainers, or owners of the package. If the values are the same, prefer only the use of the <code>authors</code> field.</p>  pyproject.toml <pre><code>[project]\n...\nauthors = [\n  { name = \"...\", email = \"...\" },\n]\nmaintainers = [\n  { name = \"...\", email = \"...\" },\n]\n</code></pre>"},{"location":"config/metadata/#keywords","title":"Keywords","text":"<p>The keywords used to assist in the discovery of the project.</p>  pyproject.toml <pre><code>[project]\n...\nkeywords = [\n  \"...\",\n]\n</code></pre>"},{"location":"config/metadata/#classifiers","title":"Classifiers","text":"<p>The trove classifiers that apply to the project.</p>  pyproject.toml <pre><code>[project]\n...\nclassifiers = [\n  \"...\",\n]\n</code></pre>"},{"location":"config/metadata/#urls","title":"URLs","text":"<p>A table of URLs where the key is the URL label and the value is the URL itself.</p>  pyproject.toml <pre><code>[project.urls]\nDocumentation = \"...\"\n\"Source code\" = \"...\"\n</code></pre>"},{"location":"config/metadata/#dependencies","title":"Dependencies","text":"<p>See the dependency specification page for more information.</p> <p>Entries support context formatting and disallow direct references by default.</p>"},{"location":"config/metadata/#required","title":"Required","text":"pyproject.toml <pre><code>[project]\n...\ndependencies = [\n  \"...\",\n]\n</code></pre>"},{"location":"config/metadata/#optional","title":"Optional","text":"pyproject.toml <pre><code>[project.optional-dependencies]\noption1 = [\n  \"...\",\n]\noption2 = [\n  \"...\",\n]\n</code></pre>"},{"location":"config/metadata/#entry-points","title":"Entry points","text":"<p>Entry points are a mechanism for the project to advertise components it provides to be discovered and used by other code.</p>"},{"location":"config/metadata/#cli","title":"CLI","text":"<p>After installing projects that define CLI scripts, each key will be available along your <code>PATH</code> as a command that will call its associated object.</p>  pyproject.toml <pre><code>[project.scripts]\ncli-name = \"pkg.subpkg:func\"\n</code></pre> <p>Using the above example, running <code>cli-name</code> would essentially execute the following Python script:</p> <pre><code>import sys\n\nfrom pkg.subpkg import func\n\nsys.exit(func())\n</code></pre>"},{"location":"config/metadata/#gui","title":"GUI","text":"<p>GUI scripts are exactly the same as CLI scripts except on Windows, where they are handled specially so that they can be started without a console.</p>  pyproject.toml <pre><code>[project.gui-scripts]\ngui-name = \"pkg.subpkg:func\"\n</code></pre>"},{"location":"config/metadata/#plugins","title":"Plugins","text":"pyproject.toml <pre><code>[project.entry-points.plugin-namespace]\nplugin-name1 = \"pkg.subpkg1\"\nplugin-name2 = \"pkg.subpkg2:func\"\n</code></pre>"},{"location":"config/metadata/#dynamic","title":"Dynamic","text":"<p>If any metadata fields are set dynamically, like the <code>version</code> may be, then they must be listed here.</p>  pyproject.toml <pre><code>[project]\n...\ndynamic = [\n  \"...\",\n]\n</code></pre>"},{"location":"config/metadata/#metadata-options","title":"Metadata options","text":""},{"location":"config/metadata/#allowing-direct-references","title":"Allowing direct references","text":"<p>By default, dependencies are not allowed to define direct references. To disable this check, set <code>allow-direct-references</code> to <code>true</code>:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.metadata]\nallow-direct-references = true\n</code></pre> <pre><code>[metadata]\nallow-direct-references = true\n</code></pre>"},{"location":"config/metadata/#allowing-ambiguous-features","title":"Allowing ambiguous features","text":"<p>By default, names of optional dependencies are normalized to prevent ambiguity. To disable this normalization, set <code>allow-ambiguous-features</code> to <code>true</code>:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.metadata]\nallow-ambiguous-features = true\n</code></pre> <pre><code>[metadata]\nallow-ambiguous-features = true\n</code></pre> <p>Deprecated</p> <p>This option temporarily exists to provide better interoperability with tools that do not yet support PEP 685 and will be removed in the first minor release after Jan 1, 2024.</p>"},{"location":"config/project-templates/","title":"Project templates","text":"<p>You can control how new projects are created by the new command using Hatch's config file.</p>"},{"location":"config/project-templates/#author","title":"Author","text":"config.toml <pre><code>[template]\nname = \"...\"\nemail = \"...\"\n</code></pre>"},{"location":"config/project-templates/#licenses","title":"Licenses","text":"config.toml <pre><code>[template.licenses]\nheaders = true\ndefault = [\n  \"MIT\",\n]\n</code></pre> <p>The list of licenses should be composed of SPDX identifiers. If multiple licenses are specified, then they will be placed in a LICENSES directory.</p>"},{"location":"config/project-templates/#options","title":"Options","text":""},{"location":"config/project-templates/#tests","title":"Tests","text":"<p>This adds a <code>tests</code> directory with environments for testing and linting.</p>  config.toml <pre><code>[template.plugins.default]\ntests = true\n</code></pre>"},{"location":"config/project-templates/#ci","title":"CI","text":"<p>This adds a GitHub Actions workflow that runs tests on all platforms using modern versions of Python.</p>  config.toml <pre><code>[template.plugins.default]\nci = false\n</code></pre>"},{"location":"config/project-templates/#src-layout","title":"<code>src</code> layout","text":"<p>See this blog post.</p>  config.toml <pre><code>[template.plugins.default]\nsrc-layout = true\n</code></pre>"},{"location":"config/project-templates/#feature-flags","title":"Feature flags","text":""},{"location":"config/project-templates/#command-line-interface","title":"Command line interface","text":"<p>The <code>--cli</code> flag adds a CLI backed by Click that can also be invoked with <code>python -m &lt;PKG_NAME&gt;</code>.</p>"},{"location":"config/environment/advanced/","title":"Advanced environment configuration","text":""},{"location":"config/environment/advanced/#context-formatting","title":"Context formatting","text":"<p>All environments support the following extra context formatting fields:</p> Field Description <code>env_name</code> The name of the environment <code>env_type</code> The type of environment <code>matrix</code> Its modifier selects the value of that matrix variable. If the environment is not part of a matrix or was not generated with the variable, you must specify a default value as an additional modifier e.g. <code>{matrix:version:v1.0.0}</code>. <code>verbosity</code> The integer verbosity value of Hatch. A <code>flag</code> modifier is supported that will render the value as a CLI flag e.g. <code>-2</code> becomes <code>-qq</code>, <code>1</code> becomes <code>-v</code>, and <code>0</code> becomes an empty string. An additional flag integer modifier may be used to adjust the verbosity level. For example, if you wanted to make a command quiet by default, you could use <code>{verbosity:flag:-1}</code> within the command. <code>args</code> For executed commands only, any extra command line arguments with an optional default modifier if none were provided"},{"location":"config/environment/advanced/#matrix","title":"Matrix","text":"<p>Environments can define a series of matrices with the <code>matrix</code> option:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.test]\ndependencies = [\n  \"pytest\"\n]\n\n[[tool.hatch.envs.test.matrix]]\npython = [\"3.10\", \"3.11\"]\nversion = [\"42\", \"3.14\"]\n\n[[tool.hatch.envs.test.matrix]]\npython = [\"3.11\", \"3.12\"]\nversion = [\"9000\"]\nfeature = [\"foo\", \"bar\"]\n</code></pre> <pre><code>[envs.test]\ndependencies = [\n  \"pytest\"\n]\n\n[[envs.test.matrix]]\npython = [\"3.10\", \"3.11\"]\nversion = [\"42\", \"3.14\"]\n\n[[envs.test.matrix]]\npython = [\"3.11\", \"3.12\"]\nversion = [\"9000\"]\nfeature = [\"foo\", \"bar\"]\n</code></pre> <p>Doing so will result in the product of each variable combination being its own environment.</p>"},{"location":"config/environment/advanced/#naming","title":"Naming","text":"<p>The name of the generated environments will be the variable values of each combination separated by hyphens, altogether prefixed by <code>&lt;ENV_NAME&gt;.</code>. For example, the following configuration:</p>  pyproject.toml hatch.toml <pre><code>[[tool.hatch.envs.test.matrix]]\nversion = [\"42\"]\nfeature = [\"foo\", \"bar\"]\n</code></pre> <pre><code>[[envs.test.matrix]]\nversion = [\"42\"]\nfeature = [\"foo\", \"bar\"]\n</code></pre> <p>would indicate the following unique environments:</p> <pre><code>test.42-foo\ntest.42-bar\n</code></pre> <p>The exceptions to this format are described below.</p>"},{"location":"config/environment/advanced/#python-variables","title":"Python variables","text":"<p>If the variables <code>py</code> or <code>python</code> are specified, then they will rank first in the product result and will be prefixed by <code>py</code> if the value is not. For example, the following configuration:</p>  pyproject.toml hatch.toml <pre><code>[[tool.hatch.envs.test.matrix]]\nversion = [\"42\"]\npython = [\"3.9\", \"pypy3\"]\n</code></pre> <pre><code>[[envs.test.matrix]]\nversion = [\"42\"]\npython = [\"3.9\", \"pypy3\"]\n</code></pre> <p>would generate the following environments:</p> <pre><code>test.py3.9-42\ntest.pypy3-42\n</code></pre> <p>Note</p> <p>The value of this variable sets the Python version.</p>"},{"location":"config/environment/advanced/#name-formatting","title":"Name formatting","text":"<p>You can set the <code>matrix-name-format</code> option to modify how each variable part is formatted which recognizes the placeholders <code>{variable}</code> and <code>{value}</code>. For example, the following configuration:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.test]\nmatrix-name-format = \"{variable}_{value}\"\n\n[[tool.hatch.envs.test.matrix]]\nversion = [\"42\"]\nfeature = [\"foo\", \"bar\"]\n</code></pre> <pre><code>[envs.test]\nmatrix-name-format = \"{variable}_{value}\"\n\n[[envs.test.matrix]]\nversion = [\"42\"]\nfeature = [\"foo\", \"bar\"]\n</code></pre> <p>would produce the following environments:</p> <pre><code>test.version_42-feature_foo\ntest.version_42-feature_bar\n</code></pre> <p>By default this option is set to <code>{value}</code>.</p>"},{"location":"config/environment/advanced/#default-environment","title":"Default environment","text":"<p>If the <code>default</code> environment defines matrices, then the generated names will not be prefixed by the environment name. This can be useful for projects that only need a single series of matrices without any standalone environments.</p>"},{"location":"config/environment/advanced/#selection","title":"Selection","text":"<p>Rather than selecting a single generated environment, you can select the root environment to target all of them. For example, if you have the following configuration:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.test]\ndependencies = [\n  \"coverage[toml]\",\n  \"pytest\",\n  \"pytest-cov\",\n]\n\n[tool.hatch.envs.test.scripts]\ncov = 'pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=pkg --cov=tests'\n\n[[tool.hatch.envs.test.matrix]]\npython = [\"3.11\", \"3.12\"]\nversion = [\"42\", \"3.14\"]\n</code></pre> <pre><code>[envs.test]\ndependencies = [\n  \"coverage[toml]\",\n  \"pytest\",\n  \"pytest-cov\",\n]\n\n[envs.test.scripts]\ncov = 'pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=pkg --cov=tests'\n\n[[envs.test.matrix]]\npython = [\"3.11\", \"3.12\"]\nversion = [\"42\", \"3.14\"]\n</code></pre> <p>you could then run your tests consecutively in all 4 environments with:</p> <pre><code>hatch run test:cov\n</code></pre>"},{"location":"config/environment/advanced/#option-overrides","title":"Option overrides","text":"<p>You can modify options based on the conditions of different sources like matrix variables with the <code>overrides</code> table, using dotted key syntax for each declaration:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.&lt;ENV_NAME&gt;.overrides]\n&lt;SOURCE&gt;.&lt;CONDITION&gt;.&lt;OPTION&gt; = &lt;VALUE&gt;\n</code></pre> <pre><code>[envs.&lt;ENV_NAME&gt;.overrides]\n&lt;SOURCE&gt;.&lt;CONDITION&gt;.&lt;OPTION&gt; = &lt;VALUE&gt;\n</code></pre> <p>The type of the selected option determines the types of values.</p>"},{"location":"config/environment/advanced/#platform-overrides","title":"Platform overrides","text":"<p>Options can be modified based on the current platform using the <code>platform</code> source.</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.test.overrides]\nplatform.windows.scripts = [\n  'run=pytest -m \"not io_uring\"',\n]\n</code></pre> <pre><code>[envs.test.overrides]\nplatform.windows.scripts = [\n  'run=pytest -m \"not io_uring\"',\n]\n</code></pre> <p>The following platforms are supported:</p> <ul> <li><code>linux</code></li> <li><code>windows</code></li> <li><code>macos</code></li> </ul>"},{"location":"config/environment/advanced/#environment-variable-overrides","title":"Environment variable overrides","text":"<p>Environment variables can modify options using the <code>env</code> source.</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.test.overrides]\nenv.GITHUB_ACTIONS.dev-mode = { value = false, if = [\"true\"] }\n</code></pre> <pre><code>[envs.test.overrides]\nenv.GITHUB_ACTIONS.dev-mode = { value = false, if = [\"true\"] }\n</code></pre>"},{"location":"config/environment/advanced/#matrix-variable-overrides","title":"Matrix variable overrides","text":"<p>The matrix variables used to generate each environment can be used to modify options within using the <code>matrix</code> source.</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.test.overrides]\nmatrix.version.env-vars = \"PRODUCT_VERSION\"\nmatrix.auth.features = [\n  { value = \"oauth\", if = [\"oauth2\"] },\n  { value = \"kerberos\", if = [\"kerberos\"] },\n]\n\n[[tool.hatch.envs.test.matrix]]\npython = [\"3.11\", \"3.12\"]\nversion = [\"legacy\", \"latest\"]\nauth = [\"oauth2\", \"kerberos\", \"noauth\"]\n</code></pre> <pre><code>[envs.test.overrides]\nmatrix.version.env-vars = \"PRODUCT_VERSION\"\nmatrix.auth.features = [\n  { value = \"oauth\", if = [\"oauth2\"] },\n  { value = \"kerberos\", if = [\"kerberos\"] },\n]\n\n[[envs.test.matrix]]\npython = [\"3.11\", \"3.12\"]\nversion = [\"legacy\", \"latest\"]\nauth = [\"oauth2\", \"kerberos\", \"noauth\"]\n</code></pre>"},{"location":"config/environment/advanced/#name-overrides","title":"Name overrides","text":"<p>When a matrix is defined, the <code>name</code> source can be used for regular expression matching on the generated name, minus the prefix for non-default environments.</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.test.overrides]\nname.\"^0\".env-vars = \"TESTING_UNSTABLE=true\"\n\n[[tool.hatch.envs.test.matrix]]\nversion = [\"0.1.0\", \"0.2.0\", \"1.0.0\"]\n</code></pre> <pre><code>[envs.test.overrides]\nname.\"^0\".env-vars = \"TESTING_UNSTABLE=true\"\n\n[[envs.test.matrix]]\nversion = [\"0.1.0\", \"0.2.0\", \"1.0.0\"]\n</code></pre>"},{"location":"config/environment/advanced/#types","title":"Types","text":"<ul> <li> <p>Literal types like strings for the Python version or booleans for skipping installation can be set using the value itself, an inline table, or an array. For example:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.test.overrides]\nmatrix.foo.python = \"3.10\"\nmatrix.bar.skip-install = { value = true, if = [\"...\"] }\nenv.CI.dev-mode = [\n  { value = false, if = [\"...\"] },\n  true,\n]\n</code></pre> <pre><code>[envs.test.overrides]\nmatrix.foo.python = \"3.10\"\nmatrix.bar.skip-install = { value = true, if = [\"...\"] }\nenv.CI.dev-mode = [\n  { value = false, if = [\"...\"] },\n  true,\n]\n</code></pre> <p>For arrays, the first allowed value will be used.</p> </li> <li> <p>Array types like dependencies or commands can be appended to using an array of strings or inline tables. For example:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.test.overrides]\nmatrix.foo.dependencies = [\n  \"httpx\",\n  { value = \"cryptography\" },\n]\n</code></pre> <pre><code>[envs.test.overrides]\nmatrix.foo.dependencies = [\n  \"httpx\",\n  { value = \"cryptography\" },\n]\n</code></pre> </li> <li> <p>Mapping types like environment variables or scripts can have keys set using a string, or an array of strings or inline tables. For example:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.test.overrides]\nmatrix.foo.env-vars = \"KEY=VALUE\"\nmatrix.bar.env-vars = [\n  \"KEY1=VALUE1\",\n  { key = \"KEY2\", value = \"VALUE2\" },\n]\n</code></pre> <pre><code>[envs.test.overrides]\nmatrix.foo.env-vars = \"KEY=VALUE\"\nmatrix.bar.env-vars = [\n  \"KEY1=VALUE1\",\n  { key = \"KEY2\", value = \"VALUE2\" },\n]\n</code></pre> <p>If the value is missing (no <code>=</code> for strings, no <code>value</code> key for inline tables), then the value will be set to the value of the source condition.</p> </li> </ul>"},{"location":"config/environment/advanced/#overwriting","title":"Overwriting","text":"<p>Rather than supplementing the values within mapping types or array types, you can overwrite the option as a whole by prefixing the name with <code>set-</code>:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.test.overrides]\nmatrix.foo.set-platforms = [\"macos\", \"linux\"]\n</code></pre> <pre><code>[envs.test.overrides]\nmatrix.foo.set-platforms = [\"macos\", \"linux\"]\n</code></pre> <p>When overwriting entire options or keys within mappings, override sources are applied in the following order:</p> <ol> <li>platform</li> <li>environment variables</li> <li>matrix variables</li> <li>names</li> </ol>"},{"location":"config/environment/advanced/#conditions","title":"Conditions","text":"<p>You may specify certain extra keys for any inline table that will determine whether or not to apply that entry. These modifiers may be combined with others and any negative evaluation will immediately cause the entry to be skipped.</p>"},{"location":"config/environment/advanced/#allowed-values","title":"Allowed values","text":"<p>The <code>if</code> key represents the allowed values for that condition. If the value of the condition is not listed, then that entry will not be applied:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.test.overrides]\nmatrix.version.python = { value = \"pypy\", if = [\"3.14\"] }\nmatrix.version.env-vars = [\n  { key = \"KEY1\", value = \"VALUE1\", if = [\"42\"] },\n  { key = \"KEY2\", value = \"VALUE2\", if = [\"3.14\"] },\n]\n\n[[tool.hatch.envs.test.matrix]]\nversion = [\"42\", \"3.14\"]\n</code></pre> <pre><code>[envs.test.overrides]\nmatrix.version.python = { value = \"pypy\", if = [\"3.14\"] }\nmatrix.version.env-vars = [\n  { key = \"KEY1\", value = \"VALUE1\", if = [\"42\"] },\n  { key = \"KEY2\", value = \"VALUE2\", if = [\"3.14\"] },\n]\n\n[[envs.test.matrix]]\nversion = [\"42\", \"3.14\"]\n</code></pre>"},{"location":"config/environment/advanced/#specific-platforms","title":"Specific platforms","text":"<p>The <code>platform</code> key represents the desired platforms. If the current platform is not listed, then that entry will not be applied:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.test.overrides]\nenv.EXPERIMENTAL.python = { value = \"pypy\", if = [\"1\"], platform = [\"macos\"] }\nmatrix.version.env-vars = [\n  { key = \"KEY1\", value = \"VALUE1\", if = [\"42\"], platform = [\"linux\"] },\n  { key = \"KEY2\", value = \"VALUE2\", if = [\"3.14\"] },\n]\n\n[[tool.hatch.envs.test.matrix]]\nversion = [\"42\", \"3.14\"]\n</code></pre> <pre><code>[envs.test.overrides]\nenv.EXPERIMENTAL.python = { value = \"pypy\", if = [\"1\"], platform = [\"macos\"] }\nmatrix.version.env-vars = [\n  { key = \"KEY1\", value = \"VALUE1\", if = [\"42\"], platform = [\"linux\"] },\n  { key = \"KEY2\", value = \"VALUE2\", if = [\"3.14\"] },\n]\n\n[[envs.test.matrix]]\nversion = [\"42\", \"3.14\"]\n</code></pre>"},{"location":"config/environment/advanced/#required-environment-variables","title":"Required environment variables","text":"<p>The <code>env</code> key represents the required environment variables. If any of the listed environment variables are not set or the defined value does not match, then that entry will not be applied:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.test.overrides]\nplatform.windows.python = { value = \"pypy\", env = [\"EXPERIMENTAL\"] }\nmatrix.version.env-vars = [\n  { key = \"KEY1\", value = \"VALUE1\", if = [\"42\"], env = [\"FOO\", \"BAR=BAZ\"] },\n  { key = \"KEY2\", value = \"VALUE2\", if = [\"3.14\"] },\n]\n\n[[tool.hatch.envs.test.matrix]]\nversion = [\"42\", \"3.14\"]\n</code></pre> <pre><code>[envs.test.overrides]\nplatform.windows.python = { value = \"pypy\", env = [\"EXPERIMENTAL\"] }\nmatrix.version.env-vars = [\n  { key = \"KEY1\", value = \"VALUE1\", if = [\"42\"], env = [\"FOO\", \"BAR=BAZ\"] },\n  { key = \"KEY2\", value = \"VALUE2\", if = [\"3.14\"] },\n]\n\n[[envs.test.matrix]]\nversion = [\"42\", \"3.14\"]\n</code></pre>"},{"location":"config/environment/overview/","title":"Environment configuration","text":"<p>All environments are defined as sections within the <code>tool.hatch.envs</code> table.</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.&lt;ENV_NAME&gt;]\n</code></pre> <pre><code>[envs.&lt;ENV_NAME&gt;]\n</code></pre> <p>The storage location for environments is completely configurable.</p> <p>Unless an environment is explicitly selected on the command line, the <code>default</code> environment will be used. The type of this environment defaults to <code>virtual</code>.</p> <p>Info</p> <p>Environments prefixed by <code>hatch-</code> are used for special purposes e.g. testing.</p>"},{"location":"config/environment/overview/#inheritance","title":"Inheritance","text":"<p>All environments inherit from the environment defined by its <code>template</code> option, which defaults to <code>default</code>.</p> <p>So for the following configuration:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.foo]\ntype = \"baz\"\nskip-install = true\n\n[tool.hatch.envs.bar]\ntemplate = \"foo\"\nskip-install = false\n</code></pre> <pre><code>[envs.foo]\ntype = \"baz\"\nskip-install = true\n\n[envs.bar]\ntemplate = \"foo\"\nskip-install = false\n</code></pre> <p>the environment <code>bar</code> will be of type <code>baz</code> with <code>skip-install</code> set to <code>false</code>.</p> <p>Note</p> <p>Environments do not inherit matrices.</p>"},{"location":"config/environment/overview/#self-referential-environments","title":"Self-referential environments","text":"<p>You can disable inheritance by setting <code>template</code> to the environment's own name:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.foo]\ntemplate = \"foo\"\n</code></pre> <pre><code>[envs.foo]\ntemplate = \"foo\"\n</code></pre>"},{"location":"config/environment/overview/#detached-environments","title":"Detached environments","text":"<p>A common use case is standalone environments that do not require inheritance nor the installation of the project, such as for linting or sometimes building documentation. Enabling the <code>detached</code> option will make the environment self-referential and will skip project installation:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.lint]\ndetached = true\n</code></pre> <pre><code>[envs.lint]\ndetached = true\n</code></pre>"},{"location":"config/environment/overview/#dependencies","title":"Dependencies","text":"<p>You can install dependencies in addition to the ones defined by your project's metadata. Entries support context formatting.</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.test]\ndependencies = [\n  \"coverage[toml]\",\n  \"pytest\",\n  \"pytest-cov\",\n  \"pytest-mock\",\n]\n</code></pre> <pre><code>[envs.test]\ndependencies = [\n  \"coverage[toml]\",\n  \"pytest\",\n  \"pytest-cov\",\n  \"pytest-mock\",\n]\n</code></pre> <p>If you define environments with dependencies that only slightly differ from their inherited environments, you can use the <code>extra-dependencies</code> option to avoid redeclaring the <code>dependencies</code> option:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.default]\ndependencies = [\n  \"foo\",\n  \"bar\",\n]\n\n[tool.hatch.envs.experimental]\nextra-dependencies = [\n  \"baz\",\n]\n</code></pre> <pre><code>[envs.default]\ndependencies = [\n  \"foo\",\n  \"bar\",\n]\n\n[envs.experimental]\nextra-dependencies = [\n  \"baz\",\n]\n</code></pre> <p>Tip</p> <p>Hatch uses pip to install dependencies so any configuration it supports Hatch does as well. For example, if you wanted to only use a private repository you could set the <code>PIP_INDEX_URL</code> environment variable.</p>"},{"location":"config/environment/overview/#installation","title":"Installation","text":""},{"location":"config/environment/overview/#features","title":"Features (extras)","text":"<p>If your project defines optional dependencies, you can select which groups to install using the <code>features</code> option:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.nightly]\nfeatures = [\n  \"server\",\n  \"grpc\",\n]\n</code></pre> <pre><code>[envs.nightly]\nfeatures = [\n  \"server\",\n  \"grpc\",\n]\n</code></pre> <p>Note</p> <p>Features/optional dependencies are also known as <code>extras</code> in other tools.</p>"},{"location":"config/environment/overview/#dev-mode","title":"Dev mode","text":"<p>By default, environments will always reflect the current state of your project on disk, for example, by installing it in editable mode in a Python environment. Set <code>dev-mode</code> to <code>false</code> to disable this behavior and have your project installed only upon creation of a new environment. From then on, you need to manage your project installation manually.</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.static]\ndev-mode = false\n</code></pre> <pre><code>[envs.static]\ndev-mode = false\n</code></pre>"},{"location":"config/environment/overview/#skip-install","title":"Skip install","text":"<p>By default, environments will install your project during creation. To ignore this step, set <code>skip-install</code> to <code>true</code>:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.lint]\nskip-install = true\n</code></pre> <pre><code>[envs.lint]\nskip-install = true\n</code></pre>"},{"location":"config/environment/overview/#environment-variables","title":"Environment variables","text":""},{"location":"config/environment/overview/#defined","title":"Defined","text":"<p>You can define environment variables with the <code>env-vars</code> option:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.docs]\ndependencies = [\n  \"mkdocs\"\n]\n[tool.hatch.envs.docs.env-vars]\nSOURCE_DATE_EPOCH = \"1580601600\"\n</code></pre> <pre><code>[envs.docs]\ndependencies = [\n  \"mkdocs\"\n]\n[envs.docs.env-vars]\nSOURCE_DATE_EPOCH = \"1580601600\"\n</code></pre> <p>Values support context formatting.</p>"},{"location":"config/environment/overview/#filters","title":"Filters","text":"<p>By default, environments will have access to all environment variables. You can filter with wildcard patterns using the <code>env-include</code>/<code>env-exclude</code> options:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.&lt;ENV_NAME&gt;]\nenv-include = [\n  \"FOO*\",\n]\nenv-exclude = [\n  \"BAR\",\n]\n</code></pre> <pre><code>[envs.&lt;ENV_NAME&gt;]\nenv-include = [\n  \"FOO*\",\n]\nenv-exclude = [\n  \"BAR\",\n]\n</code></pre> <p>Exclusion patterns take precedence but will never affect defined environment variables.</p>"},{"location":"config/environment/overview/#scripts","title":"Scripts","text":"<p>You can define named scripts that may be executed or referenced at the beginning of other scripts. Context formatting is supported.</p> <p>For example, in the following configuration:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.test]\ndependencies = [\n  \"coverage[toml]\",\n  \"pytest\",\n  \"pytest-cov\",\n  \"pytest-mock\",\n]\n[tool.hatch.envs.test.scripts]\nrun-coverage = \"pytest --cov-config=pyproject.toml --cov=pkg --cov=tests\"\nrun = \"run-coverage --no-cov\"\n</code></pre> <pre><code>[envs.test]\ndependencies = [\n  \"coverage[toml]\",\n  \"pytest\",\n  \"pytest-cov\",\n  \"pytest-mock\",\n]\n[envs.test.scripts]\nrun-coverage = \"pytest --cov-config=pyproject.toml --cov=pkg --cov=tests\"\nrun = \"run-coverage --no-cov\"\n</code></pre> <p>the <code>run</code> script would be expanded to:</p> <pre><code>pytest --cov-config=pyproject.toml --cov=pkg --cov=tests --no-cov\n</code></pre> <p>Scripts can also be defined as an array of strings.</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.style]\ndetached = true\ndependencies = [\n  \"flake8\",\n  \"black\",\n  \"isort\",\n]\n[tool.hatch.envs.style.scripts]\ncheck = [\n  \"flake8 .\",\n  \"black --check --diff .\",\n  \"isort --check-only --diff .\",\n]\nfmt = [\n  \"isort .\",\n  \"black .\",\n  \"check\",\n]\n</code></pre> <pre><code>[envs.style]\ndetached = true\ndependencies = [\n  \"flake8\",\n  \"black\",\n  \"isort\",\n]\n[envs.style.scripts]\ncheck = [\n  \"flake8 .\",\n  \"black --check --diff .\",\n  \"isort --check-only --diff .\",\n]\nfmt = [\n  \"isort .\",\n  \"black .\",\n  \"check\",\n]\n</code></pre> <p>Similar to make, you can ignore the exit code of commands that start with <code>-</code> (a hyphen). For example, the script <code>error</code> defined by the following configuration would halt after the second command with <code>3</code> as the exit code:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.test.scripts]\nerror = [\n  \"- exit 1\",\n  \"exit 3\",\n  \"exit 0\",\n]\n</code></pre> <pre><code>[envs.test.scripts]\nerror = [\n  \"- exit 1\",\n  \"exit 3\",\n  \"exit 0\",\n]\n</code></pre>"},{"location":"config/environment/overview/#extra-scripts","title":"Extra scripts","text":"<p>Individual scripts inherit from parent environments just like options. To guarantee that individual scripts do not override those defined by parent environments, you can use the <code>extra-scripts</code> option instead which is only capable of adding scripts that have not been defined.</p>"},{"location":"config/environment/overview/#commands","title":"Commands","text":"<p>All commands are able to use any defined scripts. Also like scripts, context formatting is supported and the exit code of commands that start with a hyphen will be ignored.</p>"},{"location":"config/environment/overview/#pre-install","title":"Pre-install","text":"<p>You can run commands immediately before environments install your project.</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.&lt;ENV_NAME&gt;]\npre-install-commands = [\n  \"...\",\n]\n</code></pre> <pre><code>[envs.&lt;ENV_NAME&gt;]\npre-install-commands = [\n  \"...\",\n]\n</code></pre>"},{"location":"config/environment/overview/#post-install","title":"Post-install","text":"<p>You can run commands immediately after environments install your project.</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.&lt;ENV_NAME&gt;]\npost-install-commands = [\n  \"...\",\n]\n</code></pre> <pre><code>[envs.&lt;ENV_NAME&gt;]\npost-install-commands = [\n  \"...\",\n]\n</code></pre>"},{"location":"config/environment/overview/#python-version","title":"Python version","text":"<p>The <code>python</code> option specifies which version of Python to use, or an absolute path to a Python interpreter:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.&lt;ENV_NAME&gt;]\npython = \"3.10\"\n</code></pre> <pre><code>[envs.&lt;ENV_NAME&gt;]\npython = \"3.10\"\n</code></pre> <p>All environment types should respect this option.</p>"},{"location":"config/environment/overview/#supported-platforms","title":"Supported platforms","text":"<p>The <code>platforms</code> option indicates the operating systems with which the environment is compatible:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.&lt;ENV_NAME&gt;]\nplatforms = [\"linux\", \"windows\", \"macos\"]\n</code></pre> <pre><code>[envs.&lt;ENV_NAME&gt;]\nplatforms = [\"linux\", \"windows\", \"macos\"]\n</code></pre> <p>The following platforms are supported:</p> <ul> <li><code>linux</code></li> <li><code>windows</code></li> <li><code>macos</code></li> </ul> <p>If unspecified, the environment is assumed to be compatible with all platforms.</p>"},{"location":"config/environment/overview/#description","title":"Description","text":"<p>The <code>description</code> option is purely informational and is displayed in the output of the <code>env show</code> command:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.&lt;ENV_NAME&gt;]\ndescription = \"\"\"\nLorem ipsum ...\n\"\"\"\n</code></pre> <pre><code>[envs.&lt;ENV_NAME&gt;]\ndescription = \"\"\"\nLorem ipsum ...\n\"\"\"\n</code></pre>"},{"location":"config/environment/overview/#type","title":"Type","text":"<p>An environment's <code>type</code> determines which environment plugin will be used for management. The only built-in environment type is <code>virtual</code>, which uses virtual Python environments.</p>"},{"location":"config/internal/build/","title":"Build environment configuration","text":"<p>You can fully alter the behavior of the environment used by the <code>build</code> command.</p>"},{"location":"config/internal/build/#dependencies","title":"Dependencies","text":"<p>Build environments will always have what is required by the build system, targets, and hooks.</p> <p>You can define dependencies that your builds may require in the environment as well:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.hatch-build]\ndependencies = [\n  \"cython\",\n]\n</code></pre> <pre><code>[envs.hatch-build]\ndependencies = [\n  \"cython\",\n]\n</code></pre> <p>caution</p> <p>It's recommended to only use the standard mechanisms to define build dependencies for better compatibility with other tools.</p>"},{"location":"config/internal/build/#environment-variables","title":"Environment variables","text":"<p>You can define environment variables that will be set during builds:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.hatch-build.env-vars]\nSOURCE_DATE_EPOCH = \"1580601600\"\n</code></pre> <pre><code>[envs.hatch-build.env-vars]\nSOURCE_DATE_EPOCH = \"1580601600\"\n</code></pre>"},{"location":"config/internal/build/#installer","title":"Installer","text":"<p>By default, UV is enabled. You may disable that behavior as follows:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.hatch-build]\ninstaller = \"pip\"\n</code></pre> <pre><code>[envs.hatch-build]\ninstaller = \"pip\"\n</code></pre>"},{"location":"config/internal/static-analysis/","title":"Static analysis configuration","text":"<p>Static analysis performed by the <code>fmt</code> command is (by default) backed entirely by Ruff.</p> <p>Hatch provides default settings that user configuration can extend.</p>"},{"location":"config/internal/static-analysis/#extending-config","title":"Extending config","text":"<p>When defining your configuration, be sure to use options that are prefixed by <code>extend-</code> such as <code>extend-select</code>, for example:</p>  pyproject.toml ruff.toml <pre><code>[tool.ruff.format]\npreview = true\nquote-style = \"single\"\n\n[tool.ruff.lint]\npreview = true\nextend-select = [\"C901\"]\n\n[tool.ruff.lint.extend-per-file-ignores]\n\"docs/.hooks/*\" = [\"INP001\", \"T201\"]\n\n[tool.ruff.lint.isort]\nknown-first-party = [\"foo\", \"bar\"]\n</code></pre> <pre><code>[format]\npreview = true\nquote-style = \"single\"\n\n[lint]\npreview = true\nextend-select = [\"C901\"]\n\n[lint.extend-per-file-ignores]\n\"docs/.hooks/*\" = [\"INP001\", \"T201\"]\n\n[lint.isort]\nknown-first-party = [\"foo\", \"bar\"]\n</code></pre> <p>Note</p> <p>When not persisting config, there is no need to explicitly extend the defaults as Hatch automatically handles that.</p>"},{"location":"config/internal/static-analysis/#persistent-config","title":"Persistent config","text":"<p>If you want to store the default configuration in the project, set an explicit path like so:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.hatch-static-analysis]\nconfig-path = \"ruff_defaults.toml\"\n</code></pre> <pre><code>[envs.hatch-static-analysis]\nconfig-path = \"ruff_defaults.toml\"\n</code></pre> <p>Then instruct Ruff to consider your configuration as an extension of the default file:</p>  pyproject.toml ruff.toml <pre><code>[tool.ruff]\nextend = \"ruff_defaults.toml\"\n</code></pre> <pre><code>extend = \"ruff_defaults.toml\"\n</code></pre> <p>Anytime you wish to update the defaults (such as when upgrading Hatch), you must run the <code>fmt</code> command once with the <code>--sync</code> flag e.g.:</p> <pre><code>hatch fmt --check --sync\n</code></pre> <p>Tip</p> <p>This is the recommended approach since it allows other tools like IDEs to use the default configuration.</p>"},{"location":"config/internal/static-analysis/#no-config","title":"No config","text":"<p>If you don't want Hatch to use any of its default configuration and rely entirely on yours, set the path to anything and then simply don't <code>extend</code> in your Ruff config:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.hatch-static-analysis]\nconfig-path = \"none\"\n</code></pre> <pre><code>[envs.hatch-static-analysis]\nconfig-path = \"none\"\n</code></pre>"},{"location":"config/internal/static-analysis/#customize-behavior","title":"Customize behavior","text":"<p>You can fully alter the behavior of the environment used by the <code>fmt</code> command. See the how-to for a detailed example.</p>"},{"location":"config/internal/static-analysis/#dependencies","title":"Dependencies","text":"<p>Pin the particular version of Ruff by explicitly defining the environment dependencies:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.hatch-static-analysis]\ndependencies = [\"ruff==X.Y.Z\"]\n</code></pre> <pre><code>[envs.hatch-static-analysis]\ndependencies = [\"ruff==X.Y.Z\"]\n</code></pre>"},{"location":"config/internal/static-analysis/#scripts","title":"Scripts","text":"<p>If you want to change the default commands that are executed, you can override the scripts. The following four scripts must be defined:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.hatch-static-analysis.scripts]\nformat-check = \"...\"\nformat-fix = \"...\"\nlint-check = \"...\"\nlint-fix = \"...\"\n</code></pre> <pre><code>[envs.hatch-static-analysis.scripts]\nformat-check = \"...\"\nformat-fix = \"...\"\nlint-check = \"...\"\nlint-fix = \"...\"\n</code></pre> <p>The <code>format-*</code> scripts correspond to the <code>--formatter</code>/<code>-f</code> flag while the <code>lint-*</code> scripts correspond to the <code>--linter</code>/<code>-l</code> flag. The <code>*-fix</code> scripts run by default while the <code>*-check</code> scripts correspond to the <code>--check</code> flag.</p> <p>Reminder</p> <p>If you choose to use different tools for static analysis, be sure to update the required dependencies.</p>"},{"location":"config/internal/static-analysis/#installer","title":"Installer","text":"<p>By default, UV is enabled. You may disable that behavior as follows:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.hatch-static-analysis]\ninstaller = \"pip\"\n</code></pre> <pre><code>[envs.hatch-static-analysis]\ninstaller = \"pip\"\n</code></pre>"},{"location":"config/internal/static-analysis/#default-settings","title":"Default settings","text":""},{"location":"config/internal/static-analysis/#non-rule-settings","title":"Non-rule settings","text":"<ul> <li>Line length set to 120</li> <li>Docstring formatting enabled with line length set to 80</li> <li>Only absolute imports are allowed, except for tests</li> <li>The normalized project name is a known first party import</li> </ul>"},{"location":"config/internal/static-analysis/#per-file-ignored-rules","title":"Per-file ignored rules","text":"<ul> <li><code>**/scripts/*</code>: INP001, T201</li> <li><code>**/tests/**/*</code>: PLC1901, PLR2004, PLR6301, S, TID252</li> </ul>"},{"location":"config/internal/static-analysis/#selected-rules","title":"Selected rules","text":"<p>The following rules are based on version 0.6.8 of Ruff. Rules with a <sup>P</sup> are only selected when preview mode is enabled.</p> <p>There are 569 selected stable rules and 116 selected preview rules.</p> Selected rules <ul> <li>A001, A002, A003, A004<sup>P</sup>, A005<sup>P</sup>, A006<sup>P</sup></li> <li>ARG001, ARG002, ARG003, ARG004, ARG005</li> <li>ASYNC100, ASYNC105, ASYNC109, ASYNC110, ASYNC115, ASYNC116<sup>P</sup>, ASYNC210, ASYNC220, ASYNC221, ASYNC222, ASYNC230, ASYNC251</li> <li>B002, B003, B004, B005, B006, B007, B008, B009, B010, B011, B012, B013, B014, B015, B016, B017, B018, B019, B020, B021, B022, B023, B024, B025, B026, B028, B029, B030, B031, B032, B033, B034, B035, B039<sup>P</sup>, B904, B905, B901<sup>P</sup>, B909<sup>P</sup></li> <li>BLE001</li> <li>C400, C401, C402, C403, C404, C405, C406, C408, C409, C410, C411, C413, C414, C415, C416, C417, C418, C419, C420<sup>P</sup></li> <li>COM818</li> <li>DOC201<sup>P</sup>, DOC202<sup>P</sup>, DOC402<sup>P</sup>, DOC403<sup>P</sup>, DOC501<sup>P</sup>, DOC502<sup>P</sup></li> <li>DTZ001, DTZ002, DTZ003, DTZ004, DTZ005, DTZ006, DTZ007, DTZ011, DTZ012</li> <li>E101, E112<sup>P</sup>, E113<sup>P</sup>, E115<sup>P</sup>, E116<sup>P</sup>, E201<sup>P</sup>, E202<sup>P</sup>, E203<sup>P</sup>, E204<sup>P</sup>, E211<sup>P</sup>, E221<sup>P</sup>, E222<sup>P</sup>, E223<sup>P</sup>, E224<sup>P</sup>, E225<sup>P</sup>, E226<sup>P</sup>, E227<sup>P</sup>, E228<sup>P</sup>, E231<sup>P</sup>, E241<sup>P</sup>, E242<sup>P</sup>, E251<sup>P</sup>, E252<sup>P</sup>, E261<sup>P</sup>, E262<sup>P</sup>, E265<sup>P</sup>, E266<sup>P</sup>, E271<sup>P</sup>, E272<sup>P</sup>, E273<sup>P</sup>, E274<sup>P</sup>, E275<sup>P</sup>, E401, E402, E502<sup>P</sup>, E701, E702, E703, E711, E712, E713, E714, E721, E722, E731, E741, E742, E743, E902, E999</li> <li>EM101, EM102, EM103</li> <li>EXE001, EXE002, EXE003, EXE004, EXE005</li> <li>F401, F402, F403, F404, F405, F406, F407, F501, F502, F503, F504, F505, F506, F507, F508, F509, F521, F522, F523, F524, F525, F541, F601, F602, F621, F622, F631, F632, F633, F634, F701, F702, F704, F706, F707, F722, F811, F821, F822, F823, F841, F842, F901</li> <li>FA100, FA102</li> <li>FAST001<sup>P</sup>, FAST002<sup>P</sup>, FAST003<sup>P</sup></li> <li>FBT001, FBT002</li> <li>FLY002</li> <li>FURB105, FURB129, FURB136, FURB161, FURB163, FURB167, FURB168, FURB169, FURB177, FURB181, FURB187, FURB110<sup>P</sup>, FURB113<sup>P</sup>, FURB116<sup>P</sup>, FURB118<sup>P</sup>, FURB131<sup>P</sup>, FURB132<sup>P</sup>, FURB142<sup>P</sup>, FURB145<sup>P</sup>, FURB148<sup>P</sup>, FURB152<sup>P</sup>, FURB154<sup>P</sup>, FURB157<sup>P</sup>, FURB164<sup>P</sup>, FURB166<sup>P</sup>, FURB171<sup>P</sup>, FURB180<sup>P</sup>, FURB188<sup>P</sup>, FURB192<sup>P</sup></li> <li>G001, G002, G003, G004, G010, G101, G201, G202</li> <li>I001, I002</li> <li>ICN001, ICN002, ICN003</li> <li>INP001</li> <li>INT001, INT002, INT003</li> <li>ISC003</li> <li>LOG001, LOG002, LOG007, LOG009</li> <li>N801, N802, N803, N804, N805, N806, N807, N811, N812, N813, N814, N815, N816, N817, N818, N999</li> <li>PERF101, PERF102, PERF401, PERF402, PERF403</li> <li>PGH005</li> <li>PIE790, PIE794, PIE796, PIE800, PIE804, PIE807, PIE808, PIE810</li> <li>PLC0105, PLC0131, PLC0132, PLC0205, PLC0208, PLC0414, PLC0206<sup>P</sup>, PLC0415<sup>P</sup>, PLC1901<sup>P</sup>, PLC2401, PLC2403, PLC2701<sup>P</sup>, PLC2801<sup>P</sup>, PLC3002</li> <li>PLE0100, PLE0101, PLE0115, PLE0116, PLE0117, PLE0118, PLE0237, PLE0241, PLE0302, PLE0303, PLE0305, PLE0307, PLE0308, PLE0309, PLE0604, PLE0605, PLE0643, PLE0704, PLE0304<sup>P</sup>, PLE1132, PLE1142, PLE1205, PLE1206, PLE1300, PLE1307, PLE1310, PLE1507, PLE1519, PLE1520, PLE1700, PLE1141<sup>P</sup>, PLE2502, PLE2510, PLE2512, PLE2513, PLE2514, PLE2515, PLE4703<sup>P</sup></li> <li>PLR0124, PLR0133, PLR0206, PLR0402, PLR0202<sup>P</sup>, PLR0203<sup>P</sup>, PLR1704, PLR1711, PLR1714, PLR1722, PLR1730, PLR1736, PLR1733<sup>P</sup>, PLR2004, PLR2044, PLR5501, PLR6104<sup>P</sup>, PLR6201<sup>P</sup>, PLR6301<sup>P</sup></li> <li>PLW0120, PLW0127, PLW0128, PLW0129, PLW0131, PLW0133, PLW0211, PLW0245, PLW0406, PLW0602, PLW0603, PLW0604, PLW0642, PLW0711, PLW0108<sup>P</sup>, PLW0177<sup>P</sup>, PLW1501, PLW1508, PLW1509, PLW1510, PLW1514<sup>P</sup>, PLW1641<sup>P</sup>, PLW2101, PLW2901, PLW3301, PLW3201<sup>P</sup></li> <li>PT001, PT002, PT003, PT006, PT007, PT008, PT009, PT010, PT011, PT012, PT013, PT014, PT015, PT016, PT017, PT018, PT019, PT020, PT021, PT022, PT023, PT024, PT025, PT026, PT027</li> <li>PYI001, PYI002, PYI003, PYI004, PYI005, PYI006, PYI007, PYI008, PYI009, PYI010, PYI011, PYI012, PYI013, PYI014, PYI015, PYI016, PYI017, PYI018, PYI019, PYI020, PYI021, PYI024, PYI025, PYI026, PYI029, PYI030, PYI032, PYI033, PYI034, PYI035, PYI036, PYI041, PYI042, PYI043, PYI044, PYI045, PYI046, PYI047, PYI048, PYI049, PYI050, PYI051, PYI052, PYI053, PYI054, PYI055, PYI056, PYI057, PYI058, PYI062, PYI059<sup>P</sup>, PYI063<sup>P</sup>, PYI064<sup>P</sup>, PYI066<sup>P</sup></li> <li>RET503, RET504, RET505, RET506, RET507, RET508</li> <li>RSE102</li> <li>RUF001, RUF002, RUF003, RUF005, RUF006, RUF007, RUF008, RUF009, RUF010, RUF012, RUF013, RUF015, RUF016, RUF017, RUF018, RUF019, RUF020, RUF024, RUF026, RUF021<sup>P</sup>, RUF022<sup>P</sup>, RUF023<sup>P</sup>, RUF027<sup>P</sup>, RUF028<sup>P</sup>, RUF029<sup>P</sup>, RUF030<sup>P</sup>, RUF031<sup>P</sup>, RUF032<sup>P</sup>, RUF033<sup>P</sup>, RUF034<sup>P</sup>, RUF100, RUF101</li> <li>S101, S102, S103, S104, S105, S106, S107, S108, S110, S112, S113, S201, S202, S301, S302, S303, S304, S305, S306, S307, S308, S310, S311, S312, S313, S314, S315, S316, S317, S318, S319, S320, S321, S323, S324, S401<sup>P</sup>, S402<sup>P</sup>, S403<sup>P</sup>, S405<sup>P</sup>, S406<sup>P</sup>, S407<sup>P</sup>, S408<sup>P</sup>, S409<sup>P</sup>, S411<sup>P</sup>, S412<sup>P</sup>, S413<sup>P</sup>, S415<sup>P</sup>, S501, S502, S503, S504, S505, S506, S507, S508, S509, S601, S602, S604, S605, S606, S607, S608, S609, S610, S611, S612, S701, S702</li> <li>SIM101, SIM102, SIM103, SIM105, SIM107, SIM108, SIM109, SIM110, SIM112, SIM113, SIM114, SIM115, SIM116, SIM117, SIM118, SIM201, SIM202, SIM208, SIM210, SIM211, SIM212, SIM220, SIM221, SIM222, SIM223, SIM300, SIM910, SIM911</li> <li>SLF001</li> <li>SLOT000, SLOT001, SLOT002</li> <li>T100, T201, T203</li> <li>TCH001, TCH002, TCH003, TCH004, TCH005, TCH010</li> <li>TD004, TD005, TD006, TD007</li> <li>TID251, TID252, TID253</li> <li>TRY002, TRY003, TRY004, TRY201, TRY300, TRY301, TRY302, TRY400, TRY401</li> <li>UP001, UP003, UP004, UP005, UP006, UP007, UP008, UP009, UP010, UP011, UP012, UP013, UP014, UP015, UP017, UP018, UP019, UP020, UP021, UP022, UP023, UP024, UP025, UP026, UP027, UP028, UP029, UP030, UP031, UP032, UP033, UP034, UP035, UP036, UP037, UP038, UP039, UP040, UP041, UP042<sup>P</sup>, UP043<sup>P</sup></li> <li>W291, W292, W293, W391<sup>P</sup>, W505, W605</li> <li>YTT101, YTT102, YTT103, YTT201, YTT202, YTT203, YTT204, YTT301, YTT302, YTT303</li> </ul>"},{"location":"config/internal/static-analysis/#unselected","title":"Unselected","text":"<p>There are 176 unselected rules.</p> Unselected rules <ul> <li>AIR001</li> <li>ANN001, ANN002, ANN003, ANN101, ANN102, ANN201, ANN202, ANN204, ANN205, ANN206, ANN401</li> <li>B027</li> <li>C901</li> <li>COM812, COM819</li> <li>CPY001</li> <li>D100, D101, D102, D103, D104, D105, D106, D107, D200, D201, D202, D203, D204, D205, D206, D207, D208, D209, D210, D211, D212, D213, D214, D215, D300, D301, D400, D401, D402, D403, D404, D405, D406, D407, D408, D409, D410, D411, D412, D413, D414, D415, D416, D417, D418, D419</li> <li>DJ001, DJ003, DJ006, DJ007, DJ008, DJ012, DJ013</li> <li>E111, E114, E117, E301, E302, E303, E304, E305, E306, E501</li> <li>ERA001</li> <li>FBT003</li> <li>FIX001, FIX002, FIX003, FIX004</li> <li>FURB101, FURB103, FURB140</li> <li>ISC001, ISC002</li> <li>NPY001, NPY002, NPY003, NPY201</li> <li>PD002, PD003, PD004, PD007, PD008, PD009, PD010, PD011, PD012, PD013, PD015, PD101, PD901</li> <li>PERF203</li> <li>PGH001, PGH002, PGH003, PGH004</li> <li>PLR0904, PLR0911, PLR0912, PLR0913, PLR0914, PLR0915, PLR0916, PLR0917, PLR1701, PLR1702, PLR1706</li> <li>PT004, PT005</li> <li>PTH100, PTH101, PTH102, PTH103, PTH104, PTH105, PTH106, PTH107, PTH108, PTH109, PTH110, PTH111, PTH112, PTH113, PTH114, PTH115, PTH116, PTH117, PTH118, PTH119, PTH120, PTH121, PTH122, PTH123, PTH124, PTH201, PTH202, PTH203, PTH204, PTH205, PTH206, PTH207</li> <li>Q000, Q001, Q002, Q003, Q004</li> <li>RET501, RET502</li> <li>RUF011, RUF200</li> <li>S404, S410, S603</li> <li>SIM401</li> <li>TD001, TD002, TD003</li> <li>TRY200</li> <li>W191</li> </ul>"},{"location":"config/internal/testing/","title":"Testing configuration","text":"<p>Check out the testing overview tutorial for a more comprehensive walk-through.</p>"},{"location":"config/internal/testing/#settings","title":"Settings","text":"<p>If an option has a corresponding <code>test</code> command flag, the flag will always take precedence.</p>"},{"location":"config/internal/testing/#default-arguments","title":"Default arguments","text":"<p>You can define default arguments for the <code>test</code> command by setting the <code>default-args</code> option, which must be an array of strings. The following is the default configuration:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.hatch-test]\ndefault-args = [\"tests\"]\n</code></pre> <pre><code>[envs.hatch-test]\ndefault-args = [\"tests\"]\n</code></pre>"},{"location":"config/internal/testing/#extra-arguments","title":"Extra arguments","text":"<p>You can define extra internal arguments for test scripts by setting the <code>extra-args</code> option, which must be an array of strings. For example, if you wanted to increase the verbosity of <code>pytest</code>, you could set the following:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.hatch-test]\nextra-args = [\"-vv\"]\n</code></pre> <pre><code>[envs.hatch-test]\nextra-args = [\"-vv\"]\n</code></pre>"},{"location":"config/internal/testing/#randomize-test-order","title":"Randomize test order","text":"<p>You can randomize the order of tests by enabling the <code>randomize</code> option which corresponds to the <code>--randomize</code>/<code>-r</code> flag:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.hatch-test]\nrandomize = true\n</code></pre> <pre><code>[envs.hatch-test]\nrandomize = true\n</code></pre>"},{"location":"config/internal/testing/#parallelize-test-execution","title":"Parallelize test execution","text":"<p>You can parallelize test execution by enabling the <code>parallel</code> option which corresponds to the <code>--parallel</code>/<code>-p</code> flag:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.hatch-test]\nparallel = true\n</code></pre> <pre><code>[envs.hatch-test]\nparallel = true\n</code></pre>"},{"location":"config/internal/testing/#retry-failed-tests","title":"Retry failed tests","text":"<p>You can retry failed tests by setting the <code>retries</code> option which corresponds to the <code>--retries</code> flag:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.hatch-test]\nretries = 2\n</code></pre> <pre><code>[envs.hatch-test]\nretries = 2\n</code></pre> <p>You can also set the number of seconds to wait between retries by setting the <code>retry-delay</code> option which corresponds to the <code>--retry-delay</code> flag:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.hatch-test]\nretry-delay = 1\n</code></pre> <pre><code>[envs.hatch-test]\nretry-delay = 1\n</code></pre>"},{"location":"config/internal/testing/#customize-environment","title":"Customize environment","text":"<p>You can fully alter the behavior of the environment used by the <code>test</code> command.</p>"},{"location":"config/internal/testing/#dependencies","title":"Dependencies","text":"<p>You can define extra dependencies that your tests may require:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.hatch-test]\nextra-dependencies = [\n  \"pyfakefs\",\n  \"pytest-asyncio\",\n  \"pytest-benchmark\",\n  \"pytest-memray\",\n  \"pytest-playwright\",\n  \"pytest-print\",\n]\n</code></pre> <pre><code>[envs.hatch-test]\nextra-dependencies = [\n  \"pyfakefs\",\n  \"pytest-asyncio\",\n  \"pytest-benchmark\",\n  \"pytest-memray\",\n  \"pytest-playwright\",\n  \"pytest-print\",\n]\n</code></pre> <p>The following is the default configuration:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.hatch-test]\ndependencies = [\n  \"coverage-enable-subprocess==1.0\",\n  \"coverage[toml]~=7.4\",\n  \"pytest~=8.1\",\n  \"pytest-mock~=3.12\",\n  \"pytest-randomly~=3.15\",\n  \"pytest-rerunfailures~=14.0\",\n  \"pytest-xdist[psutil]~=3.5\",\n]\n</code></pre> <pre><code>[envs.hatch-test]\ndependencies = [\n  \"coverage-enable-subprocess==1.0\",\n  \"coverage[toml]~=7.4\",\n  \"pytest~=8.1\",\n  \"pytest-mock~=3.12\",\n  \"pytest-randomly~=3.15\",\n  \"pytest-rerunfailures~=14.0\",\n  \"pytest-xdist[psutil]~=3.5\",\n]\n</code></pre>"},{"location":"config/internal/testing/#matrix","title":"Matrix","text":"<p>You can override the default series of matrices:</p>  pyproject.toml hatch.toml <pre><code>[[tool.hatch.envs.hatch-test.matrix]]\npython = [\"3.13\", \"3.12\", \"3.11\", \"3.10\", \"3.9\", \"3.8\"]\n</code></pre> <pre><code>[[envs.hatch-test.matrix]]\npython = [\"3.13\", \"3.12\", \"3.11\", \"3.10\", \"3.9\", \"3.8\"]\n</code></pre>"},{"location":"config/internal/testing/#scripts","title":"Scripts","text":"<p>If you want to change the default commands that are executed, you can override the scripts. The following default scripts must be redefined:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.hatch-test.scripts]\nrun = \"pytest{env:HATCH_TEST_ARGS:} {args}\"\nrun-cov = \"coverage run -m pytest{env:HATCH_TEST_ARGS:} {args}\"\ncov-combine = \"coverage combine\"\ncov-report = \"coverage report\"\n</code></pre> <pre><code>[envs.hatch-test.scripts]\nrun = \"pytest{env:HATCH_TEST_ARGS:} {args}\"\nrun-cov = \"coverage run -m pytest{env:HATCH_TEST_ARGS:} {args}\"\ncov-combine = \"coverage combine\"\ncov-report = \"coverage report\"\n</code></pre> <p>The <code>run</code> script is the default behavior while the <code>run-cov</code> script is used instead when measuring code coverage. The <code>cov-combine</code> script runs after all tests complete when measuring code coverage, as well as the <code>cov-report</code> script when not using the <code>--cover-quiet</code> flag.</p> <p>Note</p> <p>The <code>HATCH_TEST_ARGS</code> environment variable is how the <code>test</code> command's flags are translated and internally populated without affecting the user's arguments. This is also the way that extra arguments are passed.</p>"},{"location":"config/internal/testing/#installer","title":"Installer","text":"<p>By default, UV is enabled. You may disable that behavior as follows:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.hatch-test]\ninstaller = \"pip\"\n</code></pre> <pre><code>[envs.hatch-test]\ninstaller = \"pip\"\n</code></pre>"},{"location":"history/hatch/","title":"Hatch history","text":"<p>All notable changes to Hatch will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"history/hatch/#unreleased","title":"Unreleased","text":"<p>Changed:</p> <ul> <li>Environment type plugins are now no longer expected to support a pseudo-build environment as any environment now may be used for building. The following methods have been removed: <code>build_environment</code>, <code>build_environment_exists</code>, <code>run_builder</code>, <code>construct_build_command</code></li> </ul> <p>Added:</p> <ul> <li>The <code>version</code> and <code>project metadata</code> commands now support projects that do not use Hatchling as the build backend</li> <li>The <code>version</code> command accepts a <code>--force</code> option, allowing for downgrades when an explicit version number is given.</li> <li>Build environments can now be configured, the default build environment is <code>hatch-build</code></li> <li>The environment interface now has the following methods and properties in order to better support builds on remote machines: <code>project_root</code>, <code>sep</code>, <code>pathsep</code>, <code>fs_context</code></li> <li>Bump the minimum supported version of <code>packaging</code> to 24.2</li> </ul>"},{"location":"history/hatch/#hatch-v1.13.0","title":"1.13.0 - 2024-10-13","text":"<p>Added:</p> <ul> <li>Support managing Python 3.13 distributions</li> </ul>"},{"location":"history/hatch/#hatch-v1.12.0","title":"1.12.0 - 2024-05-28","text":"<p>Changed:</p> <ul> <li>The <code>run</code>/<code>env run</code> and <code>test</code> commands now treat inclusion variable options as an intersection rather than a union to allow for specific targeting of environments</li> </ul> <p>Added:</p> <ul> <li>Add ability to control the source of Python distributions</li> <li>Upgrade Ruff to 0.4.5</li> <li>Upgrade PyApp to 0.22.0 for binary builds</li> </ul> <p>Fixed:</p> <ul> <li>The <code>fmt</code> command no longer hides the commands that are being executed</li> <li>Add default timeout for network requests, useful when installing Python distributions</li> <li>Fix syntax highlighting contrast for the <code>config show</code> command</li> </ul>"},{"location":"history/hatch/#hatch-v1.11.1","title":"1.11.1 - 2024-05-23","text":"<p>Added:</p> <ul> <li>Add official GitHub Action for installing Hatch</li> </ul> <p>Fixed:</p> <ul> <li>Fix <code>terminal.styles.spinner</code> configuration</li> <li>Fix entry points in the pre-built distributions that binaries use</li> </ul>"},{"location":"history/hatch/#hatch-v1.11.0","title":"1.11.0 - 2024-05-14","text":"<p>Added:</p> <ul> <li>Upgrade PyApp to 0.21.1 for binary builds</li> </ul> <p>Fixed:</p> <ul> <li>On Linux, install the highest compatible Python distribution variant based on CPU architecture rather than assuming recent hardware</li> </ul>"},{"location":"history/hatch/#hatch-v1.10.0","title":"1.10.0 - 2024-05-02","text":"<p>Changed:</p> <ul> <li>The <code>run</code>/<code>env run</code>, <code>fmt</code> and <code>shell</code> commands now only change the current working directory to the project root if not already inside the project</li> <li>The <code>shell</code> command now accepts a single argument to specify the environment to enter which overrides the standard choice mechanisms. The arguments determining shell options have been converted to flags.</li> </ul> <p>Added:</p> <ul> <li>Add <code>test</code> command</li> <li>The <code>run</code> command can now execute scripts that define inline metadata for dependencies and Python version constraints</li> <li>The <code>virtual</code> environment type now supports the ability to use UV in place of pip &amp; virtualenv</li> <li>Add <code>self report</code> command for submitting pre-populated bug reports to GitHub</li> <li>The reserved environment used for static analysis is now completely configurable</li> <li>Add the following methods to the <code>environment</code> interface for complete control over output during life cycle management: <code>app_status_creation</code>, <code>app_status_pre_installation</code>, <code>app_status_post_installation</code>, <code>app_status_project_installation</code>, <code>app_status_dependency_state_check</code>, <code>app_status_dependency_installation_check</code>, <code>app_status_dependency_synchronization</code></li> <li>Add binaries for 32-bit versions of Windows</li> <li>Read configuration from any <code>~/.pypirc</code> file for the <code>index</code> publisher</li> <li>Use the Git user as the default username for new project URL metadata</li> <li>Add <code>HATCH_DEBUG</code> environment variable that when enabled will show local variables in the case of unhandled tracebacks</li> <li>The <code>env show</code> command now outputs data about all internal environments when using the <code>--json</code> flag</li> <li>Upgrade default CPython distributions to 20240415</li> <li>Upgrade default PyPy distributions to 7.3.15</li> <li>Upgrade Ruff to 0.4.2</li> <li>Upgrade PyApp to 0.19.0 for binary builds</li> <li>Bump the minimum supported version of Hatchling to 1.24.2</li> <li>Bump the minimum supported version of virtualenv to 20.26.1</li> </ul> <p>Fixed:</p> <ul> <li>Maintain consistent data paths for case insensitive file systems</li> <li>When projects derive dependencies from metadata hooks, there is now by default a status indicator for when the hooks are executed for better responsiveness</li> <li>Properly support projects with a <code>pyproject.toml</code> file but no <code>project</code> table e.g. applications</li> <li>Fix the <code>fmt</code> command when automatically installing plugin dependencies</li> <li>Fix dependency inheritance for the template of the <code>types</code> environment for new projects</li> <li>Fix warnings related to tar file extraction on Python 3.12+ when unpacking Python distributions for installation</li> <li>De-select Ruff rule <code>E501</code> for the <code>fmt</code> command by default since it conflicts with the formatter</li> <li>Fix colored output from build targets on the first run (build environment creation status indicator issue)</li> <li>Set the <code>packaging</code> dependency version as <code>&gt;=23.2</code> to avoid its URL validation which can conflict with context formatting</li> <li>Fix the exit code when there happens to be an unhandled exception</li> <li>No longer capture both stdout and stderr streams when parsing metadata payloads from build environments</li> <li>Fix the <code>README.md</code> file template for new projects to avoid Markdown linting issues</li> </ul>"},{"location":"history/hatch/#hatch-v1.9.7","title":"1.9.7 - 2024-04-24","text":"<p>Fixed:</p> <ul> <li>Limit the maximum version of virtualenv due to a backward incompatible change</li> <li>Upgrade PyApp to 0.12.0 for binary builds</li> </ul>"},{"location":"history/hatch/#hatch-v1.9.4","title":"1.9.4 - 2024-03-12","text":"<p>Fixed:</p> <ul> <li>Limit the maximum version of Hatchling in anticipation of backward incompatible changes</li> </ul>"},{"location":"history/hatch/#hatch-v1.9.3","title":"1.9.3 - 2024-01-25","text":"<p>Fixed:</p> <ul> <li>Fix loading of local plugins to account for newly released versions of a dependency</li> </ul>"},{"location":"history/hatch/#hatch-v1.9.2","title":"1.9.2 - 2024-01-21","text":"<p>Fixed:</p> <ul> <li>Fix the default token variable name for publishing to PyPI</li> </ul>"},{"location":"history/hatch/#hatch-v1.9.1","title":"1.9.1 - 2023-12-25","text":"<p>Fixed:</p> <ul> <li>Ensure that the <code>dependency_hash</code> method of the <code>environment</code> interface is called after <code>sync_dependencies</code> for cases where the hash is only known at that point, such as for dependency lockers</li> <li>Only acknowledge the <code>HATCH_PYTHON_VARIANT_*</code> environment variables for Python resolution for supported platforms and architectures</li> <li>Fix Python resolution when there are metadata hooks with unsatisfied dependencies</li> </ul>"},{"location":"history/hatch/#hatch-v1.9.0","title":"1.9.0 - 2023-12-19","text":"<p>Changed:</p> <ul> <li>Environments prefixed by <code>hatch-</code> are now considered internal and used for special purposes such as configuration for static analysis</li> </ul> <p>Added:</p> <ul> <li>Enable docstring formatting by default for static analysis</li> <li>Allow for overriding config of internal environments</li> <li>Concretely state the expected API contract for the environment interface methods <code>find</code> and <code>check_compatibility</code></li> <li>Upgrade Ruff to 0.1.8</li> <li>Bump the minimum supported version of Hatchling to 1.21.0</li> </ul> <p>Fixed:</p> <ul> <li>Ignore a project's Python requirement for environments where the project is not installed</li> <li>When not persisting config for static analysis, properly manage internal settings when Ruff's top level table already exists</li> <li>Ignore compatibility checks when environments have already been created, significantly improving performance of environment usage</li> <li>Properly allow overriding of the <code>path</code> option for the <code>virtual</code> environment type</li> <li>Fix nushell activation on non-Windows systems</li> </ul>"},{"location":"history/hatch/#hatch-v1.8.1","title":"1.8.1 - 2023-12-14","text":"<p>Fixed:</p> <ul> <li>Fix regression in calling subprocesses with updated PATH</li> <li>Fix automatic installation of environment plugins when running as a standalone binary</li> <li>Change default location of Python installations</li> </ul>"},{"location":"history/hatch/#hatch-v1.8.0","title":"1.8.0 - 2023-12-11","text":"<p>Changed:</p> <ul> <li>Drop support for Python 3.7</li> <li>The <code>get_build_process</code> method of the <code>environment</code> interface has been removed; plugins should use the new <code>run_builder</code> method instead</li> <li>Remove <code>pyperclip</code> dependency and the <code>--copy</code> flag of the <code>config find</code> command</li> <li>When running the <code>build</code> command all output from builders is now displayed as-is in real time without the stripping of ANSI codes</li> <li>Version information (for Hatch itself) is now derived from Git</li> </ul> <p>Added:</p> <ul> <li>Support Python 3.12</li> <li>Add installers and standalone binaries</li> <li>Add the ability to manage Python installations</li> <li>Add <code>fmt</code> command</li> <li>The <code>virtual</code> environment type can now automatically download requested versions of Python that are not installed</li> <li>Add <code>dependency_hash</code> method to the <code>environment</code> interface</li> <li>The state of installed dependencies for environments is saved as metadata so if dependency definitions have not changed then no checking is performed, which can be computationally expensive</li> <li>The <code>build</code> command now supports backends other than Hatchling</li> <li>Allow the use of <code>features</code> for environments when <code>skip-install</code> is enabled</li> <li>The default is now <code>__token__</code> when prompting for a username for the <code>publish</code> command</li> <li>Add a new <code>run_builder</code> method to the <code>environment</code> interface</li> <li>Bump the minimum supported version of Hatchling to 1.19.0</li> <li>Bump the minimum supported version of <code>click</code> to 8.0.6</li> </ul> <p>Fixed:</p> <ul> <li>Fix nushell activation</li> <li>Better handling of flat storage directory hierarchies for the <code>virtual</code> environment type</li> <li>Display useful information when running the <code>version</code> command outside of a project rather than erroring</li> <li>Fix the <code>project metadata</code> command by only capturing stdout from the backend</li> <li>Properly support Google Artifact Registry</li> <li>Fix parsing dependencies for environments when warnings are emitted</li> </ul>"},{"location":"history/hatch/#hatch-v1.7.0","title":"1.7.0 - 2023-04-03","text":"<p>Changed:</p> <ul> <li>The <code>src-layout</code> project template option is now enabled by default</li> <li>Non-critical output now goes to stderr</li> </ul> <p>Added:</p> <ul> <li>Add <code>tool.hatch.env.requires</code> configuration to automatically install dependencies for environment and environment collector plugins</li> <li>Add <code>custom</code> environment collector</li> <li>Improve syncing of dependencies provided through Git direct references</li> <li>Add <code>isolated_data_directory</code> attribute to the environment interface</li> <li>Increase the timeout for and add retries to the <code>index</code> publisher</li> <li>Expand home and environment variables in configured cache and data directories</li> <li>Improve readability of exceptions</li> <li>Update project templates</li> <li>Bump the minimum supported version of Hatchling to 1.14.0</li> </ul> <p>Fixed:</p> <ul> <li>Fix displaying the version with the <code>version</code> command when the version is static and build dependencies are unmet</li> <li>Fix build environments for the <code>virtual</code> environment type when storing within a relative path</li> <li>Work around System Integrity Protection on macOS when running commands</li> <li>Allow setuptools metadata migration for projects without <code>setup.py</code> if <code>setup.cfg</code> is present</li> <li>Handle additional edge cases for setuptools metadata migration</li> <li>Support boolean values for the <code>config set</code> command</li> </ul>"},{"location":"history/hatch/#hatch-v1.6.3","title":"1.6.3 - 2022-10-24","text":"<p>Fixed:</p> <ul> <li>Fix <code>version</code> command when the version is dynamic and build dependencies are unmet</li> </ul>"},{"location":"history/hatch/#hatch-v1.6.2","title":"1.6.2 - 2022-10-20","text":"<p>Fixed:</p> <ul> <li>Fix getting dynamic metadata from hooks for environments when dependencies are not dynamic</li> </ul>"},{"location":"history/hatch/#hatch-v1.6.1","title":"1.6.1 - 2022-10-16","text":"<p>Fixed:</p> <ul> <li>Computing the path to the user's home directory now gracefully falls back to <code>~</code> when it cannot be determined</li> </ul>"},{"location":"history/hatch/#hatch-v1.6.0","title":"1.6.0 - 2022-10-08","text":"<p>Changed:</p> <ul> <li>The <code>run_shell_command</code> environment interface method now accepts arbitrary <code>subprocess.Popen</code> keyword arguments. This is not strictly breaking, but will be utilized in upcoming features.</li> <li>The internal directory structure for storing <code>virtual</code> environments is now more nested. This is not breaking, but any local environments will be created anew.</li> </ul> <p>Added:</p> <ul> <li>Add <code>project</code> command group to view details about the project like PEP 621 metadata</li> <li>Better support for auto-detection of environments by tools like Visual Studio Code now that the storage directory of <code>virtual</code> environments will be flat if Hatch's configured <code>virtual</code> environment directory resides somewhere within the project root or if it is set to a <code>.virtualenvs</code> directory within the user's home directory</li> <li>Build environments for the <code>virtual</code> environment type are now cached for improved performance</li> <li>Add <code>build_environment_exists</code> method to the environment interface for implementations that cache the build environment</li> <li>Add <code>path</code> option to the <code>virtual</code> environment type</li> <li>Add <code>--initialize-auth</code> flag to the <code>index</code> publisher to allow for the saving of authentication information before publishing</li> <li>Support Bash on Windows for the <code>shell</code> command</li> <li>The <code>setuptools</code> migration script no longer modifies the formatting of existing <code>pyproject.toml</code> configuration</li> <li>Bump the minimum supported version of Hatchling to 1.11.0</li> </ul> <p>Fixed:</p> <ul> <li>Environments now respect dynamically defined project dependencies</li> <li>The <code>dep hash</code> and all <code>dep show</code> commands now respect dynamically defined project dependencies</li> <li>The <code>env show</code>, <code>dep hash</code>, and all <code>dep show</code> commands now honor context formatting</li> <li>Fix matrix variable inclusion filtering of the <code>run</code> and <code>env run</code> commands when there are multiple possible variables</li> <li>Build environment compatibility is now checked before use</li> <li>Decreasing verbosity now has no affect on output that should always be displayed</li> <li>Handle more edge cases in the <code>setuptools</code> migration script</li> <li>Environments now respect user defined environment variables for context formatting</li> <li>Update the scripts in the generated test environment template for new projects to reflect the documentation</li> <li>Allow <code>extra-dependencies</code> in environment overrides</li> <li>Depend on <code>packaging</code> explicitly rather than relying on it being a transitive dependency of Hatchling</li> </ul>"},{"location":"history/hatch/#hatch-v1.5.0","title":"1.5.0 - 2022-08-28","text":"<p>Added:</p> <ul> <li>The <code>index</code> publisher now recognizes repository-specific options</li> <li>Add the <code>--ignore-compat</code> flag to the <code>env run</code> command</li> <li>Setting the <code>HATCH_PYTHON</code> environment variable to <code>self</code> will now force the use of the Python executable Hatch is running on for <code>virtual</code> environment creation</li> </ul> <p>Fixed:</p> <ul> <li>Fix the <code>--force-continue</code> flag of the <code>env run</code> command</li> <li>Handle more edge cases in the <code>setuptools</code> migration script</li> </ul>"},{"location":"history/hatch/#hatch-v1.4.2","title":"1.4.2 - 2022-08-16","text":"<p>Fixed:</p> <ul> <li>Fix check for updating static versions with the <code>version</code> command when metadata hooks are in use</li> </ul>"},{"location":"history/hatch/#hatch-v1.4.1","title":"1.4.1 - 2022-08-13","text":"<p>Fixed:</p> <ul> <li>Fix non-detached inheritance disabling for environments</li> </ul>"},{"location":"history/hatch/#hatch-v1.4.0","title":"1.4.0 - 2022-08-06","text":"<p>Added:</p> <ul> <li>The default Python for <code>virtual</code> environments now checks PATH before using the one Hatch is running on</li> <li>Values for environment <code>env-vars</code> now support context formatting</li> <li>Add <code>name</code> override for environments to allow for regular expression matching</li> <li>The <code>index</code> publisher now better supports non-PyPI indices</li> <li>Add certificate options to the <code>index</code> publisher</li> <li>Display waiting text when checking dependencies and removing environments</li> <li>Display help text the first time the <code>shell</code> command is executed</li> <li>Update project templates with Python 3.11 and the latest versions of various GitHub Actions</li> <li>Add support for Almquist (<code>ash</code>) shells</li> <li>Add <code>hyperlink</code> as a dependency for better handling of package index URLs</li> <li>Bump the minimum supported version of <code>virtualenv</code> to 20.16.2</li> <li>Bump the minimum supported version of <code>tomlkit</code> to 0.11.1</li> </ul> <p>Fixed:</p> <ul> <li>Acknowledge <code>extra-dependencies</code> for the <code>env show</code> command</li> <li>Fix locating executables within virtual environments on Debian</li> <li>Fix managing the terminal size inside the <code>shell</code> command</li> <li>Fix default code coverage file omission for the <code>src-layout</code> project template option</li> </ul>"},{"location":"history/hatch/#hatch-v1.3.1","title":"1.3.1 - 2022-07-11","text":"<p>Fixed:</p> <ul> <li>Support <code>-h</code>/<code>--help</code> flag for the <code>run</code> command</li> </ul>"},{"location":"history/hatch/#hatch-v1.3.0","title":"1.3.0 - 2022-07-10","text":"<p>Changed:</p> <ul> <li>Rename the default publishing plugin from <code>pypi</code> to the more generic <code>index</code></li> </ul> <p>Added:</p> <ul> <li>Support the absence of <code>pyproject.toml</code> files, as is the case for apps and non-Python projects</li> <li>Hide scripts that start with an underscore for the <code>env show</code> command by default</li> <li>Ignoring the exit codes of commands by prefixing with hyphens now works with entire named scripts</li> <li>Add a way to require confirmation for publishing</li> <li>Add <code>--force-continue</code> flag to the <code>env run</code> command</li> <li>Make tracebacks colorful and less verbose</li> <li>When shell configuration has not been defined, attempt to use the current shell based on parent processes before resorting to the defaults</li> <li>The shell name <code>pwsh</code> is now an alias for <code>powershell</code></li> <li>Remove <code>atomicwrites</code> dependency</li> <li>Relax constraint on <code>userpath</code> dependency</li> <li>Bump the minimum supported version of Hatchling to 1.4.1</li> </ul> <p>Fixed:</p> <ul> <li>Keep environments in sync with the dependencies of the selected features</li> <li>Use <code>utf-8</code> for all files generated for new projects</li> <li>Escape special characters Git may return in the user name when writing generated files for new projects</li> <li>Normalize the package name to lowercase in <code>setuptools</code> migration script</li> <li>Fix parsing of source distributions during publishing</li> </ul>"},{"location":"history/hatch/#hatch-v1.2.1","title":"1.2.1 - 2022-05-30","text":"<p>Fixed:</p> <ul> <li>Fix handling of top level <code>data_files</code> in <code>setuptools</code> migration script</li> </ul>"},{"location":"history/hatch/#hatch-v1.2.0","title":"1.2.0 - 2022-05-22","text":"<p>Changed:</p> <ul> <li>The <code>enter_shell</code> environment plugin method now accepts an additional <code>args</code> parameter</li> </ul> <p>Added:</p> <ul> <li>Allow context string formatting for environment dependencies</li> <li>Add environment context string formatting fields <code>env_name</code>, <code>env_type</code>, <code>matrix</code>, <code>verbosity</code>, and <code>args</code></li> <li>Support overriding the default arguments used to spawn shells on non-Windows systems</li> <li>Bump the minimum supported version of Hatchling to 1.3.0</li> </ul> <p>Fixed:</p> <ul> <li>Improve <code>setuptools</code> migration script</li> </ul>"},{"location":"history/hatch/#hatch-v1.1.2","title":"1.1.2 - 2022-05-20","text":"<p>Fixed:</p> <ul> <li>Bump the minimum supported version of Hatchling to 1.2.0</li> <li>Update project metadata to reflect support for Python 3.11</li> </ul>"},{"location":"history/hatch/#hatch-v1.1.1","title":"1.1.1 - 2022-05-12","text":"<p>Fixed:</p> <ul> <li>Fix <code>setuptools</code> migration script for non-Windows systems</li> </ul>"},{"location":"history/hatch/#hatch-v1.1.0","title":"1.1.0 - 2022-05-12","text":"<p>Changed:</p> <ul> <li>In order to simplify the implementation of command execution for environment plugins, the <code>run_shell_commands</code> method has been replaced by the singular <code>run_shell_command</code>. A new <code>command_context</code> method has been added to more easily satisfy complex use cases.</li> <li>The <code>finalize_command</code> environment plugin method has been removed in favor of the newly introduced context formatting functionality.</li> </ul> <p>Added:</p> <ul> <li>Add context formatting functionality i.e. the ability to insert values into configuration like environment variables and command line arguments</li> <li>Any verbosity for command execution will now always display headers, even for single environments</li> <li>Every executed command is now displayed when running multiple commands or when verbosity is enabled</li> <li>Similar to <code>make</code>, ignore the exit code of executed commands that start with <code>-</code> (a hyphen)</li> <li>Add ability for the <code>--init</code> flag of the <code>new</code> command to automatically migrate <code>setuptools</code> configuration</li> <li>Update project metadata to reflect the adoption by PyPA and production stability</li> </ul>"},{"location":"history/hatch/#hatch-v1.0.0","title":"1.0.0 - 2022-04-28","text":"<p>This is the first stable release of Hatch v1, a complete rewrite. Enjoy!</p>"},{"location":"history/hatchling/","title":"Hatchling history","text":"<p>All notable changes to Hatchling will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"history/hatchling/#unreleased","title":"Unreleased","text":""},{"location":"history/hatchling/#hatchling-v1.27.0","title":"1.27.0 - 2024-11-26","text":"<p>Added:</p> <ul> <li>Update the default version of core metadata to 2.4</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.26.3","title":"1.26.3 - 2024-11-12","text":"<p>Fixed:</p> <ul> <li>Support an old import path that is still used by some consumers like Hatch</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.26.2","title":"1.26.2 - 2024-11-12","text":"<p>Fixed:</p> <ul> <li>Back-populate string <code>license</code> fields (<code>License-Expression</code>) for core metadata versions prior to 2.4</li> <li>Remove the <code>License-Expression</code> and <code>License-Files</code> core metadata from version 2.2 that was missed in the previous minor release</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.26.1","title":"1.26.1 - 2024-11-10","text":"<p>Fixed:</p> <ul> <li>Add backward compatibility for the old <code>license-files</code> metadata field</li> <li>Support an old import path that is still used by some consumers like Hatch</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.26.0","title":"1.26.0 - 2024-11-10","text":"<p>Changed:</p> <ul> <li>The <code>license-files</code> metadata field has been updated to the latest spec and is now just an array of glob patterns</li> </ul> <p>Added:</p> <ul> <li>Support version 2.4 of core metadata for the <code>wheel</code> and <code>sdist</code> targets</li> <li>Add <code>HATCH_METADATA_CLASSIFIERS_NO_VERIFY</code> environment variable to disable trove classifier verification</li> <li>Add <code>.pixi</code> to the list of directories that cannot be traversed</li> <li>Bump the minimum supported version of <code>packaging</code> to 24.2</li> </ul> <p>Fixed:</p> <ul> <li>No longer write package metadata for license expressions and files for versions of core metadata prior to 2.4</li> <li>Properly enable Zip64 support for the <code>wheel</code> target</li> <li>Properly ignore parent <code>.gitingore</code> files when the project root matches one of the patterns</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.25.0","title":"1.25.0 - 2024-06-22","text":"<p>Changed:</p> <ul> <li>The <code>macos-max-compat</code> option for the <code>wheel</code> target is now disabled by default and will be removed in a future release</li> </ul> <p>Added:</p> <ul> <li>Artifacts for the <code>wheel</code> and <code>sdist</code> targets now have their permission bits normalized</li> </ul> <p>Fixed:</p> <ul> <li>Ignore <code>manylinux</code>/<code>musllinux</code> tags for the <code>wheel</code> target artifact name when enabling the <code>infer_tag</code> build data</li> <li>The <code>wheel</code> target build data <code>infer_tag</code> when enabled now respects the <code>MACOSX_DEPLOYMENT_TARGET</code> environment variable</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.24.2","title":"1.24.2 - 2024-04-22","text":"<p>Fixed:</p> <ul> <li>Add <code>.venv</code> to the list of directories that cannot be traversed</li> <li>Output from the core Application utility now writes to stderr</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.24.1","title":"1.24.1 - 2024-04-18","text":"<p>Fixed:</p> <ul> <li>Maintain file permissions for <code>shared-scripts</code> option/<code>shared_scripts</code> build data of the <code>wheel</code> target</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.24.0","title":"1.24.0 - 2024-04-16","text":"<p>Added:</p> <ul> <li>Add <code>shared_data</code> and <code>shared_scripts</code> build data for the <code>wheel</code> target</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.23.0","title":"1.23.0 - 2024-04-14","text":"<p>Added:</p> <ul> <li>Add <code>shared-scripts</code> option for the <code>wheel</code> target</li> </ul> <p>Fixed:</p> <ul> <li>Support recursive optional dependencies</li> <li>Set the <code>packaging</code> dependency version as <code>&gt;=23.2</code> to avoid its URL validation which can conflict with context formatting</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.22.5","title":"1.22.5 - 2024-04-04","text":"<p>Fixed:</p> <ul> <li>Fix reading metadata from source distributions when fields are dynamic but not part of core metadata like entry points</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.22.4","title":"1.22.4 - 2024-03-23","text":"<p>Fixed:</p> <ul> <li>Only read source distribution metadata for fields that are explicitly defined as dynamic</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.22.3","title":"1.22.3 - 2024-03-19","text":"<p>Fixed:</p> <ul> <li>Fix the <code>custom</code> build hook when using dynamic dependencies</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.22.2","title":"1.22.2 - 2024-03-16","text":"<p>Fixed:</p> <ul> <li>Fix regression when loading metadata from source distributions</li> <li>Fix metadata hooks when building wheels from source distributions</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.22.1","title":"1.22.1 - 2024-03-16","text":"<p>Fixed:</p> <ul> <li>Update the default version of core metadata to 2.3</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.22.0","title":"1.22.0 - 2024-03-16","text":"<p>Deprecated:</p> <ul> <li>The <code>app</code> build target has been renamed to <code>binary</code> to reduce ambiguity with the name of an upcoming feature. The former name will still be usable for several minor releases.</li> </ul> <p>Added:</p> <ul> <li>Metadata for the <code>wheel</code> target now defaults to the <code>PKG-INFO</code> metadata within source distributions</li> <li>Add <code>dependencies</code> method to the build hook interface so that hooks can themselves dynamically define dependencies</li> <li>Update the default version of core metadata to 2.2</li> <li>Update SPDX license information to version 3.23</li> <li>Improve error message for when the default heuristics for wheel file inclusion fail</li> </ul> <p>Fixed:</p> <ul> <li>Properly support core metadata version 2.2</li> <li>Remove <code>editables</code> as a direct dependency</li> <li>Fix default wheel tag when the supported Python version declaration is strict</li> <li>Load VCS ignore patterns first so that whitelisted patterns can be excluded by project configuration</li> <li>Don't consider VCS ignore files that are outside of the VCS boundary</li> <li>The <code>sdist</code> build target now gracefully ignores UNIX socket files</li> <li>Begin ignoring certain files ubiquitously, like <code>.DS_Store</code> on macOS</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.21.1","title":"1.21.1 - 2024-01-25","text":"<p>Fixed:</p> <ul> <li>Fix loading of local plugins to account for newly released versions of a dependency</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.21.0","title":"1.21.0 - 2023-12-18","text":"<p>Added:</p> <ul> <li>Add <code>parent</code> context modifier for path fields</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.20.0","title":"1.20.0 - 2023-12-13","text":"<p>Added:</p> <ul> <li>Add <code>bypass-selection</code> option to the <code>wheel</code> build target to allow for empty (metadata-only) wheels</li> </ul> <p>Fixed:</p> <ul> <li>Fix regression in 1.19.1 that allowed <code>exclude</code> to count toward inclusion selection, thus bypassing the default inclusion selection heuristics</li> <li>Fix writing optional dependency core metadata in situations where there are multiple environment markers</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.19.1","title":"1.19.1 - 2023-12-12","text":"<p>Fixed:</p> <ul> <li>Add better error message when the <code>wheel</code> build target cannot determine what to ship</li> <li>Consider forced inclusion patterns and build-time artifacts as file selection since some build hooks generate the entire wheel contents without user configuration</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.19.0","title":"1.19.0 - 2023-12-11","text":"<p>Changed:</p> <ul> <li>An error will now be raised if a force-included path does not exist</li> <li>An error will now be raised for the <code>wheel</code> build target if no file selection options are defined</li> </ul> <p>Added:</p> <ul> <li>Officially support Python 3.12</li> <li>Allow using an empty string for the <code>sources</code> option to add a prefix to distribution paths</li> </ul> <p>Fixed:</p> <ul> <li>Properly handle non-zero version epoch for the <code>standard</code> version scheme</li> <li>Fix the <code>wheel</code> build target for case insensitive file systems when the project metadata name does not match the directory name on disk</li> <li>The <code>app</code> build target no longer has suppressed output</li> <li>Prevent duplicate paths when projects require the <code>sources</code> option while build hooks overwrite included paths</li> <li>Properly escape spaces for URI context formatting</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.18.0","title":"1.18.0 - 2023-06-12","text":"<p>Changed:</p> <ul> <li>Drop support for Python 3.7</li> </ul> <p>Added:</p> <ul> <li>Update the list of directories that are always excluded for builds</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.17.1","title":"1.17.1 - 2023-06-03","text":"<p>Fixed:</p> <ul> <li>Fix dev mode when the project has symlinks and file inclusion is defined with the <code>packages</code> or <code>only-include</code> options</li> <li>Change the name of generated PTH files for dev mode so they come first lexicographically and therefore load first</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.17.0","title":"1.17.0 - 2023-05-12","text":"<p>Added:</p> <ul> <li>The <code>app</code> build target now embeds the project version in the name of binaries</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.16.1","title":"1.16.1 - 2023-05-11","text":"<p>Fixed:</p> <ul> <li>Fix determining the built executable path for the <code>app</code> build target option when using a local copy of PyApp when there is an explicit target triple set</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.16.0","title":"1.16.0 - 2023-05-11","text":"<p>Added:</p> <ul> <li>Add <code>app</code> build target option to build using a local copy of the PyApp repository</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.15.0","title":"1.15.0 - 2023-05-09","text":"<p>Added:</p> <ul> <li>Add <code>app</code> build target</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.14.1","title":"1.14.1 - 2023-04-23","text":"<p>Fixed:</p> <ul> <li>Fix internal archive root naming for the <code>sdist</code> target when <code>strict-naming</code> is disabled to match the file name in order to support the expectation of some frontends</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.14.0","title":"1.14.0 - 2023-04-02","text":"<p>Added:</p> <ul> <li>Add <code>trove-classifiers</code> as a dependency</li> </ul> <p>Fixed:</p> <ul> <li>Properly normalize metadata descriptions that contain line breaks</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.13.0","title":"1.13.0 - 2023-02-09","text":"<p>Added:</p> <ul> <li>Update the set of known trove classifiers to version 2023.2.8</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.12.2","title":"1.12.2 - 2023-01-05","text":"<p>Fixed:</p> <ul> <li>Add <code>macos-max-compat</code> option to the <code>wheel</code> target that is enabled by default to support the latest version 22.0 of the <code>packaging</code> library</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.12.1","title":"1.12.1 - 2022-12-31","text":"<p>Fixed:</p> <ul> <li>Fix minor regression in the PEP 517/660 function signatures that was discovered by Fedora</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.12.0","title":"1.12.0 - 2022-12-30","text":"<p>Added:</p> <ul> <li>Improve readability of exceptions</li> <li>Add <code>extra_metadata</code> build data to the <code>wheel</code> target</li> <li>Retroactively support <code>License-Expression</code> core metadata starting at version 2.1</li> <li>Add more type hints</li> <li>Update the set of known trove classifiers to version 2022.12.22</li> <li>Update SPDX license information to version 3.19</li> <li>Store Hatchling's metadata in <code>pyproject.toml</code></li> </ul> <p>Fixed:</p> <ul> <li>Acknowledge the <code>ARCHFLAGS</code> environment variable on macOS for the <code>wheel</code> target when build hooks set the <code>infer_tag</code> build data to <code>true</code></li> <li>Fix dependency checking when encountering broken distributions</li> <li>Fix the <code>support-legacy</code> option for the <code>sdist</code> target when using a src-layout project structure</li> <li>Remove unnecessary encoding declaration in the default template for the <code>version</code> build hook</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.11.1","title":"1.11.1 - 2022-10-19","text":"<p>Fixed:</p> <ul> <li>Fix default file selection behavior of the <code>wheel</code> target when there is a single top-level module</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.11.0","title":"1.11.0 - 2022-10-08","text":"<p>Added:</p> <ul> <li>Add <code>env</code> version source to retrieve the version from an environment variable</li> <li>Add <code>validate-bump</code> option to the <code>standard</code> version scheme</li> </ul> <p>Fixed:</p> <ul> <li>Use proper CSV formatting for the <code>RECORD</code> metadata file of the <code>wheel</code> target to avoid warnings during installation by <code>pip</code> if, for example, file names contain commas</li> <li>Fix installations with pip for build hooks that modify runtime dependencies</li> <li>Decreasing verbosity now has no affect on output that should always be displayed</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.10.0","title":"1.10.0 - 2022-09-18","text":"<p>Added:</p> <ul> <li>Add the following to the list of directories that cannot be traversed: <code>__pypackages__</code>, <code>.hg</code>, <code>.hatch</code>, <code>.tox</code>, <code>.nox</code></li> <li>Add deprecated option to allow ambiguous features</li> </ul> <p>Fixed:</p> <ul> <li>Improve tracking of dynamic metadata</li> <li>Fix core metadata for entries in <code>project.optional-dependencies</code> that use direct references</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.9.0","title":"1.9.0 - 2022-09-09","text":"<p>Changed:</p> <ul> <li>File pattern matching now more closely resembles Git's behavior</li> </ul> <p>Added:</p> <ul> <li>Implement a minimal version of <code>prepare_metadata_for_build_wheel</code> and <code>prepare_metadata_for_build_editable</code> for non-frontend tools that only need to inspect a project's metadata</li> <li>Add <code>metadata</code> command to view PEP 621 project metadata</li> <li>Improve error messages for SPDX license errors</li> <li>Retroactively support <code>License-File</code> for core metadata starting at version 2.1</li> <li>Bump the minimum supported version of <code>pathspec</code> to 0.10.1</li> </ul> <p>Fixed:</p> <ul> <li>Allow the valid non-SPDX <code>license</code> values <code>LicenseRef-Public-Domain</code> and <code>LicenseRef-Proprietary</code></li> <li>Show the help text of the CLI when no subcommand is selected</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.8.1","title":"1.8.1 - 2022-08-25","text":"<p>Fixed:</p> <ul> <li>Fix default file inclusion for <code>wheel</code> build targets when both the project name and package directory name are not normalized</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.8.0","title":"1.8.0 - 2022-08-16","text":"<p>Added:</p> <ul> <li>Add <code>get_known_classifiers</code> method to metadata hooks</li> </ul> <p>Fixed:</p> <ul> <li>Fix check for updating static versions with the <code>version</code> command when metadata hooks are in use</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.7.1","title":"1.7.1 - 2022-08-13","text":"<p>Fixed:</p> <ul> <li>Fix the value of the <code>relative_path</code> attribute of included files, that some build plugins may use, when selecting explicit paths</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.7.0","title":"1.7.0 - 2022-08-12","text":"<p>Added:</p> <ul> <li>Add <code>require-runtime-features</code> option for builders and build hooks</li> <li>Check for unknown trove classifiers</li> <li>Update SPDX license information to version 3.18</li> </ul> <p>Fixed:</p> <ul> <li>Add better error message for <code>wheel</code> target dev mode installations that define path rewrites with the <code>sources</code> option</li> <li>Note the <code>allow-direct-references</code> option in the relevant error messages</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.6.0","title":"1.6.0 - 2022-07-23","text":"<p>Changed:</p> <ul> <li>When no build targets are specified on the command line, now default to <code>sdist</code> and <code>wheel</code> targets rather than what happens to be defined in config</li> <li>The <code>code</code> version source now only supports files with known extensions</li> <li>Global build hooks now run before target-specific build hooks to better match expected behavior</li> </ul> <p>Added:</p> <ul> <li>The <code>code</code> version source now supports loading extension modules</li> <li>Add <code>search-paths</code> option for the <code>code</code> version source</li> </ul> <p>Fixed:</p> <ul> <li>Fix removing <code>sources</code> using an empty string value in the mapping</li> <li>The <code>strict-naming</code> option now also applies to the metadata directory of <code>wheel</code> targets</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.5.0","title":"1.5.0 - 2022-07-11","text":"<p>Added:</p> <ul> <li>Support the final draft of PEP 639</li> <li>Add <code>strict-naming</code> option for <code>sdist</code> and <code>wheel</code> targets</li> </ul> <p>Fixed:</p> <ul> <li>Project names are now stored in <code>sdist</code> and <code>wheel</code> target core metadata exactly as defined in <code>pyproject.toml</code> without normalization to allow control of how PyPI displays them</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.4.1","title":"1.4.1 - 2022-07-04","text":"<p>Fixed:</p> <ul> <li>Fix forced inclusion of important files like licenses for <code>sdist</code> targets when using the explicit selection options</li> <li>Don't sort project URL metadata so that the rendered order on PyPI can be controlled</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.4.0","title":"1.4.0 - 2022-07-03","text":"<p>Changed:</p> <ul> <li>The <code>packages</code> option uses the new <code>only-include</code> option to provide targeted inclusion, since that is desired most of the time. You can retain the old behavior by using the <code>include</code> and <code>sources</code> options together.</li> </ul> <p>Added:</p> <ul> <li>Support PEP 561 type hinting</li> <li>Add <code>version</code> build hook</li> <li>Add <code>only-include</code> option</li> <li>The <code>editable</code> version of <code>wheel</code> targets now respects the <code>force-include</code> option by default</li> <li>The <code>force-include</code> option now supports path rewriting with the <code>sources</code> option</li> <li>The <code>wheel</code> target <code>shared-data</code> and <code>extra-metadata</code> options now respect file selection options</li> <li>The <code>wheel</code> target now auto-detects single module layouts</li> <li>Improve performance by never entering directories that are guaranteed to be undesirable like <code>__pycache__</code> rather than excluding individual files within</li> <li>Update SPDX license information to version 3.17</li> </ul> <p>Fixed:</p> <ul> <li>Don't write empty entry points file for <code>wheel</code> targets if there are no entry points defined</li> <li>Allow metadata hooks to set the <code>version</code> in all cases</li> <li>Prevent duplicate file entries from inclusion when using the <code>force-include</code> option</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.3.1","title":"1.3.1 - 2022-05-30","text":"<p>Fixed:</p> <ul> <li>Better populate global variables for the <code>code</code> version source</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.3.0","title":"1.3.0 - 2022-05-22","text":"<p>Removed:</p> <ul> <li>Remove unused global <code>args</code> context string formatting field</li> </ul> <p>Added:</p> <ul> <li>Improve error messages for the <code>env</code> context string formatting field</li> </ul> <p>Fixed:</p> <ul> <li>Fix <code>uri</code> context string formatting modifier on Windows</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.2.0","title":"1.2.0 - 2022-05-20","text":"<p>Added:</p> <ul> <li>Allow context formatting for <code>project.dependencies</code> and <code>project.optional-dependencies</code></li> </ul>"},{"location":"history/hatchling/#hatchling-v1.1.0","title":"1.1.0 - 2022-05-19","text":"<p>Added:</p> <ul> <li>Add <code>uri</code> and <code>real</code> context string formatting modifiers for file system paths</li> </ul>"},{"location":"history/hatchling/#hatchling-v1.0.0","title":"1.0.0 - 2022-05-17","text":"<p>Changed:</p> <ul> <li>Drop support for Python 2</li> </ul> <p>Added:</p> <ul> <li>Improve error messaging for invalid versions</li> <li>Update project metadata to reflect support for Python 3.11</li> </ul>"},{"location":"history/hatchling/#hatchling-v0.25.1","title":"0.25.1 - 2022-06-14","text":"<p>Fixed:</p> <ul> <li>Fix support for Windows on Python 2 by removing its support for symlinks</li> </ul>"},{"location":"history/hatchling/#hatchling-v0.25.0","title":"0.25.0 - 2022-05-15","text":"<p>Added:</p> <ul> <li>Add <code>skip-excluded-dirs</code> build option</li> <li>Allow build data to add additional project dependencies for <code>wheel</code> and <code>sdist</code> build targets</li> <li>Add <code>force_include_editable</code> build data for the <code>wheel</code> build target</li> <li>Add <code>build_hooks</code> build data</li> <li>Add support for Mercurial's <code>.hgignore</code> files when using glob syntax</li> <li>Update project metadata to reflect the adoption by PyPA</li> </ul> <p>Fixed:</p> <ul> <li>Properly use underscores for the name of <code>force_include</code> build data</li> <li>No longer greedily skip excluded directories by default</li> </ul>"},{"location":"history/hatchling/#hatchling-v0.24.0","title":"0.24.0 - 2022-04-28","text":"<p>This is the initial public release of the Hatchling build system. Support for Python 2 will be dropped in version 1.</p>"},{"location":"how-to/config/dynamic-metadata/","title":"How to configure custom dynamic metadata","text":"<p>If you have project metadata that is not appropriate for static entry into <code>pyproject.toml</code> you will need to provide a custom metadata hook to apply such data during builds.</p> <p>Alternatives</p> <p>Dynamic metadata is a way to have a single source of truth that will be available at build time and at run time. Another way to achieve that is to enter the build data statically and then look up the same information dynamically in the program or package, using importlib.metadata.</p> <p>If the version field is the only metadata of concern, Hatchling provides a few built-in ways such as the <code>regex</code> version source and also third-party plugins. The approach here will also work, but is more complex.</p>"},{"location":"how-to/config/dynamic-metadata/#update-project-metadata","title":"Update project metadata","text":"<p>Change the <code>[project]</code> section of <code>pyproject.toml</code>:</p> <ol> <li>Define the dynamic field as an array of all the fields you will set dynamically e.g. <code>dynamic = [\"version\", \"license\", \"authors\", \"maintainers\"]</code></li> <li>If any of those fields have static definitions in <code>pyproject.toml</code>, delete those definitions. It is verboten to define a field statically and dynamically.</li> </ol> <p>Add a section to trigger loading of dynamic metadata plugins: <code>[tool.hatch.metadata.hooks.custom]</code>. Use exactly that name, regardless of the name of the class you will use or its <code>PLUGIN_NAME</code>. There doesn't need to be anything in the section.</p> <p>If your plugin requires additional third-party packages to do its work, add them to the <code>requires</code> array in the <code>[build-system]</code> section of <code>pyproject.toml</code>.</p>"},{"location":"how-to/config/dynamic-metadata/#implement-hook","title":"Implement hook","text":"<p>The dynamic lookup must happen in a custom plugin that you write. The default expectation is that it is in a <code>hatch_build.py</code> file at the root of the project. Subclass <code>MetadataHookInterface</code> and implement <code>update()</code>; for example, here's plugin that reads metadata from a JSON file:</p>  hatch_build.py <pre><code>import json\nimport os\n\nfrom hatchling.metadata.plugin.interface import MetadataHookInterface\n\n\nclass JSONMetaDataHook(MetadataHookInterface):\n    def update(self, metadata):\n        src_file = os.path.join(self.root, \"gnumeric\", \".constants.json\")\n        with open(src_file) as src:\n            constants = json.load(src)\n            metadata[\"version\"] = constants[\"__version__\"]\n            metadata[\"license\"] = constants[\"__license__\"]\n            metadata[\"authors\"] = [\n                {\"name\": constants[\"__author__\"], \"email\": constants[\"__author_email__\"]},\n            ]\n</code></pre> <ol> <li>You must import the MetadataHookInterface to subclass it.</li> <li>Do your operations inside the <code>update</code> method.</li> <li><code>metadata</code> refers to project metadata.</li> <li>When writing to metadata, use <code>list</code> for TOML arrays. Note that if a list is expected, it is required even if there is a single element.</li> <li>Use <code>dict</code> for TOML tables e.g. <code>authors</code>.</li> </ol> <p>If you want to store the hook in a different location, set the <code>path</code> option:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.metadata.hooks.custom]\npath = \"some/where.py\"\n</code></pre> <pre><code>[metadata.hooks.custom]\npath = \"some/where.py\"\n</code></pre>"},{"location":"how-to/environment/dependency-resolution/","title":"How to configure dependency resolution","text":"<p>Most Hatch environment types, like the default virtual, simply use pip to install dependencies. Therefore, you can use the standard environment variables that influence <code>pip</code>'s behavior.</p> <p>Here's an example of setting up the default environment to look at 2 private indices (using context formatting for authentication) before finally falling back to PyPI:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.default.env-vars]\nPIP_INDEX_URL = \"https://token:{env:GITLAB_API_TOKEN}@gitlab.com/api/v4/groups/&lt;group1_path&gt;/-/packages/pypi/simple/\"\nPIP_EXTRA_INDEX_URL = \"https://token:{env:GITLAB_API_TOKEN}@gitlab.com/api/v4/groups/&lt;group2_path&gt;/-/packages/pypi/simple/ https://pypi.org/simple/\"\n</code></pre> <pre><code>[envs.default.env-vars]\nPIP_INDEX_URL = \"https://token:{env:GITLAB_API_TOKEN}@gitlab.com/api/v4/groups/&lt;group1_path&gt;/-/packages/pypi/simple/\"\nPIP_EXTRA_INDEX_URL = \"https://token:{env:GITLAB_API_TOKEN}@gitlab.com/api/v4/groups/&lt;group2_path&gt;/-/packages/pypi/simple/ https://pypi.org/simple/\"\n</code></pre>"},{"location":"how-to/environment/dependency-resolution/#uv","title":"UV","text":"<p>If you're using UV, a different set of environment variables are available to configure its behavior. The previous example would look like this instead:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.default.env-vars]\nUV_EXTRA_INDEX_URL = \"https://token:{env:GITLAB_API_TOKEN}@gitlab.com/api/v4/groups/&lt;group1_path&gt;/-/packages/pypi/simple/\"\nUV_INDEX_URL = \"https://token:{env:GITLAB_API_TOKEN}@gitlab.com/api/v4/groups/&lt;group2_path&gt;/-/packages/pypi/simple/ https://pypi.org/simple/\"\n</code></pre> <pre><code>[envs.default.env-vars]\nUV_EXTRA_INDEX_URL = \"https://token:{env:GITLAB_API_TOKEN}@gitlab.com/api/v4/groups/&lt;group1_path&gt;/-/packages/pypi/simple/\"\nUV_INDEX_URL = \"https://token:{env:GITLAB_API_TOKEN}@gitlab.com/api/v4/groups/&lt;group2_path&gt;/-/packages/pypi/simple/ https://pypi.org/simple/\"\n</code></pre> <p>Tip</p> <p>If you need precise control over the prioritization of package indices, then using UV is recommended because <code>pip</code> has no index order guarantee.</p>"},{"location":"how-to/environment/select-installer/","title":"How to select the installer","text":""},{"location":"how-to/environment/select-installer/#enabling-uv","title":"Enabling UV","text":"<p>The virtual environment type by default uses virtualenv for virtual environment creation and pip to install dependencies. You can speed up environment creation and dependency resolution by using UV instead of both of those tools.</p> <p>caveat</p> <p>UV is under active development and may not work for all dependencies.</p> <p>To do so, set the <code>installer</code> option to <code>uv</code>. For example, if you wanted to enable this functionality for the default environment, you could set the following:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.default]\ninstaller = \"uv\"\n</code></pre> <pre><code>[envs.default]\ninstaller = \"uv\"\n</code></pre> <p>Tip</p> <p>All environments that enable UV will have the path to UV available as the <code>HATCH_UV</code> environment variable.</p>"},{"location":"how-to/environment/select-installer/#configuring-the-version","title":"Configuring the version","text":"<p>The UV that is shared by all environments uses a specific version range that is known to work with Hatch. If you want to use a different version, you can override the dependencies for the internal <code>hatch-uv</code> environment:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.hatch-uv]\ndependencies = [\n  \"uv&gt;9000\",\n]\n</code></pre> <pre><code>[envs.hatch-uv]\ndependencies = [\n  \"uv&gt;9000\",\n]\n</code></pre>"},{"location":"how-to/environment/select-installer/#externally-managed","title":"Externally managed","text":"<p>If you want to manage UV yourself, you can expose it to Hatch by setting the <code>HATCH_ENV_TYPE_VIRTUAL_UV_PATH</code> environment variable which should be the absolute path to a UV binary for Hatch to use instead. This implicitly enables UV.</p>"},{"location":"how-to/environment/select-installer/#installer-script-alias","title":"Installer script alias","text":"<p>If you have scripts or commands that call <code>pip</code>, it may be useful to alias the <code>uv pip</code> command to <code>pip</code> so that you can use the same commands for both methods of configuration and retain your muscle memory. The following is an example of a matrix that conditionally enables UV and sets the alias:</p>  pyproject.toml hatch.toml <pre><code>[[tool.hatch.envs.example.matrix]]\ntool = [\"uv\", \"pip\"]\n\n[tool.hatch.envs.example.overrides]\nmatrix.tool.installer = { value = \"{matrix:tool}\" }\nmatrix.tool.scripts = [\n  { key = \"pip\", value = \"{env:HATCH_UV} pip {args}\", if = [\"uv\"] },\n]\n</code></pre> <pre><code>[[envs.example.matrix]]\ntool = [\"uv\", \"pip\"]\n\n[envs.example.overrides]\nmatrix.tool.installer = { value = \"{matrix:tool}\" }\nmatrix.tool.scripts = [\n  { key = \"pip\", value = \"{env:HATCH_UV} pip {args}\", if = [\"uv\"] },\n]\n</code></pre> <p>Another common use case is to expose UV to all test environments. In this case, you often wouldn't want to modify the <code>scripts</code> mapping directly but rather add an extra script:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.hatch-test.extra-scripts]\npip = \"{env:HATCH_UV} pip {args}\"\n</code></pre> <pre><code>[envs.hatch-test.extra-scripts]\npip = \"{env:HATCH_UV} pip {args}\"\n</code></pre>"},{"location":"how-to/integrate/vscode/","title":"How to use Hatch environments from Visual Studio Code","text":"<p>Visual Studio Code announced support for Hatch environment discovery in <code>vscode-python</code>'s 2024.4 release.</p> <p>For it to work, you should install Hatch globally. If you used the GUI installers on Windows or macOS, or your system package manager on e.g. Arch Linux or Fedora, this should be taken care of.</p> Setting up PATH <p>If you installed Hatch with pipx rather than system-wide, you might need to add <code>$HOME/.local/bin</code> to your PATH environment variable for your graphical session, not just your terminal. Check like this:</p> <pre><code>$ pgrep bin/code  # or some other graphical application\n1234\n$ cat /proc/1234/environ | tr '\\0' '\\n' | grep -E '^PATH='\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n</code></pre> <p>If the directory is not in there, you need to add it in your session startup script, in a way that depends on your desktop environment:</p> <ul> <li>KDE Plasma</li> <li>GNOME</li> </ul>"},{"location":"how-to/integrate/vscode/#project-setup","title":"Project setup","text":"<ol> <li> <p>Make Hatch install the project and its dependencies to an environment using the <code>env create</code> command.</p> </li> <li> <p>Select an interpreter using the Python: Select Interpreter command:</p> <p> </p> </li> <li> <p>You should now be able to use the environment. For example, if you have the <code>python.terminal.activateEnvironment</code> setting set to <code>true</code> and you open a new terminal, the environment should be activated. Alternatively, you could press the \"play\" button to run a file in the environment:</p> <p> </p> </li> </ol>"},{"location":"how-to/meta/report-issues/","title":"How to report issues","text":"<p>All reports regarding unexpected behavior should be generated with the <code>self report</code> command:</p> <pre><code>$ hatch self report\n</code></pre> <p>By default, this will open a new tab in your default browser with pre-populated information about your environment.</p> <p>If Hatch is not installed alongside a web browser, you may also pass the <code>--no-open</code>/<code>-n</code> command which will output the URL with correct parameters for copying elsewhere:</p> <pre><code>$ hatch self report -n\nhttps://github.com/pypa/hatch/issues/new?body=%23%23+Current+behavior%0A%3C%21--+A+clear+and+concise+description+of+the+behavior.+--%3E%0A%0A%23%23+Expected+behavior%0A%3C%21--+A+clear+and+concise+description+of+what+you+expected+to+happen.+--%3E%0A%0A%23%23+Additional+context%0A%3C%21--+Add+any+other+context+about+the+problem+here.+If+applicable%2C+add+screenshots+to+help+explain.+--%3E%0A%0A%23%23+Debug%0A%0A%23%23%23+Installation%0A%0A-+Source%3A+pip%0A-+Version%3A+1.9.2.dev5%0A-+Platform%3A+Windows%0A-+Python+version%3A%0A++++%60%60%60%0A++++3.11.1+%28tags%2Fv3.11.1%3Aa7a450f%2C+Dec++6+2022%2C+19%3A58%3A39%29+%5BMSC+v.1934+64+bit+%28AMD64%29%5D%0A++++%60%60%60%0A%0A%23%23%23+Configuration%0A%0A%60%60%60toml%0Amode+%3D+%22local%22%0Ashell+%3D+%22nu%22%0A%60%60%60%0A\n</code></pre>"},{"location":"how-to/plugins/testing-builds/","title":"Testing build plugins","text":"<p>For testing Hatchling plugins, you'll usually want to generate a project to execute builds as a real user would. For example, as a minimal pytest fixture:</p> <pre><code>from pathlib import Path\n\nimport pytest\n\n\n@pytest.fixture\ndef new_project(tmp_path):\n    project_dir = tmp_path / 'my-app'\n    project_dir.mkdir()\n\n    project_file = project_dir / 'pyproject.toml'\n    project_file.write_text(\n        f\"\"\"\\\n[build-system]\nrequires = [\"hatchling\", \"hatch-plugin-name @ {Path.cwd().as_uri()}\"]\nbuild-backend = \"hatchling.build\"\n\n[project]\nname = \"my-app\"\nversion = \"0.1.0\"\n\"\"\",\n        encoding='utf-8',\n    )\n    ...\n</code></pre> <p>The issue with this is that after the first test session, the project will be forever cached by pip based on the file path. Therefore, subsequent tests runs will never use updated code.</p> <p>To invalidate the cache, copy your code to a new path for every test session:</p> <pre><code>import shutil\nfrom pathlib import Path\nfrom tempfile import TemporaryDirectory\n\nimport pytest\n\n\n@pytest.fixture(scope='session')\ndef plugin_dir():\n    with TemporaryDirectory() as d:\n        directory = Path(d, 'plugin')\n        shutil.copytree(\n            Path.cwd(), directory, ignore=shutil.ignore_patterns('.git')\n        )\n\n        yield directory.resolve()\n\n\n@pytest.fixture\ndef new_project(tmp_path, plugin_dir):\n    project_dir = tmp_path / 'my-app'\n    project_dir.mkdir()\n\n    project_file = project_dir / 'pyproject.toml'\n    project_file.write_text(\n        f\"\"\"\\\n[build-system]\nrequires = [\"hatchling\", \"hatch-plugin-name @ {plugin_dir.as_uri()}\"]\nbuild-backend = \"hatchling.build\"\n\n[project]\nname = \"my-app\"\nversion = \"0.1.0\"\n\"\"\",\n        encoding='utf-8',\n    )\n    ...\n</code></pre> <p>Note</p> <p>This example chooses to ignore copying <code>.git</code> for performance reasons. You may want to ignore more patterns, or copy only specific paths like this plugin does.</p>"},{"location":"how-to/publish/auth/","title":"How to authenticate for index publishing","text":"<p>The username is derived from the following sources, in order of precedence:</p> <ol> <li>The  <code>--user</code> / <code>-u</code> cli option.</li> <li>The <code>HATCH_INDEX_USER</code> environment variable.</li> <li>The <code>repos</code> tables.</li> <li>The <code>~/.pypirc</code> file.</li> <li>The input to an interactive prompt.</li> </ol> <p>As a fallback the value <code>__token__</code> is applied.</p> <p>The password is looked up in these:</p> <ol> <li>The <code>~/.pypirc</code> file    if the username was provided by it.</li> <li>The <code>--auth</code> / <code>-a</code> cli option.</li> <li>The <code>HATCH_INDEX_AUTH</code> environment variable.</li> <li>The <code>repos</code> tables.</li> <li>A variety of OS-level credentials services backed by keyring.</li> <li>The input to an interactive prompt.</li> </ol> <p>If interactively provided credentials were used, the username will be stored in Hatch's cache and the password stored in the available keyring backed credentials stores.</p> <p>For automated releasing to PyPI, it is recommended to use \"Trusted Publishing\" with OIDC (e.g. PyPA's <code>pypi-publish</code> GitHub Action) or per-project API tokens.</p>"},{"location":"how-to/publish/repo/","title":"How to configure repositories for index publishing","text":"<p>You can select the repository with which to upload using the <code>-r</code>/<code>--repo</code> option or by setting the <code>HATCH_INDEX_REPO</code> environment variable.</p> <p>Rather than specifying the full URL of a repository, you can use a named repository from a <code>publish.index.repos</code> table defined in Hatch's config file:</p>  config.toml <pre><code>[publish.index.repos.private]\nurl = \"...\"\n...\n</code></pre> <p>The following repository names are reserved by Hatch and cannot be overridden:</p> Name Repository <code>main</code> https://upload.pypi.org/legacy/ <code>test</code> https://test.pypi.org/legacy/ <p>The <code>main</code> repository is used by default.</p>"},{"location":"how-to/python/custom/","title":"How to use custom Python distributions","text":"<p>The built-in Python management capabilities offer full support for using custom distributions.</p>"},{"location":"how-to/python/custom/#configuration","title":"Configuration","text":"<p>Configuring custom Python distributions is done entirely through three environment variables that must all be defined, for each desired distribution. In the following sections, the placeholder <code>&lt;NAME&gt;</code> is the uppercased version of the distribution name with periods replaced by underscores e.g. <code>pypy3.10</code> would become <code>PYPY3_10</code>.</p>"},{"location":"how-to/python/custom/#source","title":"Source","text":"<p>The <code>HATCH_PYTHON_CUSTOM_SOURCE_&lt;NAME&gt;</code> variable is the URL to the distribution's archive. The value must end with the archive's real file extension, which is used to determine the extraction method.</p> <p>The following extensions are supported:</p> Extensions Description <ul><li><code>.tar.bz2</code></li><li><code>.bz2</code></li></ul> A tar file with bzip2 compression <ul><li><code>.tar.gz</code></li><li><code>.tgz</code></li></ul> A tar file with gzip compression <ul><li><code>.tar.zst</code></li><li><code>.tar.zstd</code></li></ul> A tar file with Zstandard compression <ul><li><code>.zip</code></li></ul> A ZIP file with DEFLATE compression"},{"location":"how-to/python/custom/#python-path","title":"Python path","text":"<p>The <code>HATCH_PYTHON_CUSTOM_PATH_&lt;NAME&gt;</code> variable is the path to the Python interpreter within the archive. This path is relative to the root of the archive and must be a Unix-style path, even on Windows.</p>"},{"location":"how-to/python/custom/#version","title":"Version","text":"<p>The <code>HATCH_PYTHON_CUSTOM_VERSION_&lt;NAME&gt;</code> variable is the version of the distribution. This value is used to determine whether updates are required and is displayed in the output of the <code>python show</code> command.</p>"},{"location":"how-to/run/python-scripts/","title":"How to run Python scripts","text":"<p>The <code>run</code> command supports executing Python scripts with inline metadata, such that a dedicated environment is automatically created with the required dependencies and with the correct version of Python.</p> <p>A script metadata block is a comment block that starts with <code># /// script</code> and ends with <code># ///</code>. Every line between those two lines must be a comment line that starts with <code>#</code> and contains a TOML document when the comment characters are removed.</p> <p>The top-level fields are:</p> <ul> <li><code>dependencies</code>: A list of strings that specifies the runtime dependencies of the script. Each entry must be a valid dependency specifier.</li> <li><code>requires-python</code>: A string that specifies the Python version(s) with which the script is compatible. The value of this field must be a valid version specifier.</li> </ul> <p>The following is an example of Python script with a valid metadata block:</p>  script.py <pre><code># /// script\n# requires-python = \"&gt;=3.11\"\n# dependencies = [\n#   \"httpx\",\n#   \"rich\",\n# ]\n# ///\n\nimport httpx\nfrom rich.pretty import pprint\n\nresp = httpx.get(\"https://peps.python.org/api/peps.json\")\ndata = resp.json()\npprint([(k, v[\"title\"]) for k, v in data.items()][:10])\n</code></pre> <p>Run it directly:</p> <pre><code>$ hatch run /path/to/script.py\nCreating environment: SyB4bPbL\nChecking dependencies\nSyncing dependencies\n[\n\u2502   ('1', 'PEP Purpose and Guidelines'),\n\u2502   ('2', 'Procedure for Adding New Modules'),\n\u2502   ('3', 'Guidelines for Handling Bug Reports'),\n\u2502   ('4', 'Deprecation of Standard Modules'),\n\u2502   ('5', 'Guidelines for Language Evolution'),\n\u2502   ('6', 'Bug Fix Releases'),\n\u2502   ('7', 'Style Guide for C Code'),\n\u2502   ('8', 'Style Guide for Python Code'),\n\u2502   ('9', 'Sample Plaintext PEP Template'),\n\u2502   ('10', 'Voting Guidelines')\n]\n</code></pre> <p>notes</p> <ul> <li>The informational text in this example is only temporarily shown in your terminal on the first run.</li> <li>Although the environment name is based on the script's absolute path, the command line argument does not have to be.</li> </ul>"},{"location":"how-to/run/python-scripts/#environment-configuration","title":"Environment configuration","text":"<p>You may use the <code>[tool.hatch]</code> table directly to control the script's environment. For example, if you wanted to disable UV (which is enabled by default for scripts), you could add the following:</p>  script.py <pre><code># /// script\n# ...\n# [tool.hatch]\n# installer = \"pip\"\n# ///\n</code></pre>"},{"location":"how-to/static-analysis/behavior/","title":"Customize static analysis behavior","text":"<p>You can fully alter the static analysis performed by the <code>fmt</code> command by modifying the reserved environment named <code>hatch-static-analysis</code>. For example, you could define the following if you wanted to replace the default behavior with a mix of Black, isort and basic flake8:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.hatch-static-analysis]\ndependencies = [\"black\", \"flake8\", \"isort\"]\n\n[tool.hatch.envs.hatch-static-analysis.scripts]\nformat-check = [\n  \"black --check --diff {args:.}\",\n  \"isort --check-only --diff {args:.}\",\n]\nformat-fix = [\n  \"isort {args:.}\",\n  \"black {args:.}\",\n]\nlint-check = \"flake8 {args:.}\"\nlint-fix = \"lint-check\"\n</code></pre> <pre><code>[envs.hatch-static-analysis]\ndependencies = [\"black\", \"flake8\", \"isort\"]\n\n[envs.hatch-static-analysis.scripts]\nformat-check = [\n  \"black --check --diff {args:.}\",\n  \"isort --check-only --diff {args:.}\",\n]\nformat-fix = [\n  \"isort {args:.}\",\n  \"black {args:.}\",\n]\nlint-check = \"flake8 {args:.}\"\nlint-fix = \"lint-check\"\n</code></pre> <p>The <code>format-*</code> scripts correspond to the <code>--formatter</code>/<code>-f</code> flag while the <code>lint-*</code> scripts correspond to the <code>--linter</code>/<code>-l</code> flag. The <code>*-fix</code> scripts run by default while the <code>*-check</code> scripts correspond to the <code>--check</code> flag. Based on this example, the following shows how the various scripts influence behavior:</p> Command Expanded scripts <code>hatch fmt</code> <ul><li><code>flake8 .</code></li><li><code>isort .</code></li><li><code>black .</code></li></ul> <code>hatch fmt src tests</code> <ul><li><code>flake8 src tests</code></li><li><code>isort src tests</code></li><li><code>black src tests</code></li></ul> <code>hatch fmt -f</code> <ul><li><code>isort .</code></li><li><code>black .</code></li></ul> <code>hatch fmt -l</code> <ul><li><code>flake8 .</code></li></ul> <code>hatch fmt --check</code> <ul><li><code>flake8 .</code></li><li><code>black --check --diff .</code></li><li><code>isort --check-only --diff .</code></li></ul> <code>hatch fmt --check -f</code> <ul><li><code>black --check --diff .</code></li><li><code>isort --check-only --diff .</code></li></ul> <code>hatch fmt --check -l</code> <ul><li><code>flake8 .</code></li></ul>"},{"location":"meta/authors/","title":"Authors","text":""},{"location":"meta/authors/#maintainers","title":"Maintainers","text":"<ul> <li>Ofek Lev  </li> </ul>"},{"location":"meta/authors/#contributors","title":"Contributors","text":"<ul> <li>Amjith Ramanujam </li> <li>Arnaud Crowther </li> <li>Chaojie  </li> <li>Chris Warrick </li> <li>Lum\u00edr 'Frenzy' Balhar  </li> <li>Ofek Lev  </li> <li>Olga Matoula  </li> <li>Philip Blair </li> <li>Robert Rosca </li> </ul>"},{"location":"meta/faq/","title":"FAQ","text":""},{"location":"meta/faq/#interoperability","title":"Interoperability","text":"<p>Q: What is the risk of lock-in?</p> <p>A: Not much! Other than the plugin system, everything uses Python's established standards by default. Project metadata is based entirely on the standard, the build system is compatible with PEP 517/PEP 660, versioning uses the scheme specified by PEP 440, dependencies are defined with PEP 508 strings, and environments use virtualenv.</p> <p>Q: Must one use all features?</p> <p>A: No, all features are optional! You can use just the build system, publish wheels and source distributions that were built by other tools, only use the environment management, etc.</p>"},{"location":"meta/faq/#libraries-vs-applications","title":"Libraries vs applications","text":"<p>Q: Are workflows for both libraries and applications supported?</p> <p>A: Yes, mostly! Applications can utilize environment management just like libraries, and plugins can be used to build projects in arbitrary formats or publish artifacts to arbitrary destinations.</p> <p>The only caveat is that currently there is no support for re-creating an environment given a set of dependencies in a reproducible manner. Although a standard lock file format may be far off since PEP 665 was rejected, resolving capabilities are coming to pip. When that is stabilized, Hatch will add locking functionality and dedicated documentation for managing applications.</p>"},{"location":"meta/faq/#tool-migration","title":"Tool migration","text":"<p>Q: How to migrate to Hatch?</p>"},{"location":"meta/faq/#build-system","title":"Build system","text":"SetuptoolsHatch  setup.py MANIFEST.in <pre><code>import os\nfrom io import open\n\nfrom setuptools import find_packages, setup\n\nabout = {}\nwith open(os.path.join('src', 'foo', '__about__.py'), 'r', 'utf-8') as f:\n    exec(f.read(), about)\n\nwith open('README.md', 'r', 'utf-8') as f:\n    readme = f.read()\n\nsetup(\n    # Metadata\n    name='foo',\n    version=about['__version__'],\n    description='...',\n    long_description=readme,\n    long_description_content_type='text/markdown',\n    author='...',\n    author_email='...',\n    project_urls={\n        'Documentation': '...',\n        'Source': '...',\n    },\n    classifiers=[\n        '...',\n    ],\n    keywords=[\n        '...',\n    ],\n    python_requires='&gt;=3.8',\n    install_requires=[\n        '...',\n    ],\n    extras_require={\n        'feature': ['...'],\n    },\n\n    # Packaging\n    packages=find_packages(where='src'),\n    package_dir={'': 'src'},\n    package_data={\n        'foo': ['py.typed'],\n    },\n    zip_safe=False,\n    entry_points={\n        'console_scripts': [\n            'foo = foo.cli:main',\n        ],\n    },\n)\n</code></pre> <pre><code>graft tests\n\nglobal-exclude *.py[cod] __pycache__\n</code></pre>  pyproject.toml <pre><code>[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[project]\nname = \"foo\"\ndescription = \"...\"\nreadme = \"README.md\"\nauthors = [\n  { name = \"...\", email = \"...\" },\n]\nclassifiers = [\n  \"...\",\n]\nkeywords = [\n  \"...\",\n]\nrequires-python = \"&gt;=3.8\"\ndependencies = [\n  \"...\",\n]\ndynamic = [\"version\"]\n\n[project.urls]\nDocumentation = \"...\"\nSource = \"...\"\n\n[project.optional-dependencies]\nfeature = [\"...\"]\n\n[project.scripts]\nfoo = \"foo.cli:main\"\n\n[tool.hatch.version]\npath = \"src/foo/__about__.py\"\n\n[tool.hatch.build.targets.sdist]\ninclude = [\n  \"/src\",\n  \"/tests\",\n]\n</code></pre>"},{"location":"meta/faq/#environments","title":"Environments","text":"ToxHatch <p>Invocation:</p> <pre><code>tox\n</code></pre>  tox.ini <pre><code>[tox]\nenvlist =\n    py{38,39}-{42,3.14}\n    py{39,310}-{9000}-{foo,bar}\n\n[testenv]\nusedevelop = true\ndeps =\n    coverage[toml]\n    pytest\n    pytest-cov\n    foo: cryptography\ncommands =\n    pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=pkg --cov=tests {posargs}\nsetenv =\n    3.14: PRODUCT_VERSION=3.14\n    42: PRODUCT_VERSION=42\n    9000: PRODUCT_VERSION=9000\n    {foo,bar}: EXPERIMENTAL=true\n</code></pre> <p>Invocation:</p> <pre><code>hatch run test\n</code></pre>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.default]\ndependencies = [\n  \"coverage[toml]\",\n  \"pytest\",\n  \"pytest-cov\",\n]\n\n[tool.hatch.envs.default.scripts]\ntest = 'pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=pkg --cov=tests'\n\n[tool.hatch.envs.default.overrides]\nmatrix.version.env-vars = \"PRODUCT_VERSION\"\nmatrix.feature.env-vars = \"EXPERIMENTAL=true\"\nmatrix.feature.dependencies = [\n  { value = \"cryptography\", if = [\"foo\"] },\n]\n\n[[tool.hatch.envs.default.matrix]]\npython = [\"3.8\", \"3.9\"]\nversion = [\"42\", \"3.14\"]\n\n[[tool.hatch.envs.default.matrix]]\npython = [\"3.9\", \"3.10\"]\nversion = [\"9000\"]\nfeature = [\"foo\", \"bar\"]\n</code></pre> <pre><code>[envs.default]\ndependencies = [\n  \"coverage[toml]\",\n  \"pytest\",\n  \"pytest-cov\",\n]\n\n[envs.default.scripts]\ntest = 'pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=pkg --cov=tests'\n\n[envs.default.overrides]\nmatrix.version.env-vars = \"PRODUCT_VERSION\"\nmatrix.feature.env-vars = \"EXPERIMENTAL=true\"\nmatrix.feature.dependencies = [\n  { value = \"cryptography\", if = [\"foo\"] },\n]\n\n[[envs.default.matrix]]\npython = [\"3.8\", \"3.9\"]\nversion = [\"42\", \"3.14\"]\n\n[[envs.default.matrix]]\npython = [\"3.9\", \"3.10\"]\nversion = [\"9000\"]\nfeature = [\"foo\", \"bar\"]\n</code></pre>"},{"location":"meta/faq/#fast-cli","title":"Fast CLI?","text":"<p>The claim about being faster than other tools is based on timings that are always checked in CI.</p> <p>Hatch achieves this by using lazy imports, lazily performing computation manually and with functools.cached_property, using hacks like <code>not not ...</code> instead of <code>bool(...)</code>, etc.</p>"},{"location":"plugins/about/","title":"Plugins","text":"<p>Hatch utilizes pluggy for its plugin functionality.</p>"},{"location":"plugins/about/#overview","title":"Overview","text":"<p>All plugins provide registration hooks that return one or more classes that inherit from a particular type interface.</p> <p>Each registration hook must be decorated by Hatch's hook marker. For example, if you wanted to create a new kind of environment you could do:</p>  hooks.py <pre><code>from hatchling.plugin import hookimpl\n\nfrom .plugin import SpecialEnvironment\n\n\n@hookimpl\ndef hatch_register_environment():\n    return SpecialEnvironment\n</code></pre> <p>The hooks can return a single class or a list of classes.</p> <p>Every class must define an attribute called <code>PLUGIN_NAME</code> that users will select when they wish to use the plugin. So in the example above, the class might be defined like:</p>  plugin.py <pre><code>...\nclass SpecialEnvironment(...):\n    PLUGIN_NAME = 'special'\n    ...\n</code></pre>"},{"location":"plugins/about/#project-configuration","title":"Project configuration","text":""},{"location":"plugins/about/#naming","title":"Naming","text":"<p>It is recommended that plugin project names are prefixed with <code>hatch-</code>. For example, if you wanted to make a plugin that provides some functionality for a product named <code>foo</code> you might do:</p>  pyproject.toml <pre><code>[project]\nname = \"hatch-foo\"\n</code></pre>"},{"location":"plugins/about/#discovery","title":"Discovery","text":"<p>You'll need to define your project as a Python plugin for Hatch:</p>  pyproject.toml <pre><code>[project.entry-points.hatch]\nfoo = \"pkg.hooks\"\n</code></pre> <p>The name of the plugin should be the project name (excluding any <code>hatch-</code> prefix) and the path should represent the module that contains the registration hooks.</p>"},{"location":"plugins/about/#classifier","title":"Classifier","text":"<p>Add <code>Framework :: Hatch</code> to your project's classifiers to make it easy to search for Hatch plugins:</p>  pyproject.toml <pre><code>[project]\nclassifiers = [\n  ...\n  \"Framework :: Hatch\",\n  ...\n]\n</code></pre>"},{"location":"plugins/about/#types","title":"Types","text":""},{"location":"plugins/about/#hatchling","title":"Hatchling","text":"<p>These are all involved in building projects and therefore any defined dependencies are automatically installed in each build environment.</p> <ul> <li>Builder</li> <li>Build hook</li> <li>Metadata hook</li> <li>Version source</li> <li>Version scheme</li> </ul>"},{"location":"plugins/about/#hatch","title":"Hatch","text":"<p>These must be installed in the same environment as Hatch itself.</p> <ul> <li>Environment</li> <li>Environment collector</li> <li>Publisher</li> </ul>"},{"location":"plugins/utilities/","title":"Plugin utilities","text":""},{"location":"plugins/utilities/#hatchling.builders.utils.get_reproducible_timestamp","title":"<code>hatchling.builders.utils.get_reproducible_timestamp() -&gt; int</code>","text":"<p>Returns an <code>int</code> derived from the <code>SOURCE_DATE_EPOCH</code> environment variable; see https://reproducible-builds.org/specs/source-date-epoch/.</p> <p>The default value will always be: <code>1580601600</code></p> Source code in <code>backend/src/hatchling/builders/utils.py</code> <pre><code>def get_reproducible_timestamp() -&gt; int:\n    \"\"\"\n    Returns an `int` derived from the `SOURCE_DATE_EPOCH` environment variable; see\n    https://reproducible-builds.org/specs/source-date-epoch/.\n\n    The default value will always be: `1580601600`\n    \"\"\"\n    return int(os.environ.get('SOURCE_DATE_EPOCH', '1580601600'))\n</code></pre>"},{"location":"plugins/utilities/#hatchling.builders.config.BuilderConfig","title":"<code>BuilderConfig</code>","text":""},{"location":"plugins/utilities/#hatchling.builders.config.BuilderConfig.directory","title":"<code>directory: str</code>  <code>cached</code> <code>property</code>","text":""},{"location":"plugins/utilities/#hatchling.builders.config.BuilderConfig.ignore_vcs","title":"<code>ignore_vcs: bool</code>  <code>cached</code> <code>property</code>","text":""},{"location":"plugins/utilities/#hatchling.builders.config.BuilderConfig.reproducible","title":"<code>reproducible: bool</code>  <code>cached</code> <code>property</code>","text":"<p>Whether or not the target should be built in a reproducible manner, defaulting to true.</p>"},{"location":"plugins/utilities/#hatchling.builders.config.BuilderConfig.dev_mode_dirs","title":"<code>dev_mode_dirs: list[str]</code>  <code>cached</code> <code>property</code>","text":"<p>Directories which must be added to Python's search path in dev mode.</p>"},{"location":"plugins/utilities/#hatchling.builders.config.BuilderConfig.versions","title":"<code>versions: list[str]</code>  <code>cached</code> <code>property</code>","text":""},{"location":"plugins/utilities/#hatchling.builders.config.BuilderConfig.dependencies","title":"<code>dependencies: list[str]</code>  <code>cached</code> <code>property</code>","text":""},{"location":"plugins/utilities/#hatchling.builders.config.BuilderConfig.default_include","title":"<code>default_include() -&gt; list</code>","text":""},{"location":"plugins/utilities/#hatchling.builders.config.BuilderConfig.default_exclude","title":"<code>default_exclude() -&gt; list</code>","text":""},{"location":"plugins/utilities/#hatchling.builders.config.BuilderConfig.default_packages","title":"<code>default_packages() -&gt; list</code>","text":""},{"location":"plugins/utilities/#hatchling.builders.config.BuilderConfig.default_only_include","title":"<code>default_only_include() -&gt; list</code>","text":""},{"location":"plugins/utilities/#hatchling.bridge.app.Application","title":"<code>Application</code>","text":"<p>The way output is displayed can be configured by users.</p> <p>Important</p> <p>Never import this directly; Hatch judiciously decides if a type of plugin requires the capabilities herein and will grant access via an attribute.</p>"},{"location":"plugins/utilities/#hatchling.bridge.app.Application.verbosity","title":"<code>verbosity: int</code>  <code>property</code>","text":"<p>The verbosity level of the application, with 0 as the default.</p>"},{"location":"plugins/utilities/#hatchling.bridge.app.Application.abort","title":"<code>abort(message: str = '', code: int = 1, **kwargs: Any) -&gt; None</code>","text":"<p>Terminate the program with the given return code.</p>"},{"location":"plugins/utilities/#hatchling.bridge.app.Application.display_debug","title":"<code>display_debug(message: str = '', level: int = 1, **kwargs: Any) -&gt; None</code>","text":"<p>Meant to be used for messages that are not useful for most user experiences. The <code>level</code> option must be between 1 and 3 (inclusive).</p>"},{"location":"plugins/utilities/#hatchling.bridge.app.Application.display_error","title":"<code>display_error(message: str = '', **kwargs: Any) -&gt; None</code>","text":"<p>Meant to be used for messages indicating some unrecoverable error.</p>"},{"location":"plugins/utilities/#hatchling.bridge.app.Application.display_info","title":"<code>display_info(message: str = '', **kwargs: Any) -&gt; None</code>","text":"<p>Meant to be used for messages conveying basic information.</p>"},{"location":"plugins/utilities/#hatchling.bridge.app.Application.display_success","title":"<code>display_success(message: str = '', **kwargs: Any) -&gt; None</code>","text":"<p>Meant to be used for messages indicating some positive outcome.</p>"},{"location":"plugins/utilities/#hatchling.bridge.app.Application.display_waiting","title":"<code>display_waiting(message: str = '', **kwargs: Any) -&gt; None</code>","text":"<p>Meant to be used for messages shown before potentially time consuming operations.</p>"},{"location":"plugins/utilities/#hatchling.bridge.app.Application.display_warning","title":"<code>display_warning(message: str = '', **kwargs: Any) -&gt; None</code>","text":"<p>Meant to be used for messages conveying important information.</p>"},{"location":"plugins/utilities/#hatch.utils.platform.Platform","title":"<code>Platform</code>","text":""},{"location":"plugins/utilities/#hatch.utils.platform.Platform.default_shell","title":"<code>default_shell: str</code>  <code>property</code>","text":"<p>Returns the default shell of the system.</p> <p>On Windows systems first try the <code>SHELL</code> environment variable, if present, followed by the <code>COMSPEC</code> environment variable, defaulting to <code>cmd</code>. On all other platforms only the <code>SHELL</code> environment variable will be used, defaulting to <code>bash</code>.</p>"},{"location":"plugins/utilities/#hatch.utils.platform.Platform.modules","title":"<code>modules: LazilyLoadedModules</code>  <code>property</code>","text":"<p>Accessor for lazily loading modules that either take multiple milliseconds to import (like <code>shutil</code> and <code>subprocess</code>) or are not used on all platforms (like <code>shlex</code>).</p>"},{"location":"plugins/utilities/#hatch.utils.platform.Platform.home","title":"<code>home: Path</code>  <code>property</code>","text":"<p>The user's home directory as a path-like object.</p>"},{"location":"plugins/utilities/#hatch.utils.platform.Platform.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>One of the following:</p> <ul> <li><code>linux</code></li> <li><code>windows</code></li> <li><code>macos</code></li> </ul>"},{"location":"plugins/utilities/#hatch.utils.platform.Platform.display_name","title":"<code>display_name: str</code>  <code>property</code>","text":"<p>One of the following:</p> <ul> <li><code>Linux</code></li> <li><code>Windows</code></li> <li><code>macOS</code></li> </ul>"},{"location":"plugins/utilities/#hatch.utils.platform.Platform.windows","title":"<code>windows: bool</code>  <code>property</code>","text":"<p>Indicates whether Hatch is running on Windows.</p>"},{"location":"plugins/utilities/#hatch.utils.platform.Platform.macos","title":"<code>macos: bool</code>  <code>property</code>","text":"<p>Indicates whether Hatch is running on macOS.</p>"},{"location":"plugins/utilities/#hatch.utils.platform.Platform.linux","title":"<code>linux: bool</code>  <code>property</code>","text":"<p>Indicates whether Hatch is running on neither Windows nor macOS.</p>"},{"location":"plugins/utilities/#hatch.utils.platform.Platform.format_for_subprocess","title":"<code>format_for_subprocess(command: str | list[str], *, shell: bool) -&gt; str | list[str]</code>","text":"<p>Format the given command in a cross-platform manner for immediate consumption by subprocess utilities.</p>"},{"location":"plugins/utilities/#hatch.utils.platform.Platform.run_command","title":"<code>run_command(command: str | list[str], *, shell: bool = False, **kwargs: Any) -&gt; CompletedProcess</code>","text":"<p>Equivalent to the standard library's subprocess.run, with the command first being properly formatted.</p>"},{"location":"plugins/utilities/#hatch.utils.platform.Platform.check_command","title":"<code>check_command(command: str | list[str], *, shell: bool = False, **kwargs: Any) -&gt; CompletedProcess</code>","text":"<p>Equivalent to run_command, but non-zero exit codes will gracefully end program execution.</p>"},{"location":"plugins/utilities/#hatch.utils.platform.Platform.check_command_output","title":"<code>check_command_output(command: str | list[str], *, shell: bool = False, **kwargs: Any) -&gt; str</code>","text":"<p>Equivalent to the output from the process returned by capture_process, but non-zero exit codes will gracefully end program execution.</p>"},{"location":"plugins/utilities/#hatch.utils.platform.Platform.capture_process","title":"<code>capture_process(command: str | list[str], *, shell: bool = False, **kwargs: Any) -&gt; Popen</code>","text":"<p>Equivalent to the standard library's subprocess.Popen, with all output captured by <code>stdout</code> and the command first being properly formatted.</p>"},{"location":"plugins/utilities/#hatch.utils.platform.Platform.exit_with_command","title":"<code>exit_with_command(command: list[str]) -&gt; None</code>","text":"<p>Run the given command and exit with its exit code. On non-Windows systems, this uses the standard library's os.execvp.</p>"},{"location":"plugins/utilities/#hatch.env.context.EnvironmentContextFormatter","title":"<code>EnvironmentContextFormatter</code>","text":""},{"location":"plugins/utilities/#hatch.env.context.EnvironmentContextFormatter.formatters","title":"<code>formatters()</code>","text":"<p>This returns a mapping of supported field names to their respective formatting functions. Each function accepts 2 arguments:</p> <ul> <li>the <code>value</code> that was passed to the format call, defaulting to <code>None</code></li> <li>the modifier <code>data</code>, defaulting to an empty string</li> </ul>"},{"location":"plugins/utilities/#hatch.env.plugin.interface.FileSystemContext","title":"<code>FileSystemContext</code>","text":"<p>This class represents a synchronized path between the local file system and a potentially remote environment.</p>"},{"location":"plugins/utilities/#hatch.env.plugin.interface.FileSystemContext.env","title":"<code>env: EnvironmentInterface</code>  <code>property</code>","text":"<p>Returns the environment to which this context belongs.</p>"},{"location":"plugins/utilities/#hatch.env.plugin.interface.FileSystemContext.local_path","title":"<code>local_path: Path</code>  <code>property</code>","text":"<p>Returns the local path to which this context refers as a path-like object.</p>"},{"location":"plugins/utilities/#hatch.env.plugin.interface.FileSystemContext.env_path","title":"<code>env_path: str</code>  <code>property</code>","text":"<p>Returns the environment path to which this context refers as a string. The environment may not be on the local file system.</p>"},{"location":"plugins/utilities/#hatch.env.plugin.interface.FileSystemContext.sync_local","title":"<code>sync_local()</code>","text":"<p>Synchronizes the local path as the source with the environment path as the source.</p>"},{"location":"plugins/utilities/#hatch.env.plugin.interface.FileSystemContext.sync_env","title":"<code>sync_env()</code>","text":"<p>Synchronizes the environment path with the local path as the source.</p>"},{"location":"plugins/utilities/#hatch.env.plugin.interface.FileSystemContext.join","title":"<code>join(relative_path: str) -&gt; FileSystemContext</code>","text":"<p>Returns a new instance of this class with the given relative path appended to the local and environment paths.</p> <p>This method should not need overwriting.</p>"},{"location":"plugins/build-hook/custom/","title":"Custom build hook","text":"<p>This is a custom class in a given Python file that inherits from the BuildHookInterface.</p>"},{"location":"plugins/build-hook/custom/#configuration","title":"Configuration","text":"<p>The build hook plugin name is <code>custom</code>.</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build.hooks.custom]\n[tool.hatch.build.targets.&lt;TARGET_NAME&gt;.hooks.custom]\n</code></pre> <pre><code>[build.hooks.custom]\n[build.targets.&lt;TARGET_NAME&gt;.hooks.custom]\n</code></pre>"},{"location":"plugins/build-hook/custom/#options","title":"Options","text":"Option Default Description <code>path</code> <code>hatch_build.py</code> The path of the Python file"},{"location":"plugins/build-hook/custom/#example","title":"Example","text":"hatch_build.py <pre><code>from hatchling.builders.hooks.plugin.interface import BuildHookInterface\n\n\nclass CustomBuildHook(BuildHookInterface):\n    ...\n</code></pre> <p>If multiple subclasses are found, you must define a function named <code>get_build_hook</code> that returns the desired build hook.</p> <p>Note</p> <p>Any defined PLUGIN_NAME is ignored and will always be <code>custom</code>.</p>"},{"location":"plugins/build-hook/reference/","title":"Build hook plugins","text":"<p>A build hook provides code that will be executed at various stages of the build process. See the documentation for build hook configuration.</p>"},{"location":"plugins/build-hook/reference/#known-third-party","title":"Known third-party","text":"<ul> <li>hatch-argparse-manpage - generate man pages for argparse-based CLIs</li> <li>hatch-autorun - used to inject code into an installation that will automatically run before the first import</li> <li>hatch-build-scripts - run arbitrary shell commands that create artifacts</li> <li>hatch-cython - build Cython extensions</li> <li>hatch-gettext - compiles multi-lingual messages with GNU <code>gettext</code> tools</li> <li>hatch-jupyter-builder - used for packages in the Project Jupyter ecosystem</li> <li>hatch-mypyc - compiles code with Mypyc</li> <li>hatch-odoo - package Odoo add-ons into the appropriate namespace</li> <li>scikit-build-core - build extension modules with CMake</li> </ul>"},{"location":"plugins/build-hook/reference/#overview","title":"Overview","text":"<p>Build hooks run for every selected version of build targets.</p> <p>The initialization stage occurs immediately before each build and the finalization stage occurs immediately after. Each stage has the opportunity to view or modify build data.</p>"},{"location":"plugins/build-hook/reference/#build-data","title":"Build data","text":"<p>Build data is a simple mapping whose contents can influence the behavior of builds. Which fields exist and are recognized depends on each build target.</p> <p>The following fields are always present and recognized by the build system itself:</p> Field Type Description <code>artifacts</code> <code>list[str]</code> This is a list of extra <code>artifact</code> patterns and should generally only be appended to <code>force_include</code> <code>dict[str, str]</code> This is a mapping of extra forced inclusion paths, with this mapping taking precedence in case of conflicts <code>build_hooks</code> <code>tuple[str, ...]</code> This is an immutable sequence of the names of the configured build hooks and matches the order in which they run <p>Attention</p> <p>While user-facing TOML options are hyphenated, build data fields should be named with underscores to allow plugins to use them as valid Python identifiers.</p>"},{"location":"plugins/build-hook/reference/#notes","title":"Notes","text":"<p>In some cases it may be necessary to use <code>force_include</code> rather than <code>artifacts</code>. For example, say that you want to install a <code>lib.so</code> directly at the root of <code>site-packages</code> and a project defines a package <code>src/foo</code>. If you create <code>src/lib.so</code>, there will never be a match because the directory traversal starts at <code>src/foo</code> rather than <code>src</code>. In that case you must do either:</p> <pre><code>build_data['force_include']['src/lib.so'] = 'src/lib.so'\n</code></pre> <p>or</p> <pre><code>build_data['force_include']['/absolute/path/to/src/lib.so'] = 'src/lib.so'\n</code></pre>"},{"location":"plugins/build-hook/reference/#hatchling.builders.hooks.plugin.interface.BuildHookInterface","title":"<code>BuildHookInterface</code>","text":"<p>Example usage:</p>  plugin.py hooks.py <pre><code>from hatchling.builders.hooks.plugin.interface import BuildHookInterface\n\n\nclass SpecialBuildHook(BuildHookInterface):\n    PLUGIN_NAME = 'special'\n    ...\n</code></pre> <pre><code>from hatchling.plugin import hookimpl\n\nfrom .plugin import SpecialBuildHook\n\n\n@hookimpl\ndef hatch_register_build_hook():\n    return SpecialBuildHook\n</code></pre> Source code in <code>backend/src/hatchling/builders/hooks/plugin/interface.py</code> <pre><code>class BuildHookInterface(Generic[BuilderConfigBound]):  # no cov\n    \"\"\"\n    Example usage:\n\n    ```python tab=\"plugin.py\"\n    from hatchling.builders.hooks.plugin.interface import BuildHookInterface\n\n\n    class SpecialBuildHook(BuildHookInterface):\n        PLUGIN_NAME = 'special'\n        ...\n    ```\n\n    ```python tab=\"hooks.py\"\n    from hatchling.plugin import hookimpl\n\n    from .plugin import SpecialBuildHook\n\n\n    @hookimpl\n    def hatch_register_build_hook():\n        return SpecialBuildHook\n    ```\n    \"\"\"\n\n    PLUGIN_NAME = ''\n    \"\"\"The name used for selection.\"\"\"\n\n    def __init__(\n        self,\n        root: str,\n        config: dict[str, Any],\n        build_config: BuilderConfigBound,\n        metadata: ProjectMetadata,\n        directory: str,\n        target_name: str,\n        app: Application | None = None,\n    ) -&gt; None:\n        self.__root = root\n        self.__config = config\n        self.__build_config = build_config\n        self.__metadata = metadata\n        self.__directory = directory\n        self.__target_name = target_name\n        self.__app = app\n\n    @property\n    def app(self) -&gt; Application:\n        \"\"\"\n        An instance of [Application](../utilities.md#hatchling.bridge.app.Application).\n        \"\"\"\n        if self.__app is None:\n            from hatchling.bridge.app import Application\n\n            self.__app = cast(Application, Application().get_safe_application())\n\n        return self.__app\n\n    @property\n    def root(self) -&gt; str:\n        \"\"\"\n        The root of the project tree.\n        \"\"\"\n        return self.__root\n\n    @property\n    def config(self) -&gt; dict[str, Any]:\n        \"\"\"\n        The cumulative hook configuration.\n\n        ```toml config-example\n        [tool.hatch.build.hooks.&lt;PLUGIN_NAME&gt;]\n        [tool.hatch.build.targets.&lt;TARGET_NAME&gt;.hooks.&lt;PLUGIN_NAME&gt;]\n        ```\n        \"\"\"\n        return self.__config\n\n    @property\n    def metadata(self) -&gt; ProjectMetadata:\n        # Undocumented for now\n        return self.__metadata\n\n    @property\n    def build_config(self) -&gt; BuilderConfigBound:\n        \"\"\"\n        An instance of [BuilderConfig](../utilities.md#hatchling.builders.config.BuilderConfig).\n        \"\"\"\n        return self.__build_config\n\n    @property\n    def directory(self) -&gt; str:\n        \"\"\"\n        The build directory.\n        \"\"\"\n        return self.__directory\n\n    @property\n    def target_name(self) -&gt; str:\n        \"\"\"\n        The plugin name of the build target.\n        \"\"\"\n        return self.__target_name\n\n    def dependencies(self) -&gt; list[str]:  # noqa: PLR6301\n        \"\"\"\n        A list of extra [dependencies](../../config/dependency.md) that must be installed\n        prior to builds.\n\n        !!! warning\n            - For this to have any effect the hook dependency itself cannot be dynamic and\n                must always be defined in `build-system.requires`.\n            - As the hook must be imported to call this method, imports that require these\n                dependencies must be evaluated lazily.\n        \"\"\"\n        return []\n\n    def clean(self, versions: list[str]) -&gt; None:\n        \"\"\"\n        This occurs before the build process if the `-c`/`--clean` flag was passed to\n        the [`build`](../../cli/reference.md#hatch-build) command, or when invoking\n        the [`clean`](../../cli/reference.md#hatch-clean) command.\n        \"\"\"\n\n    def initialize(self, version: str, build_data: dict[str, Any]) -&gt; None:\n        \"\"\"\n        This occurs immediately before each build.\n\n        Any modifications to the build data will be seen by the build target.\n        \"\"\"\n\n    def finalize(self, version: str, build_data: dict[str, Any], artifact_path: str) -&gt; None:\n        \"\"\"\n        This occurs immediately after each build and will not run if the `--hooks-only` flag\n        was passed to the [`build`](../../cli/reference.md#hatch-build) command.\n\n        The build data will reflect any modifications done by the target during the build.\n        \"\"\"\n</code></pre>"},{"location":"plugins/build-hook/reference/#hatchling.builders.hooks.plugin.interface.BuildHookInterface.PLUGIN_NAME","title":"<code>PLUGIN_NAME = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The name used for selection.</p>"},{"location":"plugins/build-hook/reference/#hatchling.builders.hooks.plugin.interface.BuildHookInterface.app","title":"<code>app: Application</code>  <code>property</code>","text":"<p>An instance of Application.</p>"},{"location":"plugins/build-hook/reference/#hatchling.builders.hooks.plugin.interface.BuildHookInterface.root","title":"<code>root: str</code>  <code>property</code>","text":"<p>The root of the project tree.</p>"},{"location":"plugins/build-hook/reference/#hatchling.builders.hooks.plugin.interface.BuildHookInterface.config","title":"<code>config: dict[str, Any]</code>  <code>property</code>","text":"<p>The cumulative hook configuration.</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build.hooks.&lt;PLUGIN_NAME&gt;]\n[tool.hatch.build.targets.&lt;TARGET_NAME&gt;.hooks.&lt;PLUGIN_NAME&gt;]\n</code></pre> <pre><code>[build.hooks.&lt;PLUGIN_NAME&gt;]\n[build.targets.&lt;TARGET_NAME&gt;.hooks.&lt;PLUGIN_NAME&gt;]\n</code></pre>"},{"location":"plugins/build-hook/reference/#hatchling.builders.hooks.plugin.interface.BuildHookInterface.build_config","title":"<code>build_config: BuilderConfigBound</code>  <code>property</code>","text":"<p>An instance of BuilderConfig.</p>"},{"location":"plugins/build-hook/reference/#hatchling.builders.hooks.plugin.interface.BuildHookInterface.target_name","title":"<code>target_name: str</code>  <code>property</code>","text":"<p>The plugin name of the build target.</p>"},{"location":"plugins/build-hook/reference/#hatchling.builders.hooks.plugin.interface.BuildHookInterface.directory","title":"<code>directory: str</code>  <code>property</code>","text":"<p>The build directory.</p>"},{"location":"plugins/build-hook/reference/#hatchling.builders.hooks.plugin.interface.BuildHookInterface.dependencies","title":"<code>dependencies() -&gt; list[str]</code>","text":"<p>A list of extra dependencies that must be installed prior to builds.</p> <p>Warning</p> <ul> <li>For this to have any effect the hook dependency itself cannot be dynamic and     must always be defined in <code>build-system.requires</code>.</li> <li>As the hook must be imported to call this method, imports that require these     dependencies must be evaluated lazily.</li> </ul> Source code in <code>backend/src/hatchling/builders/hooks/plugin/interface.py</code> <pre><code>def dependencies(self) -&gt; list[str]:  # noqa: PLR6301\n    \"\"\"\n    A list of extra [dependencies](../../config/dependency.md) that must be installed\n    prior to builds.\n\n    !!! warning\n        - For this to have any effect the hook dependency itself cannot be dynamic and\n            must always be defined in `build-system.requires`.\n        - As the hook must be imported to call this method, imports that require these\n            dependencies must be evaluated lazily.\n    \"\"\"\n    return []\n</code></pre>"},{"location":"plugins/build-hook/reference/#hatchling.builders.hooks.plugin.interface.BuildHookInterface.clean","title":"<code>clean(versions: list[str]) -&gt; None</code>","text":"<p>This occurs before the build process if the <code>-c</code>/<code>--clean</code> flag was passed to the <code>build</code> command, or when invoking the <code>clean</code> command.</p> Source code in <code>backend/src/hatchling/builders/hooks/plugin/interface.py</code> <pre><code>def clean(self, versions: list[str]) -&gt; None:\n    \"\"\"\n    This occurs before the build process if the `-c`/`--clean` flag was passed to\n    the [`build`](../../cli/reference.md#hatch-build) command, or when invoking\n    the [`clean`](../../cli/reference.md#hatch-clean) command.\n    \"\"\"\n</code></pre>"},{"location":"plugins/build-hook/reference/#hatchling.builders.hooks.plugin.interface.BuildHookInterface.initialize","title":"<code>initialize(version: str, build_data: dict[str, Any]) -&gt; None</code>","text":"<p>This occurs immediately before each build.</p> <p>Any modifications to the build data will be seen by the build target.</p> Source code in <code>backend/src/hatchling/builders/hooks/plugin/interface.py</code> <pre><code>def initialize(self, version: str, build_data: dict[str, Any]) -&gt; None:\n    \"\"\"\n    This occurs immediately before each build.\n\n    Any modifications to the build data will be seen by the build target.\n    \"\"\"\n</code></pre>"},{"location":"plugins/build-hook/reference/#hatchling.builders.hooks.plugin.interface.BuildHookInterface.finalize","title":"<code>finalize(version: str, build_data: dict[str, Any], artifact_path: str) -&gt; None</code>","text":"<p>This occurs immediately after each build and will not run if the <code>--hooks-only</code> flag was passed to the <code>build</code> command.</p> <p>The build data will reflect any modifications done by the target during the build.</p> Source code in <code>backend/src/hatchling/builders/hooks/plugin/interface.py</code> <pre><code>def finalize(self, version: str, build_data: dict[str, Any], artifact_path: str) -&gt; None:\n    \"\"\"\n    This occurs immediately after each build and will not run if the `--hooks-only` flag\n    was passed to the [`build`](../../cli/reference.md#hatch-build) command.\n\n    The build data will reflect any modifications done by the target during the build.\n    \"\"\"\n</code></pre>"},{"location":"plugins/build-hook/version/","title":"Version build hook","text":"<p>This writes the project's version to a file.</p>"},{"location":"plugins/build-hook/version/#configuration","title":"Configuration","text":"<p>The build hook plugin name is <code>version</code>.</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build.hooks.version]\n[tool.hatch.build.targets.&lt;TARGET_NAME&gt;.hooks.version]\n</code></pre> <pre><code>[build.hooks.version]\n[build.targets.&lt;TARGET_NAME&gt;.hooks.version]\n</code></pre>"},{"location":"plugins/build-hook/version/#options","title":"Options","text":"Option Description <code>path</code> (required) A relative path to the desired file <code>template</code> A string representing the entire contents of <code>path</code> that will be formatted with a <code>version</code> variable <code>pattern</code> Rather than updating the entire file, a regular expression may be used that has a named group called <code>version</code> that represents the version. If set to <code>true</code>, a pattern will be used that looks for a variable named <code>__version__</code> or <code>VERSION</code> that is set to a string containing the version, optionally prefixed with the lowercase letter <code>v</code>."},{"location":"plugins/builder/binary/","title":"Binary builder","text":"<p>This uses PyApp to build an application that is able to bootstrap itself at runtime.</p> <p>Note</p> <p>This requires an installation of Rust.</p>"},{"location":"plugins/builder/binary/#configuration","title":"Configuration","text":"<p>The builder plugin name is <code>binary</code>.</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build.targets.binary]\n</code></pre> <pre><code>[build.targets.binary]\n</code></pre>"},{"location":"plugins/builder/binary/#options","title":"Options","text":"Option Default Description <code>scripts</code> all defined An array of defined script names to limit what gets built <code>python-version</code> latest compatible Python minor version The Python version ID to use <code>pyapp-version</code> The version of PyApp to use"},{"location":"plugins/builder/binary/#build-behavior","title":"Build behavior","text":"<p>If any scripts are defined then each one will be built (limited by the <code>scripts</code> option). Otherwise, a single executable will be built based on the project name assuming there is an equivalently named module with a <code>__main__.py</code> file.</p> <p>Every executable will be built inside an <code>app</code> directory in the output directory.</p> <p>If the <code>CARGO</code> environment variable is set then that path will be used as the executable for performing builds.</p> <p>If the <code>CARGO_BUILD_TARGET</code> environment variable is set then its value will be appended to the file name stems.</p> <p>If the <code>PYAPP_REPO</code> environment variable is set then a local build will be performed inside that directory rather than installing from crates.io. Note that this is required if the <code>CARGO</code> environment variable refers to cross.</p>"},{"location":"plugins/builder/custom/","title":"Custom builder","text":"<p>This is a custom class in a given Python file that inherits from the BuilderInterface.</p>"},{"location":"plugins/builder/custom/#configuration","title":"Configuration","text":"<p>The builder plugin name is <code>custom</code>.</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build.targets.custom]\n</code></pre> <pre><code>[build.targets.custom]\n</code></pre>"},{"location":"plugins/builder/custom/#options","title":"Options","text":"Option Default Description <code>path</code> <code>hatch_build.py</code> The path of the Python file"},{"location":"plugins/builder/custom/#example","title":"Example","text":"hatch_build.py <pre><code>from hatchling.builders.plugin.interface import BuilderInterface\n\n\nclass CustomBuilder(BuilderInterface):\n    ...\n</code></pre> <p>If multiple subclasses are found, you must define a function named <code>get_builder</code> that returns the desired builder.</p> <p>Note</p> <p>Any defined PLUGIN_NAME is ignored and will always be <code>custom</code>.</p>"},{"location":"plugins/builder/reference/","title":"Builder plugins","text":"<p>See the documentation for build configuration.</p>"},{"location":"plugins/builder/reference/#known-third-party","title":"Known third-party","text":"<ul> <li>hatch-aws - used for building AWS Lambda functions with SAM</li> <li>hatch-zipped-directory - used for building ZIP archives for installation into various foreign package installation systems</li> </ul>"},{"location":"plugins/builder/reference/#hatchling.builders.plugin.interface.BuilderInterface","title":"<code>BuilderInterface</code>","text":"<p>Example usage:</p>  plugin.py hooks.py <pre><code>from hatchling.builders.plugin.interface import BuilderInterface\n\n\nclass SpecialBuilder(BuilderInterface):\n    PLUGIN_NAME = 'special'\n    ...\n</code></pre> <pre><code>from hatchling.plugin import hookimpl\n\nfrom .plugin import SpecialBuilder\n\n\n@hookimpl\ndef hatch_register_builder():\n    return SpecialBuilder\n</code></pre> Source code in <code>backend/src/hatchling/builders/plugin/interface.py</code> <pre><code>class BuilderInterface(ABC, Generic[BuilderConfigBound, PluginManagerBound]):\n    \"\"\"\n    Example usage:\n\n    ```python tab=\"plugin.py\"\n    from hatchling.builders.plugin.interface import BuilderInterface\n\n\n    class SpecialBuilder(BuilderInterface):\n        PLUGIN_NAME = 'special'\n        ...\n    ```\n\n    ```python tab=\"hooks.py\"\n    from hatchling.plugin import hookimpl\n\n    from .plugin import SpecialBuilder\n\n\n    @hookimpl\n    def hatch_register_builder():\n        return SpecialBuilder\n    ```\n    \"\"\"\n\n    PLUGIN_NAME = ''\n    \"\"\"The name used for selection.\"\"\"\n\n    def __init__(\n        self,\n        root: str,\n        plugin_manager: PluginManagerBound | None = None,\n        config: dict[str, Any] | None = None,\n        metadata: ProjectMetadata | None = None,\n        app: Application | None = None,\n    ) -&gt; None:\n        self.__root = root\n        self.__plugin_manager = cast(PluginManagerBound, plugin_manager)\n        self.__raw_config = config\n        self.__metadata = metadata\n        self.__app = app\n        self.__config = cast(BuilderConfigBound, None)\n        self.__project_config: dict[str, Any] | None = None\n        self.__hatch_config: dict[str, Any] | None = None\n        self.__build_config: dict[str, Any] | None = None\n        self.__build_targets: list[str] | None = None\n        self.__target_config: dict[str, Any] | None = None\n\n        # Metadata\n        self.__project_id: str | None = None\n\n    def build(\n        self,\n        *,\n        directory: str | None = None,\n        versions: list[str] | None = None,\n        hooks_only: bool | None = None,\n        clean: bool | None = None,\n        clean_hooks_after: bool | None = None,\n        clean_only: bool | None = False,\n    ) -&gt; Generator[str, None, None]:\n        # Fail early for invalid project metadata\n        self.metadata.validate_fields()\n\n        if directory is None:\n            directory = (\n                self.config.normalize_build_directory(os.environ[BuildEnvVars.LOCATION])\n                if BuildEnvVars.LOCATION in os.environ\n                else self.config.directory\n            )\n\n        if not os.path.isdir(directory):\n            os.makedirs(directory)\n\n        version_api = self.get_version_api()\n\n        versions = versions or self.config.versions\n        if versions:\n            unknown_versions = set(versions) - set(version_api)\n            if unknown_versions:\n                message = (\n                    f'Unknown versions for target `{self.PLUGIN_NAME}`: {\", \".join(map(str, sorted(unknown_versions)))}'\n                )\n                raise ValueError(message)\n\n        if hooks_only is None:\n            hooks_only = env_var_enabled(BuildEnvVars.HOOKS_ONLY)\n\n        configured_build_hooks = self.get_build_hooks(directory)\n        build_hooks = list(configured_build_hooks.values())\n\n        if clean_only:\n            clean = True\n        elif clean is None:\n            clean = env_var_enabled(BuildEnvVars.CLEAN)\n        if clean:\n            if not hooks_only:\n                self.clean(directory, versions)\n\n            for build_hook in build_hooks:\n                build_hook.clean(versions)\n\n            if clean_only:\n                return\n\n        if clean_hooks_after is None:\n            clean_hooks_after = env_var_enabled(BuildEnvVars.CLEAN_HOOKS_AFTER)\n\n        for version in versions:\n            self.app.display_debug(f'Building `{self.PLUGIN_NAME}` version `{version}`')\n\n            build_data = self.get_default_build_data()\n            self.set_build_data_defaults(build_data)\n\n            # Allow inspection of configured build hooks and the order in which they run\n            build_data['build_hooks'] = tuple(configured_build_hooks)\n\n            # Execute all `initialize` build hooks\n            for build_hook in build_hooks:\n                build_hook.initialize(version, build_data)\n\n            if hooks_only:\n                self.app.display_debug(f'Only ran build hooks for `{self.PLUGIN_NAME}` version `{version}`')\n                continue\n\n            # Build the artifact\n            with self.config.set_build_data(build_data):\n                artifact = version_api[version](directory, **build_data)\n\n            # Execute all `finalize` build hooks\n            for build_hook in build_hooks:\n                build_hook.finalize(version, build_data, artifact)\n\n            if clean_hooks_after:\n                for build_hook in build_hooks:\n                    build_hook.clean([version])\n\n            yield artifact\n\n    def recurse_included_files(self) -&gt; Iterable[IncludedFile]:\n        \"\"\"\n        Returns a consistently generated series of file objects for every file that should be distributed. Each file\n        object has three `str` attributes:\n\n        - `path` - the absolute path\n        - `relative_path` - the path relative to the project root; will be an empty string for external files\n        - `distribution_path` - the path to be distributed as\n        \"\"\"\n        yield from self.recurse_selected_project_files()\n        yield from self.recurse_forced_files(self.config.get_force_include())\n\n    def recurse_selected_project_files(self) -&gt; Iterable[IncludedFile]:\n        if self.config.only_include:\n            yield from self.recurse_explicit_files(self.config.only_include)\n        else:\n            yield from self.recurse_project_files()\n\n    def recurse_project_files(self) -&gt; Iterable[IncludedFile]:\n        for root, dirs, files in safe_walk(self.root):\n            relative_path = get_relative_path(root, self.root)\n\n            dirs[:] = sorted(d for d in dirs if not self.config.directory_is_excluded(d, relative_path))\n\n            files.sort()\n            is_package = '__init__.py' in files\n            for f in files:\n                if f in EXCLUDED_FILES:\n                    continue\n\n                relative_file_path = os.path.join(relative_path, f)\n                distribution_path = self.config.get_distribution_path(relative_file_path)\n                if self.config.path_is_reserved(distribution_path):\n                    continue\n\n                if self.config.include_path(relative_file_path, is_package=is_package):\n                    yield IncludedFile(\n                        os.path.join(root, f), relative_file_path, self.config.get_distribution_path(relative_file_path)\n                    )\n\n    def recurse_forced_files(self, inclusion_map: dict[str, str]) -&gt; Iterable[IncludedFile]:\n        for source, target_path in inclusion_map.items():\n            external = not source.startswith(self.root)\n            if os.path.isfile(source):\n                yield IncludedFile(\n                    source,\n                    '' if external else os.path.relpath(source, self.root),\n                    self.config.get_distribution_path(target_path),\n                )\n            elif os.path.isdir(source):\n                for root, dirs, files in safe_walk(source):\n                    relative_directory = get_relative_path(root, source)\n\n                    dirs[:] = sorted(d for d in dirs if d not in EXCLUDED_DIRECTORIES)\n\n                    files.sort()\n                    for f in files:\n                        if f in EXCLUDED_FILES:\n                            continue\n\n                        relative_file_path = os.path.join(target_path, relative_directory, f)\n                        distribution_path = self.config.get_distribution_path(relative_file_path)\n                        if not self.config.path_is_reserved(distribution_path):\n                            yield IncludedFile(\n                                os.path.join(root, f),\n                                '' if external else relative_file_path,\n                                distribution_path,\n                            )\n            else:\n                msg = f'Forced include not found: {source}'\n                raise FileNotFoundError(msg)\n\n    def recurse_explicit_files(self, inclusion_map: dict[str, str]) -&gt; Iterable[IncludedFile]:\n        for source, target_path in inclusion_map.items():\n            external = not source.startswith(self.root)\n            if os.path.isfile(source):\n                distribution_path = self.config.get_distribution_path(target_path)\n                if not self.config.path_is_reserved(distribution_path):\n                    yield IncludedFile(\n                        source,\n                        '' if external else os.path.relpath(source, self.root),\n                        self.config.get_distribution_path(target_path),\n                    )\n            elif os.path.isdir(source):\n                for root, dirs, files in safe_walk(source):\n                    relative_directory = get_relative_path(root, source)\n\n                    dirs[:] = sorted(d for d in dirs if d not in EXCLUDED_DIRECTORIES)\n\n                    files.sort()\n                    is_package = '__init__.py' in files\n                    for f in files:\n                        if f in EXCLUDED_FILES:\n                            continue\n\n                        relative_file_path = os.path.join(target_path, relative_directory, f)\n                        distribution_path = self.config.get_distribution_path(relative_file_path)\n                        if self.config.path_is_reserved(distribution_path):\n                            continue\n\n                        if self.config.include_path(relative_file_path, explicit=True, is_package=is_package):\n                            yield IncludedFile(\n                                os.path.join(root, f), '' if external else relative_file_path, distribution_path\n                            )\n\n    @property\n    def root(self) -&gt; str:\n        \"\"\"\n        The root of the project tree.\n        \"\"\"\n        return self.__root\n\n    @property\n    def plugin_manager(self) -&gt; PluginManagerBound:\n        if self.__plugin_manager is None:\n            from hatchling.plugin.manager import PluginManager\n\n            self.__plugin_manager = PluginManager()\n\n        return self.__plugin_manager\n\n    @property\n    def metadata(self) -&gt; ProjectMetadata:\n        if self.__metadata is None:\n            from hatchling.metadata.core import ProjectMetadata\n\n            self.__metadata = ProjectMetadata(self.root, self.plugin_manager, self.__raw_config)\n\n        return self.__metadata\n\n    @property\n    def app(self) -&gt; Application:\n        \"\"\"\n        An instance of [Application](../utilities.md#hatchling.bridge.app.Application).\n        \"\"\"\n        if self.__app is None:\n            from hatchling.bridge.app import Application\n\n            self.__app = cast(Application, Application().get_safe_application())\n\n        return self.__app\n\n    @property\n    def raw_config(self) -&gt; dict[str, Any]:\n        if self.__raw_config is None:\n            self.__raw_config = self.metadata.config\n\n        return self.__raw_config\n\n    @property\n    def project_config(self) -&gt; dict[str, Any]:\n        if self.__project_config is None:\n            self.__project_config = self.metadata.core.config\n\n        return self.__project_config\n\n    @property\n    def hatch_config(self) -&gt; dict[str, Any]:\n        if self.__hatch_config is None:\n            self.__hatch_config = self.metadata.hatch.config\n\n        return self.__hatch_config\n\n    @property\n    def config(self) -&gt; BuilderConfigBound:\n        \"\"\"\n        An instance of [BuilderConfig](../utilities.md#hatchling.builders.config.BuilderConfig).\n        \"\"\"\n        if self.__config is None:\n            self.__config = self.get_config_class()(\n                self, self.root, self.PLUGIN_NAME, self.build_config, self.target_config\n            )\n\n        return self.__config\n\n    @property\n    def build_config(self) -&gt; dict[str, Any]:\n        \"\"\"\n        ```toml config-example\n        [tool.hatch.build]\n        ```\n        \"\"\"\n        if self.__build_config is None:\n            self.__build_config = self.metadata.hatch.build_config\n\n        return self.__build_config\n\n    @property\n    def target_config(self) -&gt; dict[str, Any]:\n        \"\"\"\n        ```toml config-example\n        [tool.hatch.build.targets.&lt;PLUGIN_NAME&gt;]\n        ```\n        \"\"\"\n        if self.__target_config is None:\n            target_config: dict[str, Any] = self.metadata.hatch.build_targets.get(self.PLUGIN_NAME, {})\n            if not isinstance(target_config, dict):\n                message = f'Field `tool.hatch.build.targets.{self.PLUGIN_NAME}` must be a table'\n                raise TypeError(message)\n\n            self.__target_config = target_config\n\n        return self.__target_config\n\n    @property\n    def project_id(self) -&gt; str:\n        if self.__project_id is None:\n            self.__project_id = f'{self.normalize_file_name_component(self.metadata.core.name)}-{self.metadata.version}'\n\n        return self.__project_id\n\n    def get_build_hooks(self, directory: str) -&gt; dict[str, BuildHookInterface]:\n        configured_build_hooks = {}\n        for hook_name, config in self.config.hook_config.items():\n            build_hook = self.plugin_manager.build_hook.get(hook_name)\n            if build_hook is None:\n                from hatchling.plugin.exceptions import UnknownPluginError\n\n                message = f'Unknown build hook: {hook_name}'\n                raise UnknownPluginError(message)\n\n            configured_build_hooks[hook_name] = build_hook(\n                self.root, config, self.config, self.metadata, directory, self.PLUGIN_NAME, self.app\n            )\n\n        return configured_build_hooks\n\n    @abstractmethod\n    def get_version_api(self) -&gt; dict[str, Callable]:\n        \"\"\"\n        A mapping of `str` versions to a callable that is used for building.\n        Each callable must have the following signature:\n\n        ```python\n        def ...(build_dir: str, build_data: dict) -&gt; str:\n        ```\n\n        The return value must be the absolute path to the built artifact.\n        \"\"\"\n\n    def get_default_versions(self) -&gt; list[str]:\n        \"\"\"\n        A list of versions to build when users do not specify any, defaulting to all versions.\n        \"\"\"\n        return list(self.get_version_api())\n\n    def get_default_build_data(self) -&gt; dict[str, Any]:  # noqa: PLR6301\n        \"\"\"\n        A mapping that can be modified by [build hooks](../build-hook/reference.md) to influence the behavior of builds.\n        \"\"\"\n        return {}\n\n    def set_build_data_defaults(self, build_data: dict[str, Any]) -&gt; None:  # noqa: PLR6301\n        build_data.setdefault('artifacts', [])\n        build_data.setdefault('force_include', {})\n\n    def clean(self, directory: str, versions: list[str]) -&gt; None:\n        \"\"\"\n        Called before builds if the `-c`/`--clean` flag was passed to the\n        [`build`](../../cli/reference.md#hatch-build) command.\n        \"\"\"\n\n    @classmethod\n    def get_config_class(cls) -&gt; type[BuilderConfig]:\n        \"\"\"\n        Must return a subclass of [BuilderConfig](../utilities.md#hatchling.builders.config.BuilderConfig).\n        \"\"\"\n        return BuilderConfig\n\n    @staticmethod\n    def normalize_file_name_component(file_name: str) -&gt; str:\n        \"\"\"\n        https://peps.python.org/pep-0427/#escaping-and-unicode\n        \"\"\"\n        return re.sub(r'[^\\w\\d.]+', '_', file_name, flags=re.UNICODE)\n</code></pre>"},{"location":"plugins/builder/reference/#hatchling.builders.plugin.interface.BuilderInterface.PLUGIN_NAME","title":"<code>PLUGIN_NAME = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The name used for selection.</p>"},{"location":"plugins/builder/reference/#hatchling.builders.plugin.interface.BuilderInterface.app","title":"<code>app: Application</code>  <code>property</code>","text":"<p>An instance of Application.</p>"},{"location":"plugins/builder/reference/#hatchling.builders.plugin.interface.BuilderInterface.root","title":"<code>root: str</code>  <code>property</code>","text":"<p>The root of the project tree.</p>"},{"location":"plugins/builder/reference/#hatchling.builders.plugin.interface.BuilderInterface.build_config","title":"<code>build_config: dict[str, Any]</code>  <code>property</code>","text":"pyproject.toml hatch.toml <pre><code>[tool.hatch.build]\n</code></pre> <pre><code>[build]\n</code></pre>"},{"location":"plugins/builder/reference/#hatchling.builders.plugin.interface.BuilderInterface.target_config","title":"<code>target_config: dict[str, Any]</code>  <code>property</code>","text":"pyproject.toml hatch.toml <pre><code>[tool.hatch.build.targets.&lt;PLUGIN_NAME&gt;]\n</code></pre> <pre><code>[build.targets.&lt;PLUGIN_NAME&gt;]\n</code></pre>"},{"location":"plugins/builder/reference/#hatchling.builders.plugin.interface.BuilderInterface.config","title":"<code>config: BuilderConfigBound</code>  <code>property</code>","text":"<p>An instance of BuilderConfig.</p>"},{"location":"plugins/builder/reference/#hatchling.builders.plugin.interface.BuilderInterface.get_config_class","title":"<code>get_config_class() -&gt; type[BuilderConfig]</code>  <code>classmethod</code>","text":"<p>Must return a subclass of BuilderConfig.</p> Source code in <code>backend/src/hatchling/builders/plugin/interface.py</code> <pre><code>@classmethod\ndef get_config_class(cls) -&gt; type[BuilderConfig]:\n    \"\"\"\n    Must return a subclass of [BuilderConfig](../utilities.md#hatchling.builders.config.BuilderConfig).\n    \"\"\"\n    return BuilderConfig\n</code></pre>"},{"location":"plugins/builder/reference/#hatchling.builders.plugin.interface.BuilderInterface.get_version_api","title":"<code>get_version_api() -&gt; dict[str, Callable]</code>  <code>abstractmethod</code>","text":"<p>A mapping of <code>str</code> versions to a callable that is used for building. Each callable must have the following signature:</p> <pre><code>def ...(build_dir: str, build_data: dict) -&gt; str:\n</code></pre> <p>The return value must be the absolute path to the built artifact.</p> Source code in <code>backend/src/hatchling/builders/plugin/interface.py</code> <pre><code>@abstractmethod\ndef get_version_api(self) -&gt; dict[str, Callable]:\n    \"\"\"\n    A mapping of `str` versions to a callable that is used for building.\n    Each callable must have the following signature:\n\n    ```python\n    def ...(build_dir: str, build_data: dict) -&gt; str:\n    ```\n\n    The return value must be the absolute path to the built artifact.\n    \"\"\"\n</code></pre>"},{"location":"plugins/builder/reference/#hatchling.builders.plugin.interface.BuilderInterface.get_default_versions","title":"<code>get_default_versions() -&gt; list[str]</code>","text":"<p>A list of versions to build when users do not specify any, defaulting to all versions.</p> Source code in <code>backend/src/hatchling/builders/plugin/interface.py</code> <pre><code>def get_default_versions(self) -&gt; list[str]:\n    \"\"\"\n    A list of versions to build when users do not specify any, defaulting to all versions.\n    \"\"\"\n    return list(self.get_version_api())\n</code></pre>"},{"location":"plugins/builder/reference/#hatchling.builders.plugin.interface.BuilderInterface.clean","title":"<code>clean(directory: str, versions: list[str]) -&gt; None</code>","text":"<p>Called before builds if the <code>-c</code>/<code>--clean</code> flag was passed to the <code>build</code> command.</p> Source code in <code>backend/src/hatchling/builders/plugin/interface.py</code> <pre><code>def clean(self, directory: str, versions: list[str]) -&gt; None:\n    \"\"\"\n    Called before builds if the `-c`/`--clean` flag was passed to the\n    [`build`](../../cli/reference.md#hatch-build) command.\n    \"\"\"\n</code></pre>"},{"location":"plugins/builder/reference/#hatchling.builders.plugin.interface.BuilderInterface.recurse_included_files","title":"<code>recurse_included_files() -&gt; Iterable[IncludedFile]</code>","text":"<p>Returns a consistently generated series of file objects for every file that should be distributed. Each file object has three <code>str</code> attributes:</p> <ul> <li><code>path</code> - the absolute path</li> <li><code>relative_path</code> - the path relative to the project root; will be an empty string for external files</li> <li><code>distribution_path</code> - the path to be distributed as</li> </ul> Source code in <code>backend/src/hatchling/builders/plugin/interface.py</code> <pre><code>def recurse_included_files(self) -&gt; Iterable[IncludedFile]:\n    \"\"\"\n    Returns a consistently generated series of file objects for every file that should be distributed. Each file\n    object has three `str` attributes:\n\n    - `path` - the absolute path\n    - `relative_path` - the path relative to the project root; will be an empty string for external files\n    - `distribution_path` - the path to be distributed as\n    \"\"\"\n    yield from self.recurse_selected_project_files()\n    yield from self.recurse_forced_files(self.config.get_force_include())\n</code></pre>"},{"location":"plugins/builder/reference/#hatchling.builders.plugin.interface.BuilderInterface.get_default_build_data","title":"<code>get_default_build_data() -&gt; dict[str, Any]</code>","text":"<p>A mapping that can be modified by build hooks to influence the behavior of builds.</p> Source code in <code>backend/src/hatchling/builders/plugin/interface.py</code> <pre><code>def get_default_build_data(self) -&gt; dict[str, Any]:  # noqa: PLR6301\n    \"\"\"\n    A mapping that can be modified by [build hooks](../build-hook/reference.md) to influence the behavior of builds.\n    \"\"\"\n    return {}\n</code></pre>"},{"location":"plugins/builder/sdist/","title":"Source distribution builder","text":"<p>A source distribution, or <code>sdist</code>, is an archive of Python \"source code\". Although largely unspecified, by convention it should include everything that is required to build a wheel without making network requests.</p>"},{"location":"plugins/builder/sdist/#configuration","title":"Configuration","text":"<p>The builder plugin name is <code>sdist</code>.</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build.targets.sdist]\n</code></pre> <pre><code>[build.targets.sdist]\n</code></pre>"},{"location":"plugins/builder/sdist/#options","title":"Options","text":"Option Default Description <code>core-metadata-version</code> <code>\"2.4\"</code> The version of core metadata to use <code>strict-naming</code> <code>true</code> Whether or not file names should contain the normalized version of the project name <code>support-legacy</code> <code>false</code> Whether or not to include a <code>setup.py</code> file to support legacy installation mechanisms"},{"location":"plugins/builder/sdist/#versions","title":"Versions","text":"Version Description <code>standard</code> (default) The latest conventional format"},{"location":"plugins/builder/sdist/#default-file-selection","title":"Default file selection","text":"<p>When the user has not set any file selection options, all files that are not ignored by your VCS will be included.</p> <p>Note</p> <p>The following files are always included and cannot be excluded:</p> <ul> <li><code>/pyproject.toml</code></li> <li><code>/hatch.toml</code></li> <li><code>/hatch_build.py</code></li> <li><code>/.gitignore</code> or <code>/.hgignore</code></li> <li>Any defined <code>readme</code> file</li> <li>All defined <code>license-files</code></li> </ul>"},{"location":"plugins/builder/sdist/#reproducibility","title":"Reproducibility","text":"<p>Reproducible builds are supported.</p>"},{"location":"plugins/builder/sdist/#build-data","title":"Build data","text":"<p>This is data that can be modified by build hooks.</p> Data Default Description <code>dependencies</code> Extra project dependencies"},{"location":"plugins/builder/wheel/","title":"Wheel builder","text":"<p>A wheel is a binary distribution of a Python package that can be installed directly into an environment.</p>"},{"location":"plugins/builder/wheel/#configuration","title":"Configuration","text":"<p>The builder plugin name is <code>wheel</code>.</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.build.targets.wheel]\n</code></pre> <pre><code>[build.targets.wheel]\n</code></pre>"},{"location":"plugins/builder/wheel/#options","title":"Options","text":"Option Default Description <code>core-metadata-version</code> <code>\"2.4\"</code> The version of core metadata to use <code>shared-data</code> A mapping similar to the forced inclusion option corresponding to the <code>data</code> subdirectory within the standard data directory that will be installed globally in a given Python environment, usually under <code>sys.prefix</code> <code>shared-scripts</code> A mapping similar to the forced inclusion option corresponding to the <code>scripts</code> subdirectory within the standard data directory that will be installed in a given Python environment, usually under <code>Scripts</code> on Windows or <code>bin</code> otherwise, and would normally be available on PATH <code>extra-metadata</code> A mapping similar to the forced inclusion option corresponding to extra metadata that will be shipped in a directory named <code>extra_metadata</code> <code>strict-naming</code> <code>true</code> Whether or not file names should contain the normalized version of the project name <code>macos-max-compat</code> <code>false</code> Whether or not on macOS, when build hooks have set the <code>infer_tag</code> build data, the wheel name should signal broad support rather than specific versions for newer SDK versions.Note: This option will eventually be removed. <code>bypass-selection</code> <code>false</code> Whether or not to suppress the error when one has not defined any file selection options and all heuristics have failed to determine what to ship"},{"location":"plugins/builder/wheel/#versions","title":"Versions","text":"Version Description <code>standard</code> (default) The latest standardized format <code>editable</code> A wheel that only ships <code>.pth</code> files or import hooks for real-time development"},{"location":"plugins/builder/wheel/#default-file-selection","title":"Default file selection","text":"<p>When the user has not set any file selection options, the project name will be used to determine the package to ship in the following heuristic order:</p> <ol> <li><code>&lt;NAME&gt;/__init__.py</code></li> <li><code>src/&lt;NAME&gt;/__init__.py</code></li> <li><code>&lt;NAME&gt;.py</code></li> <li><code>&lt;NAMESPACE&gt;/&lt;NAME&gt;/__init__.py</code></li> </ol> <p>If none of these heuristics are satisfied, an error will be raised.</p>"},{"location":"plugins/builder/wheel/#reproducibility","title":"Reproducibility","text":"<p>Reproducible builds are supported.</p>"},{"location":"plugins/builder/wheel/#build-data","title":"Build data","text":"<p>This is data that can be modified by build hooks.</p> Data Default Description <code>tag</code> The full tag part of the filename (e.g. <code>py3-none-any</code>), defaulting to a cross-platform wheel with the supported major versions of Python based on project metadata <code>infer_tag</code> <code>False</code> When <code>tag</code> is not set, this may be enabled to use the one most specific to the platform, Python interpreter, and ABI <code>pure_python</code> <code>True</code> Whether or not to write metadata indicating that the package does not contain any platform-specific files <code>dependencies</code> Extra project dependencies <code>shared_data</code> Additional <code>shared-data</code> entries, which take precedence in case of conflicts <code>shared_scripts</code> Additional <code>shared-scripts</code> entries, which take precedence in case of conflicts <code>extra_metadata</code> Additional <code>extra-metadata</code> entries, which take precedence in case of conflicts <code>force_include_editable</code> Similar to the <code>force_include</code> option but specifically for the <code>editable</code> version and takes precedence"},{"location":"plugins/environment/reference/","title":"Environment plugins","text":"<p>See the documentation for environment configuration.</p>"},{"location":"plugins/environment/reference/#known-third-party","title":"Known third-party","text":"<ul> <li>hatch-conda - environments backed by Conda/Mamba</li> <li>hatch-containers - environments run inside containers</li> <li>hatch-pip-compile - use pip-compile to manage project dependencies and lockfiles</li> <li>hatch-pip-deepfreeze - virtual environments with dependency locking by pip-deepfreeze</li> </ul>"},{"location":"plugins/environment/reference/#installation","title":"Installation","text":"<p>Any required environment types that are not built-in must be manually installed alongside Hatch or listed in the <code>tool.hatch.env.requires</code> array for automatic management:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.env]\nrequires = [\n  \"...\",\n]\n</code></pre> <pre><code>[env]\nrequires = [\n  \"...\",\n]\n</code></pre>"},{"location":"plugins/environment/reference/#life-cycle","title":"Life cycle","text":"<p>Whenever an environment is used, the following logic is performed:</p> Source code in <code>src/hatch/project/core.py</code> <pre><code>def prepare_environment(self, environment: EnvironmentInterface):\n    if not environment.exists():\n        self.env_metadata.reset(environment)\n\n        with environment.app_status_creation():\n            environment.create()\n\n        if not environment.skip_install:\n            if environment.pre_install_commands:\n                with environment.app_status_pre_installation():\n                    self.app.run_shell_commands(\n                        ExecutionContext(\n                            environment,\n                            shell_commands=environment.pre_install_commands,\n                            source='pre-install',\n                            show_code_on_error=True,\n                        )\n                    )\n\n            with environment.app_status_project_installation():\n                if environment.dev_mode:\n                    environment.install_project_dev_mode()\n                else:\n                    environment.install_project()\n\n            if environment.post_install_commands:\n                with environment.app_status_post_installation():\n                    self.app.run_shell_commands(\n                        ExecutionContext(\n                            environment,\n                            shell_commands=environment.post_install_commands,\n                            source='post-install',\n                            show_code_on_error=True,\n                        )\n                    )\n\n    with environment.app_status_dependency_state_check():\n        new_dep_hash = environment.dependency_hash()\n\n    current_dep_hash = self.env_metadata.dependency_hash(environment)\n    if new_dep_hash != current_dep_hash:\n        with environment.app_status_dependency_installation_check():\n            dependencies_in_sync = environment.dependencies_in_sync()\n\n        if not dependencies_in_sync:\n            with environment.app_status_dependency_synchronization():\n                environment.sync_dependencies()\n                new_dep_hash = environment.dependency_hash()\n\n        self.env_metadata.update_dependency_hash(environment, new_dep_hash)\n</code></pre>"},{"location":"plugins/environment/reference/#build-environments","title":"Build environments","text":"<p>All environment types should offer support for synchronized storage between the local file system and the environment. This functionality is used in the following scenarios:</p> <ul> <li>the <code>build</code> command</li> <li>commands that read dependencies, like <code>dep hash</code>, if any project dependencies are set dynamically</li> </ul>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface","title":"<code>EnvironmentInterface</code>","text":"<p>Example usage:</p>  plugin.py hooks.py <pre><code>    from hatch.env.plugin.interface import EnvironmentInterface\n\n\n    class SpecialEnvironment(EnvironmentInterface):\n        PLUGIN_NAME = 'special'\n        ...\n</code></pre> <pre><code>    from hatchling.plugin import hookimpl\n\n    from .plugin import SpecialEnvironment\n\n\n    @hookimpl\n    def hatch_register_environment():\n        return SpecialEnvironment\n</code></pre> Source code in <code>src/hatch/env/plugin/interface.py</code> <pre><code>class EnvironmentInterface(ABC):\n    \"\"\"\n    Example usage:\n\n    ```python tab=\"plugin.py\"\n        from hatch.env.plugin.interface import EnvironmentInterface\n\n\n        class SpecialEnvironment(EnvironmentInterface):\n            PLUGIN_NAME = 'special'\n            ...\n    ```\n\n    ```python tab=\"hooks.py\"\n        from hatchling.plugin import hookimpl\n\n        from .plugin import SpecialEnvironment\n\n\n        @hookimpl\n        def hatch_register_environment():\n            return SpecialEnvironment\n    ```\n    \"\"\"\n\n    PLUGIN_NAME = ''\n    \"\"\"The name used for selection.\"\"\"\n\n    def __init__(\n        self,\n        root,\n        metadata,\n        name,\n        config,\n        matrix_variables,\n        data_directory,\n        isolated_data_directory,\n        platform,\n        verbosity,\n        app,\n    ):\n        self.__root = root\n        self.__metadata = metadata\n        self.__name = name\n        self.__config = config\n        self.__matrix_variables = matrix_variables\n        self.__data_directory = data_directory\n        self.__isolated_data_directory = isolated_data_directory\n        self.__platform = platform\n        self.__verbosity = verbosity\n        self.__app = app\n\n    @property\n    def matrix_variables(self):\n        return self.__matrix_variables\n\n    @property\n    def app(self):\n        \"\"\"\n        An instance of [Application](../utilities.md#hatchling.bridge.app.Application).\n        \"\"\"\n        return self.__app\n\n    @cached_property\n    def context(self):\n        return self.get_context()\n\n    @property\n    def verbosity(self):\n        return self.__verbosity\n\n    @property\n    def root(self):\n        \"\"\"\n        The root of the local project tree as a path-like object.\n        \"\"\"\n        return self.__root\n\n    @property\n    def metadata(self):\n        return self.__metadata\n\n    @property\n    def name(self) -&gt; str:\n        \"\"\"\n        The name of the environment.\n        \"\"\"\n        return self.__name\n\n    @property\n    def platform(self):\n        \"\"\"\n        An instance of [Platform](../utilities.md#hatch.utils.platform.Platform).\n        \"\"\"\n        return self.__platform\n\n    @property\n    def data_directory(self):\n        \"\"\"\n        The [directory](../../config/hatch.md#environments) this plugin should use for storage as a path-like object.\n        If the user has not configured one then this will be the same as the\n        [isolated data directory](reference.md#hatch.env.plugin.interface.EnvironmentInterface.isolated_data_directory).\n        \"\"\"\n        return self.__data_directory\n\n    @property\n    def isolated_data_directory(self):\n        \"\"\"\n        The default [directory](../../config/hatch.md#environments) reserved exclusively for this plugin as a path-like\n        object.\n        \"\"\"\n        return self.__isolated_data_directory\n\n    @property\n    def config(self) -&gt; dict:\n        \"\"\"\n        ```toml config-example\n        [tool.hatch.envs.&lt;ENV_NAME&gt;]\n        ```\n        \"\"\"\n        return self.__config\n\n    @cached_property\n    def project_root(self) -&gt; str:\n        \"\"\"\n        The root of the project tree as a string. If the environment is not running locally,\n        this should be the remote path to the project.\n        \"\"\"\n        return str(self.root)\n\n    @cached_property\n    def sep(self) -&gt; str:\n        \"\"\"\n        The character used to separate directories in paths. By default, this is `\\\\` on Windows and `/` otherwise.\n        \"\"\"\n        return os.sep\n\n    @cached_property\n    def pathsep(self) -&gt; str:\n        \"\"\"\n        The character used to separate paths. By default, this is `;` on Windows and `:` otherwise.\n        \"\"\"\n        return os.pathsep\n\n    @cached_property\n    def system_python(self):\n        system_python = os.environ.get(AppEnvVars.PYTHON)\n        if system_python == 'self':\n            system_python = sys.executable\n\n        system_python = (\n            system_python\n            or self.platform.modules.shutil.which('python')\n            or self.platform.modules.shutil.which('python3')\n            or sys.executable\n        )\n        if not isabs(system_python):\n            system_python = self.platform.modules.shutil.which(system_python)\n\n        return system_python\n\n    @cached_property\n    def env_vars(self) -&gt; dict:\n        \"\"\"\n        ```toml config-example\n        [tool.hatch.envs.&lt;ENV_NAME&gt;.env-vars]\n        ```\n        \"\"\"\n        env_vars = self.config.get('env-vars', {})\n        if not isinstance(env_vars, dict):\n            message = f'Field `tool.hatch.envs.{self.name}.env-vars` must be a mapping'\n            raise TypeError(message)\n\n        for key, value in env_vars.items():\n            if not isinstance(value, str):\n                message = (\n                    f'Environment variable `{key}` of field `tool.hatch.envs.{self.name}.env-vars` must be a string'\n                )\n                raise TypeError(message)\n\n        new_env_vars = {}\n        with self.metadata.context.apply_context(self.context):\n            for key, value in env_vars.items():\n                new_env_vars[key] = self.metadata.context.format(value)\n\n        new_env_vars[AppEnvVars.ENV_ACTIVE] = self.name\n        return new_env_vars\n\n    @cached_property\n    def env_include(self) -&gt; list[str]:\n        \"\"\"\n        ```toml config-example\n        [tool.hatch.envs.&lt;ENV_NAME&gt;]\n        env-include = [...]\n        ```\n        \"\"\"\n        env_include = self.config.get('env-include', [])\n        if not isinstance(env_include, list):\n            message = f'Field `tool.hatch.envs.{self.name}.env-include` must be an array'\n            raise TypeError(message)\n\n        for i, pattern in enumerate(env_include, 1):\n            if not isinstance(pattern, str):\n                message = f'Pattern #{i} of field `tool.hatch.envs.{self.name}.env-include` must be a string'\n                raise TypeError(message)\n\n        return ['HATCH_BUILD_*', *env_include] if env_include else env_include\n\n    @cached_property\n    def env_exclude(self) -&gt; list[str]:\n        \"\"\"\n        ```toml config-example\n        [tool.hatch.envs.&lt;ENV_NAME&gt;]\n        env-exclude = [...]\n        ```\n        \"\"\"\n        env_exclude = self.config.get('env-exclude', [])\n        if not isinstance(env_exclude, list):\n            message = f'Field `tool.hatch.envs.{self.name}.env-exclude` must be an array'\n            raise TypeError(message)\n\n        for i, pattern in enumerate(env_exclude, 1):\n            if not isinstance(pattern, str):\n                message = f'Pattern #{i} of field `tool.hatch.envs.{self.name}.env-exclude` must be a string'\n                raise TypeError(message)\n\n        return env_exclude\n\n    @cached_property\n    def environment_dependencies_complex(self):\n        from packaging.requirements import InvalidRequirement, Requirement\n\n        dependencies_complex = []\n        with self.apply_context():\n            for option in ('dependencies', 'extra-dependencies'):\n                dependencies = self.config.get(option, [])\n                if not isinstance(dependencies, list):\n                    message = f'Field `tool.hatch.envs.{self.name}.{option}` must be an array'\n                    raise TypeError(message)\n\n                for i, entry in enumerate(dependencies, 1):\n                    if not isinstance(entry, str):\n                        message = f'Dependency #{i} of field `tool.hatch.envs.{self.name}.{option}` must be a string'\n                        raise TypeError(message)\n\n                    try:\n                        dependencies_complex.append(Requirement(self.metadata.context.format(entry)))\n                    except InvalidRequirement as e:\n                        message = f'Dependency #{i} of field `tool.hatch.envs.{self.name}.{option}` is invalid: {e}'\n                        raise ValueError(message) from None\n\n        return dependencies_complex\n\n    @cached_property\n    def environment_dependencies(self) -&gt; list[str]:\n        \"\"\"\n        The list of all [environment dependencies](../../config/environment/overview.md#dependencies).\n        \"\"\"\n        return [str(dependency) for dependency in self.environment_dependencies_complex]\n\n    @cached_property\n    def dependencies_complex(self):\n        all_dependencies_complex = list(self.environment_dependencies_complex)\n        if self.builder:\n            all_dependencies_complex.extend(self.metadata.build.requires_complex)\n            return all_dependencies_complex\n\n        # Ensure these are checked last to speed up initial environment creation since\n        # they will already be installed along with the project\n        if (not self.skip_install and self.dev_mode) or self.features:\n            from hatch.utils.dep import get_complex_dependencies, get_complex_features\n\n            dependencies, optional_dependencies = self.app.project.get_dependencies()\n            dependencies_complex = get_complex_dependencies(dependencies)\n            optional_dependencies_complex = get_complex_features(optional_dependencies)\n\n            if not self.skip_install and self.dev_mode:\n                all_dependencies_complex.extend(dependencies_complex.values())\n\n            for feature in self.features:\n                if feature not in optional_dependencies_complex:\n                    message = (\n                        f'Feature `{feature}` of field `tool.hatch.envs.{self.name}.features` is not '\n                        f'defined in the dynamic field `project.optional-dependencies`'\n                    )\n                    raise ValueError(message)\n\n                all_dependencies_complex.extend(optional_dependencies_complex[feature].values())\n\n        return all_dependencies_complex\n\n    @cached_property\n    def dependencies(self) -&gt; list[str]:\n        \"\"\"\n        The list of all [project dependencies](../../config/metadata.md#dependencies) (if\n        [installed](../../config/environment/overview.md#skip-install) and in\n        [dev mode](../../config/environment/overview.md#dev-mode)), selected\n        [optional dependencies](../../config/environment/overview.md#features), and\n        [environment dependencies](../../config/environment/overview.md#dependencies).\n        \"\"\"\n        return [str(dependency) for dependency in self.dependencies_complex]\n\n    @cached_property\n    def platforms(self) -&gt; list[str]:\n        \"\"\"\n        All names are stored as their lower-cased version.\n\n        ```toml config-example\n        [tool.hatch.envs.&lt;ENV_NAME&gt;]\n        platforms = [...]\n        ```\n        \"\"\"\n        platforms = self.config.get('platforms', [])\n        if not isinstance(platforms, list):\n            message = f'Field `tool.hatch.envs.{self.name}.platforms` must be an array'\n            raise TypeError(message)\n\n        for i, command in enumerate(platforms, 1):\n            if not isinstance(command, str):\n                message = f'Platform #{i} of field `tool.hatch.envs.{self.name}.platforms` must be a string'\n                raise TypeError(message)\n\n        return [platform.lower() for platform in platforms]\n\n    @cached_property\n    def skip_install(self) -&gt; bool:\n        \"\"\"\n        ```toml config-example\n        [tool.hatch.envs.&lt;ENV_NAME&gt;]\n        skip-install = ...\n        ```\n        \"\"\"\n        skip_install = self.config.get('skip-install', not self.metadata.has_project_file())\n        if not isinstance(skip_install, bool):\n            message = f'Field `tool.hatch.envs.{self.name}.skip-install` must be a boolean'\n            raise TypeError(message)\n\n        return skip_install\n\n    @cached_property\n    def dev_mode(self) -&gt; bool:\n        \"\"\"\n        ```toml config-example\n        [tool.hatch.envs.&lt;ENV_NAME&gt;]\n        dev-mode = ...\n        ```\n        \"\"\"\n        dev_mode = self.config.get('dev-mode', True)\n        if not isinstance(dev_mode, bool):\n            message = f'Field `tool.hatch.envs.{self.name}.dev-mode` must be a boolean'\n            raise TypeError(message)\n\n        return dev_mode\n\n    @cached_property\n    def builder(self) -&gt; bool:\n        \"\"\"\n        ```toml config-example\n        [tool.hatch.envs.&lt;ENV_NAME&gt;]\n        builder = ...\n        ```\n        \"\"\"\n        builder = self.config.get('builder', False)\n        if not isinstance(builder, bool):\n            message = f'Field `tool.hatch.envs.{self.name}.builder` must be a boolean'\n            raise TypeError(message)\n\n        return builder\n\n    @cached_property\n    def features(self):\n        from hatchling.metadata.utils import normalize_project_name\n\n        features = self.config.get('features', [])\n        if not isinstance(features, list):\n            message = f'Field `tool.hatch.envs.{self.name}.features` must be an array of strings'\n            raise TypeError(message)\n\n        all_features = set()\n        for i, feature in enumerate(features, 1):\n            if not isinstance(feature, str):\n                message = f'Feature #{i} of field `tool.hatch.envs.{self.name}.features` must be a string'\n                raise TypeError(message)\n\n            if not feature:\n                message = f'Feature #{i} of field `tool.hatch.envs.{self.name}.features` cannot be an empty string'\n                raise ValueError(message)\n\n            normalized_feature = (\n                feature if self.metadata.hatch.metadata.allow_ambiguous_features else normalize_project_name(feature)\n            )\n            if (\n                not self.metadata.hatch.metadata.hook_config\n                and normalized_feature not in self.metadata.core.optional_dependencies\n            ):\n                message = (\n                    f'Feature `{normalized_feature}` of field `tool.hatch.envs.{self.name}.features` is not '\n                    f'defined in field `project.optional-dependencies`'\n                )\n                raise ValueError(message)\n\n            all_features.add(normalized_feature)\n\n        return sorted(all_features)\n\n    @cached_property\n    def description(self) -&gt; str:\n        \"\"\"\n        ```toml config-example\n        [tool.hatch.envs.&lt;ENV_NAME&gt;]\n        description = ...\n        ```\n        \"\"\"\n        description = self.config.get('description', '')\n        if not isinstance(description, str):\n            message = f'Field `tool.hatch.envs.{self.name}.description` must be a string'\n            raise TypeError(message)\n\n        return description\n\n    @cached_property\n    def scripts(self):\n        config = {}\n\n        # Extra scripts should come first to give less precedence\n        for field in ('extra-scripts', 'scripts'):\n            script_config = self.config.get(field, {})\n            if not isinstance(script_config, dict):\n                message = f'Field `tool.hatch.envs.{self.name}.{field}` must be a table'\n                raise TypeError(message)\n\n            for name, data in script_config.items():\n                if ' ' in name:\n                    message = (\n                        f'Script name `{name}` in field `tool.hatch.envs.{self.name}.{field}` '\n                        f'must not contain spaces'\n                    )\n                    raise ValueError(message)\n\n                commands = []\n\n                if isinstance(data, str):\n                    commands.append(data)\n                elif isinstance(data, list):\n                    for i, command in enumerate(data, 1):\n                        if not isinstance(command, str):\n                            message = (\n                                f'Command #{i} in field `tool.hatch.envs.{self.name}.{field}.{name}` '\n                                f'must be a string'\n                            )\n                            raise TypeError(message)\n\n                        commands.append(command)\n                else:\n                    message = (\n                        f'Field `tool.hatch.envs.{self.name}.{field}.{name}` must be '\n                        f'a string or an array of strings'\n                    )\n                    raise TypeError(message)\n\n                config[name] = commands\n\n        seen = {}\n        active = []\n        for script_name, commands in config.items():\n            commands[:] = expand_script_commands(self.name, script_name, commands, config, seen, active)\n\n        return config\n\n    @cached_property\n    def pre_install_commands(self):\n        pre_install_commands = self.config.get('pre-install-commands', [])\n        if not isinstance(pre_install_commands, list):\n            message = f'Field `tool.hatch.envs.{self.name}.pre-install-commands` must be an array'\n            raise TypeError(message)\n\n        for i, command in enumerate(pre_install_commands, 1):\n            if not isinstance(command, str):\n                message = f'Command #{i} of field `tool.hatch.envs.{self.name}.pre-install-commands` must be a string'\n                raise TypeError(message)\n\n        return list(pre_install_commands)\n\n    @cached_property\n    def post_install_commands(self):\n        post_install_commands = self.config.get('post-install-commands', [])\n        if not isinstance(post_install_commands, list):\n            message = f'Field `tool.hatch.envs.{self.name}.post-install-commands` must be an array'\n            raise TypeError(message)\n\n        for i, command in enumerate(post_install_commands, 1):\n            if not isinstance(command, str):\n                message = f'Command #{i} of field `tool.hatch.envs.{self.name}.post-install-commands` must be a string'\n                raise TypeError(message)\n\n        return list(post_install_commands)\n\n    def activate(self):\n        \"\"\"\n        A convenience method called when using the environment as a context manager:\n\n        ```python\n        with environment:\n            ...\n        ```\n        \"\"\"\n\n    def deactivate(self):\n        \"\"\"\n        A convenience method called after using the environment as a context manager:\n\n        ```python\n        with environment:\n            ...\n        ```\n        \"\"\"\n\n    @abstractmethod\n    def find(self):\n        \"\"\"\n        :material-align-horizontal-left: **REQUIRED** :material-align-horizontal-right:\n\n        This should return information about how to locate the environment or represent its ID in\n        some way. Additionally, this is expected to return something even if the environment is\n        [incompatible](reference.md#hatch.env.plugin.interface.EnvironmentInterface.check_compatibility).\n        \"\"\"\n\n    @abstractmethod\n    def create(self):\n        \"\"\"\n        :material-align-horizontal-left: **REQUIRED** :material-align-horizontal-right:\n\n        This should perform the necessary steps to set up the environment.\n        \"\"\"\n\n    @abstractmethod\n    def remove(self):\n        \"\"\"\n        :material-align-horizontal-left: **REQUIRED** :material-align-horizontal-right:\n\n        This should perform the necessary steps to completely remove the environment from the system and will only\n        be triggered manually by users with the [`env remove`](../../cli/reference.md#hatch-env-remove) or\n        [`env prune`](../../cli/reference.md#hatch-env-prune) commands.\n        \"\"\"\n\n    @abstractmethod\n    def exists(self) -&gt; bool:\n        \"\"\"\n        :material-align-horizontal-left: **REQUIRED** :material-align-horizontal-right:\n\n        This should indicate whether or not the environment has already been created.\n        \"\"\"\n\n    @abstractmethod\n    def install_project(self):\n        \"\"\"\n        :material-align-horizontal-left: **REQUIRED** :material-align-horizontal-right:\n\n        This should install the project in the environment.\n        \"\"\"\n\n    @abstractmethod\n    def install_project_dev_mode(self):\n        \"\"\"\n        :material-align-horizontal-left: **REQUIRED** :material-align-horizontal-right:\n\n        This should install the project in the environment such that the environment\n        always reflects the current state of the project.\n        \"\"\"\n\n    @abstractmethod\n    def dependencies_in_sync(self) -&gt; bool:\n        \"\"\"\n        :material-align-horizontal-left: **REQUIRED** :material-align-horizontal-right:\n\n        This should indicate whether or not the environment is compatible with the current\n        [dependencies](reference.md#hatch.env.plugin.interface.EnvironmentInterface.dependencies).\n        \"\"\"\n\n    @abstractmethod\n    def sync_dependencies(self):\n        \"\"\"\n        :material-align-horizontal-left: **REQUIRED** :material-align-horizontal-right:\n\n        This should install the\n        [dependencies](reference.md#hatch.env.plugin.interface.EnvironmentInterface.dependencies)\n        in the environment.\n        \"\"\"\n\n    def dependency_hash(self):\n        \"\"\"\n        This should return a hash of the environment's\n        [dependencies](reference.md#hatch.env.plugin.interface.EnvironmentInterface.dependencies)\n        and any other data that is handled by the\n        [sync_dependencies](reference.md#hatch.env.plugin.interface.EnvironmentInterface.sync_dependencies)\n        and\n        [dependencies_in_sync](reference.md#hatch.env.plugin.interface.EnvironmentInterface.dependencies_in_sync)\n        methods.\n        \"\"\"\n        from hatch.utils.dep import hash_dependencies\n\n        return hash_dependencies(self.dependencies_complex)\n\n    @contextmanager\n    def app_status_creation(self):\n        \"\"\"\n        See the [life cycle of environments](reference.md#life-cycle).\n        \"\"\"\n        with self.app.status(f'Creating environment: {self.name}'):\n            yield\n\n    @contextmanager\n    def app_status_pre_installation(self):\n        \"\"\"\n        See the [life cycle of environments](reference.md#life-cycle).\n        \"\"\"\n        with self.app.status('Running pre-installation commands'):\n            yield\n\n    @contextmanager\n    def app_status_post_installation(self):\n        \"\"\"\n        See the [life cycle of environments](reference.md#life-cycle).\n        \"\"\"\n        with self.app.status('Running post-installation commands'):\n            yield\n\n    @contextmanager\n    def app_status_project_installation(self):\n        \"\"\"\n        See the [life cycle of environments](reference.md#life-cycle).\n        \"\"\"\n        if self.dev_mode:\n            with self.app.status('Installing project in development mode'):\n                yield\n        else:\n            with self.app.status('Installing project'):\n                yield\n\n    @contextmanager\n    def app_status_dependency_state_check(self):\n        \"\"\"\n        See the [life cycle of environments](reference.md#life-cycle).\n        \"\"\"\n        if not self.skip_install and (\n            'dependencies' in self.metadata.dynamic or 'optional-dependencies' in self.metadata.dynamic\n        ):\n            with self.app.status('Polling dependency state'):\n                yield\n        else:\n            yield\n\n    @contextmanager\n    def app_status_dependency_installation_check(self):\n        \"\"\"\n        See the [life cycle of environments](reference.md#life-cycle).\n        \"\"\"\n        with self.app.status('Checking dependencies'):\n            yield\n\n    @contextmanager\n    def app_status_dependency_synchronization(self):\n        \"\"\"\n        See the [life cycle of environments](reference.md#life-cycle).\n        \"\"\"\n        with self.app.status('Syncing dependencies'):\n            yield\n\n    @contextmanager\n    def fs_context(self) -&gt; Generator[FileSystemContext, None, None]:\n        \"\"\"\n        A context manager that must yield a subclass of\n        [FileSystemContext](../utilities.md#hatch.env.plugin.interface.FileSystemContext).\n        \"\"\"\n        from hatch.utils.fs import temp_directory\n\n        with temp_directory() as temp_dir:\n            yield FileSystemContext(self, local_path=temp_dir, env_path=str(temp_dir))\n\n    def enter_shell(\n        self,\n        name: str,  # noqa: ARG002\n        path: str,\n        args: Iterable[str],\n    ):\n        \"\"\"\n        Spawn a [shell](../../config/hatch.md#shell) within the environment.\n\n        This should either use\n        [command_context](reference.md#hatch.env.plugin.interface.EnvironmentInterface.command_context)\n        directly or provide the same guarantee.\n        \"\"\"\n        with self.command_context():\n            self.platform.exit_with_command([path, *args])\n\n    def run_shell_command(self, command: str, **kwargs):\n        \"\"\"\n        This should return the standard library's\n        [subprocess.CompletedProcess](https://docs.python.org/3/library/subprocess.html#subprocess.CompletedProcess)\n        and will always be called when the\n        [command_context](reference.md#hatch.env.plugin.interface.EnvironmentInterface.command_context)\n        is active, with the expectation of providing the same guarantee.\n        \"\"\"\n        kwargs.setdefault('shell', True)\n        return self.platform.run_command(command, **kwargs)\n\n    @contextmanager\n    def command_context(self):\n        \"\"\"\n        A context manager that when active should make executed shell commands reflect any\n        [environment variables](reference.md#hatch.env.plugin.interface.EnvironmentInterface.get_env_vars)\n        the user defined either currently or at the time of\n        [creation](reference.md#hatch.env.plugin.interface.EnvironmentInterface.create).\n\n        For an example, open the default implementation below:\n        \"\"\"\n        with self.get_env_vars():\n            yield\n\n    def resolve_commands(self, commands: list[str]):\n        \"\"\"\n        This expands each command into one or more commands based on any\n        [scripts](../../config/environment/overview.md#scripts) that the user defined.\n        \"\"\"\n        for command in commands:\n            yield from self.expand_command(command)\n\n    def expand_command(self, command):\n        possible_script, args, _ignore_exit_code = parse_script_command(command)\n\n        # Indicate undefined\n        if not args:\n            args = None\n\n        with self.apply_context():\n            if possible_script in self.scripts:\n                if args is not None:\n                    args = self.metadata.context.format(args)\n\n                for cmd in self.scripts[possible_script]:\n                    yield self.metadata.context.format(cmd, args=args).strip()\n            else:\n                yield self.metadata.context.format(command, args=args).strip()\n\n    def construct_pip_install_command(self, args: list[str]):\n        \"\"\"\n        A convenience method for constructing a [`pip install`](https://pip.pypa.io/en/stable/cli/pip_install/)\n        command with the given verbosity. The default verbosity is set to one less than Hatch's verbosity.\n        \"\"\"\n        command = ['python', '-u', '-m', 'pip', 'install', '--disable-pip-version-check']\n\n        # Default to -1 verbosity\n        add_verbosity_flag(command, self.verbosity, adjustment=-1)\n\n        command.extend(args)\n        return command\n\n    def join_command_args(self, args: list[str]):\n        \"\"\"\n        This is used by the [`run`](../../cli/reference.md#hatch-run) command to construct the root command string\n        from the received arguments.\n        \"\"\"\n        return self.platform.join_command_args(args)\n\n    def apply_features(self, requirement: str):\n        \"\"\"\n        A convenience method that applies any user defined [features](../../config/environment/overview.md#features)\n        to the given requirement.\n        \"\"\"\n        if self.features:\n            features = ','.join(self.features)\n            return f'{requirement}[{features}]'\n\n        return requirement\n\n    def check_compatibility(self):\n        \"\"\"\n        This raises an exception if the environment is not compatible with the user's setup. The default behavior\n        checks for [platform compatibility](../../config/environment/overview.md#supported-platforms)\n        and any method override should keep this check.\n\n        This check is never performed if the environment has been\n        [created](reference.md#hatch.env.plugin.interface.EnvironmentInterface.create).\n        \"\"\"\n        if self.platforms and self.platform.name not in self.platforms:\n            message = 'unsupported platform'\n            raise OSError(message)\n\n    def get_env_vars(self) -&gt; EnvVars:\n        \"\"\"\n        Returns a mapping of environment variables that should be available to the environment. The object can\n        be used as a context manager to temporarily apply the environment variables to the current process.\n\n        !!! note\n            The environment variable `HATCH_ENV_ACTIVE` will always be set to the name of the environment.\n        \"\"\"\n        return EnvVars(self.env_vars, self.env_include, self.env_exclude)\n\n    def get_env_var_option(self, option: str) -&gt; str:\n        \"\"\"\n        Returns the value of the upper-cased environment variable `HATCH_ENV_TYPE_&lt;PLUGIN_NAME&gt;_&lt;option&gt;`.\n        \"\"\"\n        return get_env_var_option(plugin_name=self.PLUGIN_NAME, option=option)\n\n    def get_context(self):\n        \"\"\"\n        Returns a subclass of\n        [EnvironmentContextFormatter](../utilities.md#hatch.env.context.EnvironmentContextFormatter).\n        \"\"\"\n        from hatch.env.context import EnvironmentContextFormatter\n\n        return EnvironmentContextFormatter(self)\n\n    @staticmethod\n    def get_option_types() -&gt; dict:\n        \"\"\"\n        Returns a mapping of supported options to their respective types so that they can be used by\n        [overrides](../../config/environment/advanced.md#option-overrides).\n        \"\"\"\n        return {}\n\n    @contextmanager\n    def apply_context(self):\n        with self.get_env_vars(), self.metadata.context.apply_context(self.context):\n            yield\n\n    def __enter__(self):\n        self.activate()\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        self.deactivate()\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.PLUGIN_NAME","title":"<code>PLUGIN_NAME = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The name used for selection.</p>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.project_root","title":"<code>project_root: str</code>  <code>cached</code> <code>property</code>","text":"<p>The root of the project tree as a string. If the environment is not running locally, this should be the remote path to the project.</p>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.sep","title":"<code>sep: str</code>  <code>cached</code> <code>property</code>","text":"<p>The character used to separate directories in paths. By default, this is <code>\\</code> on Windows and <code>/</code> otherwise.</p>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.pathsep","title":"<code>pathsep: str</code>  <code>cached</code> <code>property</code>","text":"<p>The character used to separate paths. By default, this is <code>;</code> on Windows and <code>:</code> otherwise.</p>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.app","title":"<code>app</code>  <code>property</code>","text":"<p>An instance of Application.</p>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.root","title":"<code>root</code>  <code>property</code>","text":"<p>The root of the local project tree as a path-like object.</p>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>The name of the environment.</p>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.data_directory","title":"<code>data_directory</code>  <code>property</code>","text":"<p>The directory this plugin should use for storage as a path-like object. If the user has not configured one then this will be the same as the isolated data directory.</p>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.isolated_data_directory","title":"<code>isolated_data_directory</code>  <code>property</code>","text":"<p>The default directory reserved exclusively for this plugin as a path-like object.</p>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.config","title":"<code>config: dict</code>  <code>property</code>","text":"pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.&lt;ENV_NAME&gt;]\n</code></pre> <pre><code>[envs.&lt;ENV_NAME&gt;]\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.platform","title":"<code>platform</code>  <code>property</code>","text":"<p>An instance of Platform.</p>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.environment_dependencies","title":"<code>environment_dependencies: list[str]</code>  <code>cached</code> <code>property</code>","text":"<p>The list of all environment dependencies.</p>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.dependencies","title":"<code>dependencies: list[str]</code>  <code>cached</code> <code>property</code>","text":"<p>The list of all project dependencies (if installed and in dev mode), selected optional dependencies, and environment dependencies.</p>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.env_vars","title":"<code>env_vars: dict</code>  <code>cached</code> <code>property</code>","text":"pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.&lt;ENV_NAME&gt;.env-vars]\n</code></pre> <pre><code>[envs.&lt;ENV_NAME&gt;.env-vars]\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.env_include","title":"<code>env_include: list[str]</code>  <code>cached</code> <code>property</code>","text":"pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.&lt;ENV_NAME&gt;]\nenv-include = [...]\n</code></pre> <pre><code>[envs.&lt;ENV_NAME&gt;]\nenv-include = [...]\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.env_exclude","title":"<code>env_exclude: list[str]</code>  <code>cached</code> <code>property</code>","text":"pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.&lt;ENV_NAME&gt;]\nenv-exclude = [...]\n</code></pre> <pre><code>[envs.&lt;ENV_NAME&gt;]\nenv-exclude = [...]\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.platforms","title":"<code>platforms: list[str]</code>  <code>cached</code> <code>property</code>","text":"<p>All names are stored as their lower-cased version.</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.&lt;ENV_NAME&gt;]\nplatforms = [...]\n</code></pre> <pre><code>[envs.&lt;ENV_NAME&gt;]\nplatforms = [...]\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.skip_install","title":"<code>skip_install: bool</code>  <code>cached</code> <code>property</code>","text":"pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.&lt;ENV_NAME&gt;]\nskip-install = ...\n</code></pre> <pre><code>[envs.&lt;ENV_NAME&gt;]\nskip-install = ...\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.dev_mode","title":"<code>dev_mode: bool</code>  <code>cached</code> <code>property</code>","text":"pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.&lt;ENV_NAME&gt;]\ndev-mode = ...\n</code></pre> <pre><code>[envs.&lt;ENV_NAME&gt;]\ndev-mode = ...\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.description","title":"<code>description: str</code>  <code>cached</code> <code>property</code>","text":"pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.&lt;ENV_NAME&gt;]\ndescription = ...\n</code></pre> <pre><code>[envs.&lt;ENV_NAME&gt;]\ndescription = ...\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.find","title":"<code>find()</code>  <code>abstractmethod</code>","text":"<p> REQUIRED </p> <p>This should return information about how to locate the environment or represent its ID in some way. Additionally, this is expected to return something even if the environment is incompatible.</p> Source code in <code>src/hatch/env/plugin/interface.py</code> <pre><code>@abstractmethod\ndef find(self):\n    \"\"\"\n    :material-align-horizontal-left: **REQUIRED** :material-align-horizontal-right:\n\n    This should return information about how to locate the environment or represent its ID in\n    some way. Additionally, this is expected to return something even if the environment is\n    [incompatible](reference.md#hatch.env.plugin.interface.EnvironmentInterface.check_compatibility).\n    \"\"\"\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.create","title":"<code>create()</code>  <code>abstractmethod</code>","text":"<p> REQUIRED </p> <p>This should perform the necessary steps to set up the environment.</p> Source code in <code>src/hatch/env/plugin/interface.py</code> <pre><code>@abstractmethod\ndef create(self):\n    \"\"\"\n    :material-align-horizontal-left: **REQUIRED** :material-align-horizontal-right:\n\n    This should perform the necessary steps to set up the environment.\n    \"\"\"\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.remove","title":"<code>remove()</code>  <code>abstractmethod</code>","text":"<p> REQUIRED </p> <p>This should perform the necessary steps to completely remove the environment from the system and will only be triggered manually by users with the <code>env remove</code> or <code>env prune</code> commands.</p> Source code in <code>src/hatch/env/plugin/interface.py</code> <pre><code>@abstractmethod\ndef remove(self):\n    \"\"\"\n    :material-align-horizontal-left: **REQUIRED** :material-align-horizontal-right:\n\n    This should perform the necessary steps to completely remove the environment from the system and will only\n    be triggered manually by users with the [`env remove`](../../cli/reference.md#hatch-env-remove) or\n    [`env prune`](../../cli/reference.md#hatch-env-prune) commands.\n    \"\"\"\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.exists","title":"<code>exists() -&gt; bool</code>  <code>abstractmethod</code>","text":"<p> REQUIRED </p> <p>This should indicate whether or not the environment has already been created.</p> Source code in <code>src/hatch/env/plugin/interface.py</code> <pre><code>@abstractmethod\ndef exists(self) -&gt; bool:\n    \"\"\"\n    :material-align-horizontal-left: **REQUIRED** :material-align-horizontal-right:\n\n    This should indicate whether or not the environment has already been created.\n    \"\"\"\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.install_project","title":"<code>install_project()</code>  <code>abstractmethod</code>","text":"<p> REQUIRED </p> <p>This should install the project in the environment.</p> Source code in <code>src/hatch/env/plugin/interface.py</code> <pre><code>@abstractmethod\ndef install_project(self):\n    \"\"\"\n    :material-align-horizontal-left: **REQUIRED** :material-align-horizontal-right:\n\n    This should install the project in the environment.\n    \"\"\"\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.install_project_dev_mode","title":"<code>install_project_dev_mode()</code>  <code>abstractmethod</code>","text":"<p> REQUIRED </p> <p>This should install the project in the environment such that the environment always reflects the current state of the project.</p> Source code in <code>src/hatch/env/plugin/interface.py</code> <pre><code>@abstractmethod\ndef install_project_dev_mode(self):\n    \"\"\"\n    :material-align-horizontal-left: **REQUIRED** :material-align-horizontal-right:\n\n    This should install the project in the environment such that the environment\n    always reflects the current state of the project.\n    \"\"\"\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.dependencies_in_sync","title":"<code>dependencies_in_sync() -&gt; bool</code>  <code>abstractmethod</code>","text":"<p> REQUIRED </p> <p>This should indicate whether or not the environment is compatible with the current dependencies.</p> Source code in <code>src/hatch/env/plugin/interface.py</code> <pre><code>@abstractmethod\ndef dependencies_in_sync(self) -&gt; bool:\n    \"\"\"\n    :material-align-horizontal-left: **REQUIRED** :material-align-horizontal-right:\n\n    This should indicate whether or not the environment is compatible with the current\n    [dependencies](reference.md#hatch.env.plugin.interface.EnvironmentInterface.dependencies).\n    \"\"\"\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.sync_dependencies","title":"<code>sync_dependencies()</code>  <code>abstractmethod</code>","text":"<p> REQUIRED </p> <p>This should install the dependencies in the environment.</p> Source code in <code>src/hatch/env/plugin/interface.py</code> <pre><code>@abstractmethod\ndef sync_dependencies(self):\n    \"\"\"\n    :material-align-horizontal-left: **REQUIRED** :material-align-horizontal-right:\n\n    This should install the\n    [dependencies](reference.md#hatch.env.plugin.interface.EnvironmentInterface.dependencies)\n    in the environment.\n    \"\"\"\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.dependency_hash","title":"<code>dependency_hash()</code>","text":"<p>This should return a hash of the environment's dependencies and any other data that is handled by the sync_dependencies and dependencies_in_sync methods.</p> Source code in <code>src/hatch/env/plugin/interface.py</code> <pre><code>def dependency_hash(self):\n    \"\"\"\n    This should return a hash of the environment's\n    [dependencies](reference.md#hatch.env.plugin.interface.EnvironmentInterface.dependencies)\n    and any other data that is handled by the\n    [sync_dependencies](reference.md#hatch.env.plugin.interface.EnvironmentInterface.sync_dependencies)\n    and\n    [dependencies_in_sync](reference.md#hatch.env.plugin.interface.EnvironmentInterface.dependencies_in_sync)\n    methods.\n    \"\"\"\n    from hatch.utils.dep import hash_dependencies\n\n    return hash_dependencies(self.dependencies_complex)\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.fs_context","title":"<code>fs_context() -&gt; Generator[FileSystemContext, None, None]</code>","text":"<p>A context manager that must yield a subclass of FileSystemContext.</p> Source code in <code>src/hatch/env/plugin/interface.py</code> <pre><code>@contextmanager\ndef fs_context(self) -&gt; Generator[FileSystemContext, None, None]:\n    \"\"\"\n    A context manager that must yield a subclass of\n    [FileSystemContext](../utilities.md#hatch.env.plugin.interface.FileSystemContext).\n    \"\"\"\n    from hatch.utils.fs import temp_directory\n\n    with temp_directory() as temp_dir:\n        yield FileSystemContext(self, local_path=temp_dir, env_path=str(temp_dir))\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.activate","title":"<code>activate()</code>","text":"<p>A convenience method called when using the environment as a context manager:</p> <pre><code>with environment:\n    ...\n</code></pre> Source code in <code>src/hatch/env/plugin/interface.py</code> <pre><code>def activate(self):\n    \"\"\"\n    A convenience method called when using the environment as a context manager:\n\n    ```python\n    with environment:\n        ...\n    ```\n    \"\"\"\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.deactivate","title":"<code>deactivate()</code>","text":"<p>A convenience method called after using the environment as a context manager:</p> <pre><code>with environment:\n    ...\n</code></pre> Source code in <code>src/hatch/env/plugin/interface.py</code> <pre><code>def deactivate(self):\n    \"\"\"\n    A convenience method called after using the environment as a context manager:\n\n    ```python\n    with environment:\n        ...\n    ```\n    \"\"\"\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.app_status_creation","title":"<code>app_status_creation()</code>","text":"<p>See the life cycle of environments.</p> Source code in <code>src/hatch/env/plugin/interface.py</code> <pre><code>@contextmanager\ndef app_status_creation(self):\n    \"\"\"\n    See the [life cycle of environments](reference.md#life-cycle).\n    \"\"\"\n    with self.app.status(f'Creating environment: {self.name}'):\n        yield\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.app_status_pre_installation","title":"<code>app_status_pre_installation()</code>","text":"<p>See the life cycle of environments.</p> Source code in <code>src/hatch/env/plugin/interface.py</code> <pre><code>@contextmanager\ndef app_status_pre_installation(self):\n    \"\"\"\n    See the [life cycle of environments](reference.md#life-cycle).\n    \"\"\"\n    with self.app.status('Running pre-installation commands'):\n        yield\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.app_status_post_installation","title":"<code>app_status_post_installation()</code>","text":"<p>See the life cycle of environments.</p> Source code in <code>src/hatch/env/plugin/interface.py</code> <pre><code>@contextmanager\ndef app_status_post_installation(self):\n    \"\"\"\n    See the [life cycle of environments](reference.md#life-cycle).\n    \"\"\"\n    with self.app.status('Running post-installation commands'):\n        yield\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.app_status_project_installation","title":"<code>app_status_project_installation()</code>","text":"<p>See the life cycle of environments.</p> Source code in <code>src/hatch/env/plugin/interface.py</code> <pre><code>@contextmanager\ndef app_status_project_installation(self):\n    \"\"\"\n    See the [life cycle of environments](reference.md#life-cycle).\n    \"\"\"\n    if self.dev_mode:\n        with self.app.status('Installing project in development mode'):\n            yield\n    else:\n        with self.app.status('Installing project'):\n            yield\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.app_status_dependency_state_check","title":"<code>app_status_dependency_state_check()</code>","text":"<p>See the life cycle of environments.</p> Source code in <code>src/hatch/env/plugin/interface.py</code> <pre><code>@contextmanager\ndef app_status_dependency_state_check(self):\n    \"\"\"\n    See the [life cycle of environments](reference.md#life-cycle).\n    \"\"\"\n    if not self.skip_install and (\n        'dependencies' in self.metadata.dynamic or 'optional-dependencies' in self.metadata.dynamic\n    ):\n        with self.app.status('Polling dependency state'):\n            yield\n    else:\n        yield\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.app_status_dependency_installation_check","title":"<code>app_status_dependency_installation_check()</code>","text":"<p>See the life cycle of environments.</p> Source code in <code>src/hatch/env/plugin/interface.py</code> <pre><code>@contextmanager\ndef app_status_dependency_installation_check(self):\n    \"\"\"\n    See the [life cycle of environments](reference.md#life-cycle).\n    \"\"\"\n    with self.app.status('Checking dependencies'):\n        yield\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.app_status_dependency_synchronization","title":"<code>app_status_dependency_synchronization()</code>","text":"<p>See the life cycle of environments.</p> Source code in <code>src/hatch/env/plugin/interface.py</code> <pre><code>@contextmanager\ndef app_status_dependency_synchronization(self):\n    \"\"\"\n    See the [life cycle of environments](reference.md#life-cycle).\n    \"\"\"\n    with self.app.status('Syncing dependencies'):\n        yield\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.command_context","title":"<code>command_context()</code>","text":"<p>A context manager that when active should make executed shell commands reflect any environment variables the user defined either currently or at the time of creation.</p> <p>For an example, open the default implementation below:</p> Source code in <code>src/hatch/env/plugin/interface.py</code> <pre><code>@contextmanager\ndef command_context(self):\n    \"\"\"\n    A context manager that when active should make executed shell commands reflect any\n    [environment variables](reference.md#hatch.env.plugin.interface.EnvironmentInterface.get_env_vars)\n    the user defined either currently or at the time of\n    [creation](reference.md#hatch.env.plugin.interface.EnvironmentInterface.create).\n\n    For an example, open the default implementation below:\n    \"\"\"\n    with self.get_env_vars():\n        yield\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.enter_shell","title":"<code>enter_shell(name: str, path: str, args: Iterable[str])</code>","text":"<p>Spawn a shell within the environment.</p> <p>This should either use command_context directly or provide the same guarantee.</p> Source code in <code>src/hatch/env/plugin/interface.py</code> <pre><code>def enter_shell(\n    self,\n    name: str,  # noqa: ARG002\n    path: str,\n    args: Iterable[str],\n):\n    \"\"\"\n    Spawn a [shell](../../config/hatch.md#shell) within the environment.\n\n    This should either use\n    [command_context](reference.md#hatch.env.plugin.interface.EnvironmentInterface.command_context)\n    directly or provide the same guarantee.\n    \"\"\"\n    with self.command_context():\n        self.platform.exit_with_command([path, *args])\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.run_shell_command","title":"<code>run_shell_command(command: str, **kwargs)</code>","text":"<p>This should return the standard library's subprocess.CompletedProcess and will always be called when the command_context is active, with the expectation of providing the same guarantee.</p> Source code in <code>src/hatch/env/plugin/interface.py</code> <pre><code>def run_shell_command(self, command: str, **kwargs):\n    \"\"\"\n    This should return the standard library's\n    [subprocess.CompletedProcess](https://docs.python.org/3/library/subprocess.html#subprocess.CompletedProcess)\n    and will always be called when the\n    [command_context](reference.md#hatch.env.plugin.interface.EnvironmentInterface.command_context)\n    is active, with the expectation of providing the same guarantee.\n    \"\"\"\n    kwargs.setdefault('shell', True)\n    return self.platform.run_command(command, **kwargs)\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.resolve_commands","title":"<code>resolve_commands(commands: list[str])</code>","text":"<p>This expands each command into one or more commands based on any scripts that the user defined.</p> Source code in <code>src/hatch/env/plugin/interface.py</code> <pre><code>def resolve_commands(self, commands: list[str]):\n    \"\"\"\n    This expands each command into one or more commands based on any\n    [scripts](../../config/environment/overview.md#scripts) that the user defined.\n    \"\"\"\n    for command in commands:\n        yield from self.expand_command(command)\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.get_env_vars","title":"<code>get_env_vars() -&gt; EnvVars</code>","text":"<p>Returns a mapping of environment variables that should be available to the environment. The object can be used as a context manager to temporarily apply the environment variables to the current process.</p> <p>Note</p> <p>The environment variable <code>HATCH_ENV_ACTIVE</code> will always be set to the name of the environment.</p> Source code in <code>src/hatch/env/plugin/interface.py</code> <pre><code>def get_env_vars(self) -&gt; EnvVars:\n    \"\"\"\n    Returns a mapping of environment variables that should be available to the environment. The object can\n    be used as a context manager to temporarily apply the environment variables to the current process.\n\n    !!! note\n        The environment variable `HATCH_ENV_ACTIVE` will always be set to the name of the environment.\n    \"\"\"\n    return EnvVars(self.env_vars, self.env_include, self.env_exclude)\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.apply_features","title":"<code>apply_features(requirement: str)</code>","text":"<p>A convenience method that applies any user defined features to the given requirement.</p> Source code in <code>src/hatch/env/plugin/interface.py</code> <pre><code>def apply_features(self, requirement: str):\n    \"\"\"\n    A convenience method that applies any user defined [features](../../config/environment/overview.md#features)\n    to the given requirement.\n    \"\"\"\n    if self.features:\n        features = ','.join(self.features)\n        return f'{requirement}[{features}]'\n\n    return requirement\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.construct_pip_install_command","title":"<code>construct_pip_install_command(args: list[str])</code>","text":"<p>A convenience method for constructing a <code>pip install</code> command with the given verbosity. The default verbosity is set to one less than Hatch's verbosity.</p> Source code in <code>src/hatch/env/plugin/interface.py</code> <pre><code>def construct_pip_install_command(self, args: list[str]):\n    \"\"\"\n    A convenience method for constructing a [`pip install`](https://pip.pypa.io/en/stable/cli/pip_install/)\n    command with the given verbosity. The default verbosity is set to one less than Hatch's verbosity.\n    \"\"\"\n    command = ['python', '-u', '-m', 'pip', 'install', '--disable-pip-version-check']\n\n    # Default to -1 verbosity\n    add_verbosity_flag(command, self.verbosity, adjustment=-1)\n\n    command.extend(args)\n    return command\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.join_command_args","title":"<code>join_command_args(args: list[str])</code>","text":"<p>This is used by the <code>run</code> command to construct the root command string from the received arguments.</p> Source code in <code>src/hatch/env/plugin/interface.py</code> <pre><code>def join_command_args(self, args: list[str]):\n    \"\"\"\n    This is used by the [`run`](../../cli/reference.md#hatch-run) command to construct the root command string\n    from the received arguments.\n    \"\"\"\n    return self.platform.join_command_args(args)\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.check_compatibility","title":"<code>check_compatibility()</code>","text":"<p>This raises an exception if the environment is not compatible with the user's setup. The default behavior checks for platform compatibility and any method override should keep this check.</p> <p>This check is never performed if the environment has been created.</p> Source code in <code>src/hatch/env/plugin/interface.py</code> <pre><code>def check_compatibility(self):\n    \"\"\"\n    This raises an exception if the environment is not compatible with the user's setup. The default behavior\n    checks for [platform compatibility](../../config/environment/overview.md#supported-platforms)\n    and any method override should keep this check.\n\n    This check is never performed if the environment has been\n    [created](reference.md#hatch.env.plugin.interface.EnvironmentInterface.create).\n    \"\"\"\n    if self.platforms and self.platform.name not in self.platforms:\n        message = 'unsupported platform'\n        raise OSError(message)\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.get_option_types","title":"<code>get_option_types() -&gt; dict</code>  <code>staticmethod</code>","text":"<p>Returns a mapping of supported options to their respective types so that they can be used by overrides.</p> Source code in <code>src/hatch/env/plugin/interface.py</code> <pre><code>@staticmethod\ndef get_option_types() -&gt; dict:\n    \"\"\"\n    Returns a mapping of supported options to their respective types so that they can be used by\n    [overrides](../../config/environment/advanced.md#option-overrides).\n    \"\"\"\n    return {}\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.get_env_var_option","title":"<code>get_env_var_option(option: str) -&gt; str</code>","text":"<p>Returns the value of the upper-cased environment variable <code>HATCH_ENV_TYPE_&lt;PLUGIN_NAME&gt;_&lt;option&gt;</code>.</p> Source code in <code>src/hatch/env/plugin/interface.py</code> <pre><code>def get_env_var_option(self, option: str) -&gt; str:\n    \"\"\"\n    Returns the value of the upper-cased environment variable `HATCH_ENV_TYPE_&lt;PLUGIN_NAME&gt;_&lt;option&gt;`.\n    \"\"\"\n    return get_env_var_option(plugin_name=self.PLUGIN_NAME, option=option)\n</code></pre>"},{"location":"plugins/environment/reference/#hatch.env.plugin.interface.EnvironmentInterface.get_context","title":"<code>get_context()</code>","text":"<p>Returns a subclass of EnvironmentContextFormatter.</p> Source code in <code>src/hatch/env/plugin/interface.py</code> <pre><code>def get_context(self):\n    \"\"\"\n    Returns a subclass of\n    [EnvironmentContextFormatter](../utilities.md#hatch.env.context.EnvironmentContextFormatter).\n    \"\"\"\n    from hatch.env.context import EnvironmentContextFormatter\n\n    return EnvironmentContextFormatter(self)\n</code></pre>"},{"location":"plugins/environment/virtual/","title":"Virtual environment","text":"<p>This uses virtual environments backed by virtualenv or UV.</p>"},{"location":"plugins/environment/virtual/#configuration","title":"Configuration","text":"<p>The environment plugin name is <code>virtual</code>.</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.&lt;ENV_NAME&gt;]\ntype = \"virtual\"\n</code></pre> <pre><code>[envs.&lt;ENV_NAME&gt;]\ntype = \"virtual\"\n</code></pre>"},{"location":"plugins/environment/virtual/#options","title":"Options","text":"Option Default Description <code>python</code> The version of Python to find on your system and subsequently use to create the environment, defaulting to the <code>HATCH_PYTHON</code> environment variable, followed by the normal resolution logic. Setting the <code>HATCH_PYTHON</code> environment variable to <code>self</code> will force the use of the Python executable Hatch is running on. For more information, see the documentation. <code>python-sources</code> <code>['external', 'internal']</code> This may be set to an array of strings that are either the literal <code>internal</code> or <code>external</code>. External considers only Python executables that are already on <code>PATH</code>. Internal considers only internally managed Python distributions. <code>path</code> An explicit path to the virtual environment. The path may be absolute or relative to the project root. Any environments that inherit this option will also use this path. The environment variable <code>HATCH_ENV_TYPE_VIRTUAL_PATH</code> may be used, which will take precedence. <code>system-packages</code> <code>false</code> Whether or not to give the virtual environment access to the system <code>site-packages</code> directory <code>installer</code> <code>pip</code> When set to <code>uv</code>, UV will be used in place of virtualenv &amp; pip for virtual environment creation and dependency management, respectively. If you intend to provide UV yourself, you may set the <code>HATCH_ENV_TYPE_VIRTUAL_UV_PATH</code> environment variable which should be the absolute path to a UV binary. This environment variable implicitly sets the <code>installer</code> option to <code>uv</code> (if unset)."},{"location":"plugins/environment/virtual/#location","title":"Location","text":"<p>The location of environments is determined in the following heuristic order:</p> <ol> <li>The <code>path</code> option</li> <li>A directory named after the environment within the configured <code>virtual</code> environment directory if the directory resides somewhere within the project root or if it is set to a <code>.virtualenvs</code> directory within the user's home directory</li> <li>Otherwise, environments are stored within the configured <code>virtual</code> environment directory in a deeply nested structure in order to support multiple projects</li> </ol> <p>Additionally, when the <code>path</code> option is not used, the name of the directory for the <code>default</code> environment will be the normalized project name to provide a more meaningful default shell prompt.</p>"},{"location":"plugins/environment/virtual/#python-resolution","title":"Python resolution","text":"<p>Virtual environments necessarily require a parent installation of Python. The following rules determine how the parent is resolved.</p> <p>The Python choice is determined by the <code>python</code> option followed by the <code>HATCH_PYTHON</code> environment variable. If the choice is via the environment variable, then resolution stops and that path is used unconditionally.</p> <p>The resolvers will be based on the <code>python-sources</code> option and all resolved interpreters will ensure compatibility with the project's defined Python support.</p> <p>If a Python version has been chosen then each resolver will try to find an interpreter that satisfies that version.</p> <p>If no version has been chosen, then each resolver will try to find a version that matches the version of Python that Hatch is currently running on. If not found then each resolver will try to find the highest compatible version.</p> <p>Note</p> <p>Some external Python paths are considered unstable and are ignored during resolution. For example, if Hatch is installed via Homebrew then <code>sys.executable</code> will be ignored because the interpreter could change or be removed at any time.</p> <p>Note</p> <p>When resolution finds a match using an internally managed distribution and an update is available, the latest distribution will automatically be downloaded before environment creation.</p>"},{"location":"plugins/environment/virtual/#internal-distributions","title":"Internal distributions","text":"<p>The following options are recognized for internal Python resolution.</p> <p>Tip</p> <p>You can set custom sources for distributions by setting the <code>HATCH_PYTHON_SOURCE_&lt;NAME&gt;</code> environment variable where <code>&lt;NAME&gt;</code> is the uppercased version of the distribution name with periods replaced by underscores e.g. <code>HATCH_PYTHON_SOURCE_PYPY3_10</code>.</p>"},{"location":"plugins/environment/virtual/#cpython","title":"CPython","text":"NAME <code>3.7</code> <code>3.8</code> <code>3.9</code> <code>3.10</code> <code>3.11</code> <code>3.12</code> <code>3.13</code> <p>The source of distributions is the python-build-standalone project.</p> <p>Some distributions have variants that may be configured with environment variables. Options may be combined.</p> Option Platforms Allowed values <code>HATCH_PYTHON_VARIANT_CPU</code> <ul><li>Linux</li></ul> <ul><li><code>v1</code></li><li><code>v2</code></li><li><code>v3</code> (default)</li><li><code>v4</code></li></ul> <code>HATCH_PYTHON_VARIANT_GIL</code> <ul><li>Linux</li><li>Windows</li><li>macOS</li></ul> <ul><li><code>freethreaded</code></li></ul>"},{"location":"plugins/environment/virtual/#pypy","title":"PyPy","text":"NAME <code>pypy2.7</code> <code>pypy3.9</code> <code>pypy3.10</code> <p>The source of distributions is the PyPy project.</p>"},{"location":"plugins/environment/virtual/#troubleshooting","title":"Troubleshooting","text":""},{"location":"plugins/environment/virtual/#macos-sip","title":"macOS SIP","text":"<p>If you need to set linker environment variables like those starting with <code>DYLD_</code> or <code>LD_</code>, any executable secured by System Integrity Protection that is invoked when running commands will not see those environment variable modifications as macOS strips those.</p> <p>Hatch interprets such commands as shell commands but deliberately ignores such paths to protected shells. This workaround suffices for the majority of use cases but there are 2 situations in which it may not:</p> <ol> <li>There are no unprotected <code>sh</code>, <code>bash</code>, <code>zsh</code>, nor <code>fish</code> executables found along PATH.</li> <li>The desired executable is a project's script, and the location of environments contains spaces or is longer than 124<sup>1</sup> characters. In this case <code>pip</code> and other installers will create such an entry point with a shebang pointing to <code>/bin/sh</code> (which is protected) to avoid shebang limitations. Rather than changing the location, you could invoke the script as e.g. <code>python -m pytest</code> (if the project supports that method of invocation by shipping a <code>__main__.py</code>).</li> </ol> <ol> <li> <p>The shebang length limit is usually 127 but 3 characters surround the executable path: <code>#!&lt;EXE_PATH&gt;\\n</code> \u21a9</p> </li> </ol>"},{"location":"plugins/environment-collector/custom/","title":"Custom environment collector","text":"<p>This is a custom class in a given Python file that inherits from the EnvironmentCollectorInterface.</p>"},{"location":"plugins/environment-collector/custom/#configuration","title":"Configuration","text":"<p>The environment collector plugin name is <code>custom</code>.</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.env.collectors.custom]\n</code></pre> <pre><code>[env.collectors.custom]\n</code></pre>"},{"location":"plugins/environment-collector/custom/#options","title":"Options","text":"Option Default Description <code>path</code> <code>hatch_plugins.py</code> The path of the Python file"},{"location":"plugins/environment-collector/custom/#example","title":"Example","text":"hatch_plugins.py <pre><code>    from hatch.env.collectors.plugin.interface import EnvironmentCollectorInterface\n\n\n    class CustomEnvironmentCollector(EnvironmentCollectorInterface):\n        ...\n</code></pre> <p>If multiple subclasses are found, you must define a function named <code>get_environment_collector</code> that returns the desired environment collector.</p> <p>Note</p> <p>Any defined PLUGIN_NAME is ignored and will always be <code>custom</code>.</p>"},{"location":"plugins/environment-collector/default/","title":"Default environment collector","text":"<p>This adds the <code>default</code> environment with type set to virtual and will always be applied.</p>"},{"location":"plugins/environment-collector/default/#configuration","title":"Configuration","text":"<p>The environment collector plugin name is <code>default</code>.</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.env.collectors.default]\n</code></pre> <pre><code>[env.collectors.default]\n</code></pre>"},{"location":"plugins/environment-collector/default/#options","title":"Options","text":"<p>There are no options available currently.</p>"},{"location":"plugins/environment-collector/reference/","title":"Environment collector plugins","text":"<p>Environment collectors allow for dynamically modifying environments or adding environments beyond those defined in config. Users can override default values provided by each environment.</p>"},{"location":"plugins/environment-collector/reference/#known-third-party","title":"Known third-party","text":"<ul> <li>hatch-mkdocs - integrate MkDocs and infer dependencies into an env</li> </ul>"},{"location":"plugins/environment-collector/reference/#installation","title":"Installation","text":"<p>Any required environment collectors that are not built-in must be manually installed alongside Hatch or listed in the <code>tool.hatch.env.requires</code> array for automatic management:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.env]\nrequires = [\n  \"...\",\n]\n</code></pre> <pre><code>[env]\nrequires = [\n  \"...\",\n]\n</code></pre>"},{"location":"plugins/environment-collector/reference/#hatch.env.collectors.plugin.interface.EnvironmentCollectorInterface","title":"<code>EnvironmentCollectorInterface</code>","text":"<p>Example usage:</p>  plugin.py hooks.py <pre><code>    from hatch.env.collectors.plugin.interface import EnvironmentCollectorInterface\n\n\n    class SpecialEnvironmentCollector(EnvironmentCollectorInterface):\n        PLUGIN_NAME = 'special'\n        ...\n</code></pre> <pre><code>    from hatchling.plugin import hookimpl\n\n    from .plugin import SpecialEnvironmentCollector\n\n\n    @hookimpl\n    def hatch_register_environment_collector():\n        return SpecialEnvironmentCollector\n</code></pre> Source code in <code>src/hatch/env/collectors/plugin/interface.py</code> <pre><code>class EnvironmentCollectorInterface:\n    \"\"\"\n    Example usage:\n\n    ```python tab=\"plugin.py\"\n        from hatch.env.collectors.plugin.interface import EnvironmentCollectorInterface\n\n\n        class SpecialEnvironmentCollector(EnvironmentCollectorInterface):\n            PLUGIN_NAME = 'special'\n            ...\n    ```\n\n    ```python tab=\"hooks.py\"\n        from hatchling.plugin import hookimpl\n\n        from .plugin import SpecialEnvironmentCollector\n\n\n        @hookimpl\n        def hatch_register_environment_collector():\n            return SpecialEnvironmentCollector\n    ```\n    \"\"\"\n\n    PLUGIN_NAME = ''\n    \"\"\"The name used for selection.\"\"\"\n\n    def __init__(self, root, config):\n        self.__root = root\n        self.__config = config\n\n    @property\n    def root(self):\n        \"\"\"\n        The root of the project tree as a path-like object.\n        \"\"\"\n        return self.__root\n\n    @property\n    def config(self) -&gt; dict:\n        \"\"\"\n        ```toml config-example\n        [tool.hatch.env.collectors.&lt;PLUGIN_NAME&gt;]\n        ```\n        \"\"\"\n        return self.__config\n\n    def get_initial_config(self) -&gt; dict[str, dict]:  # noqa: PLR6301\n        \"\"\"\n        Returns configuration for environments keyed by the environment or matrix name.\n        \"\"\"\n        return {}\n\n    def finalize_config(self, config: dict[str, dict]):\n        \"\"\"\n        Finalizes configuration for environments keyed by the environment or matrix name. This will override\n        any user-defined settings and any collectors that ran before this call.\n\n        This is called before matrices are turned into concrete environments.\n        \"\"\"\n\n    def finalize_environments(self, config: dict[str, dict]):\n        \"\"\"\n        Finalizes configuration for environments keyed by the environment name. This will override\n        any user-defined settings and any collectors that ran before this call.\n\n        This is called after matrices are turned into concrete environments.\n        \"\"\"\n</code></pre>"},{"location":"plugins/environment-collector/reference/#hatch.env.collectors.plugin.interface.EnvironmentCollectorInterface.PLUGIN_NAME","title":"<code>PLUGIN_NAME = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The name used for selection.</p>"},{"location":"plugins/environment-collector/reference/#hatch.env.collectors.plugin.interface.EnvironmentCollectorInterface.root","title":"<code>root</code>  <code>property</code>","text":"<p>The root of the project tree as a path-like object.</p>"},{"location":"plugins/environment-collector/reference/#hatch.env.collectors.plugin.interface.EnvironmentCollectorInterface.config","title":"<code>config: dict</code>  <code>property</code>","text":"pyproject.toml hatch.toml <pre><code>[tool.hatch.env.collectors.&lt;PLUGIN_NAME&gt;]\n</code></pre> <pre><code>[env.collectors.&lt;PLUGIN_NAME&gt;]\n</code></pre>"},{"location":"plugins/environment-collector/reference/#hatch.env.collectors.plugin.interface.EnvironmentCollectorInterface.get_initial_config","title":"<code>get_initial_config() -&gt; dict[str, dict]</code>","text":"<p>Returns configuration for environments keyed by the environment or matrix name.</p> Source code in <code>src/hatch/env/collectors/plugin/interface.py</code> <pre><code>def get_initial_config(self) -&gt; dict[str, dict]:  # noqa: PLR6301\n    \"\"\"\n    Returns configuration for environments keyed by the environment or matrix name.\n    \"\"\"\n    return {}\n</code></pre>"},{"location":"plugins/environment-collector/reference/#hatch.env.collectors.plugin.interface.EnvironmentCollectorInterface.finalize_config","title":"<code>finalize_config(config: dict[str, dict])</code>","text":"<p>Finalizes configuration for environments keyed by the environment or matrix name. This will override any user-defined settings and any collectors that ran before this call.</p> <p>This is called before matrices are turned into concrete environments.</p> Source code in <code>src/hatch/env/collectors/plugin/interface.py</code> <pre><code>def finalize_config(self, config: dict[str, dict]):\n    \"\"\"\n    Finalizes configuration for environments keyed by the environment or matrix name. This will override\n    any user-defined settings and any collectors that ran before this call.\n\n    This is called before matrices are turned into concrete environments.\n    \"\"\"\n</code></pre>"},{"location":"plugins/environment-collector/reference/#hatch.env.collectors.plugin.interface.EnvironmentCollectorInterface.finalize_environments","title":"<code>finalize_environments(config: dict[str, dict])</code>","text":"<p>Finalizes configuration for environments keyed by the environment name. This will override any user-defined settings and any collectors that ran before this call.</p> <p>This is called after matrices are turned into concrete environments.</p> Source code in <code>src/hatch/env/collectors/plugin/interface.py</code> <pre><code>def finalize_environments(self, config: dict[str, dict]):\n    \"\"\"\n    Finalizes configuration for environments keyed by the environment name. This will override\n    any user-defined settings and any collectors that ran before this call.\n\n    This is called after matrices are turned into concrete environments.\n    \"\"\"\n</code></pre>"},{"location":"plugins/metadata-hook/custom/","title":"Custom metadata hook","text":"<p>This is a custom class in a given Python file that inherits from the MetadataHookInterface.</p>"},{"location":"plugins/metadata-hook/custom/#configuration","title":"Configuration","text":"<p>The metadata hook plugin name is <code>custom</code>.</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.metadata.hooks.custom]\n</code></pre> <pre><code>[metadata.hooks.custom]\n</code></pre>"},{"location":"plugins/metadata-hook/custom/#options","title":"Options","text":"Option Default Description <code>path</code> <code>hatch_build.py</code> The path of the Python file"},{"location":"plugins/metadata-hook/custom/#example","title":"Example","text":"hatch_build.py <pre><code>from hatchling.metadata.plugin.interface import MetadataHookInterface\n\n\nclass CustomMetadataHook(MetadataHookInterface):\n    ...\n</code></pre> <p>If multiple subclasses are found, you must define a function named <code>get_metadata_hook</code> that returns the desired build hook.</p> <p>Note</p> <p>Any defined PLUGIN_NAME is ignored and will always be <code>custom</code>.</p>"},{"location":"plugins/metadata-hook/reference/","title":"Metadata hook plugins","text":"<p>Metadata hooks allow for the modification of project metadata after it has been loaded.</p>"},{"location":"plugins/metadata-hook/reference/#known-third-party","title":"Known third-party","text":"<ul> <li>hatch-docstring-description - set the project description using docstrings</li> <li>hatch-fancy-pypi-readme - dynamically construct the README</li> <li>hatch-nodejs-version - uses fields from NodeJS <code>package.json</code> files</li> <li>hatch-odoo - determine dependencies based on manifests of Odoo add-ons</li> <li>hatch-requirements-txt - read project dependencies from <code>requirements.txt</code> files</li> <li>UniDep - for unified <code>pip</code> and <code>conda</code> dependency management using a single <code>requirements.yaml</code> file for both </li> </ul>"},{"location":"plugins/metadata-hook/reference/#hatchling.metadata.plugin.interface.MetadataHookInterface","title":"<code>MetadataHookInterface</code>","text":"<p>Example usage:</p>  plugin.py hooks.py <pre><code>from hatchling.metadata.plugin.interface import MetadataHookInterface\n\n\nclass SpecialMetadataHook(MetadataHookInterface):\n    PLUGIN_NAME = 'special'\n    ...\n</code></pre> <pre><code>from hatchling.plugin import hookimpl\n\nfrom .plugin import SpecialMetadataHook\n\n\n@hookimpl\ndef hatch_register_metadata_hook():\n    return SpecialMetadataHook\n</code></pre> Source code in <code>backend/src/hatchling/metadata/plugin/interface.py</code> <pre><code>class MetadataHookInterface(ABC):  # no cov\n    \"\"\"\n    Example usage:\n\n    ```python tab=\"plugin.py\"\n    from hatchling.metadata.plugin.interface import MetadataHookInterface\n\n\n    class SpecialMetadataHook(MetadataHookInterface):\n        PLUGIN_NAME = 'special'\n        ...\n    ```\n\n    ```python tab=\"hooks.py\"\n    from hatchling.plugin import hookimpl\n\n    from .plugin import SpecialMetadataHook\n\n\n    @hookimpl\n    def hatch_register_metadata_hook():\n        return SpecialMetadataHook\n    ```\n    \"\"\"\n\n    PLUGIN_NAME = ''\n    \"\"\"The name used for selection.\"\"\"\n\n    def __init__(self, root: str, config: dict) -&gt; None:\n        self.__root = root\n        self.__config = config\n\n    @property\n    def root(self) -&gt; str:\n        \"\"\"\n        The root of the project tree.\n        \"\"\"\n        return self.__root\n\n    @property\n    def config(self) -&gt; dict:\n        \"\"\"\n        The hook configuration.\n\n        ```toml config-example\n        [tool.hatch.metadata.hooks.&lt;PLUGIN_NAME&gt;]\n        ```\n        \"\"\"\n        return self.__config\n\n    @abstractmethod\n    def update(self, metadata: dict) -&gt; None:\n        \"\"\"\n        This updates the metadata mapping of the `project` table in-place.\n        \"\"\"\n\n    def get_known_classifiers(self) -&gt; list[str]:  # noqa: PLR6301\n        \"\"\"\n        This returns extra classifiers that should be considered valid in addition to the ones known to PyPI.\n        \"\"\"\n        return []\n</code></pre>"},{"location":"plugins/metadata-hook/reference/#hatchling.metadata.plugin.interface.MetadataHookInterface.PLUGIN_NAME","title":"<code>PLUGIN_NAME = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The name used for selection.</p>"},{"location":"plugins/metadata-hook/reference/#hatchling.metadata.plugin.interface.MetadataHookInterface.root","title":"<code>root: str</code>  <code>property</code>","text":"<p>The root of the project tree.</p>"},{"location":"plugins/metadata-hook/reference/#hatchling.metadata.plugin.interface.MetadataHookInterface.config","title":"<code>config: dict</code>  <code>property</code>","text":"<p>The hook configuration.</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.metadata.hooks.&lt;PLUGIN_NAME&gt;]\n</code></pre> <pre><code>[metadata.hooks.&lt;PLUGIN_NAME&gt;]\n</code></pre>"},{"location":"plugins/metadata-hook/reference/#hatchling.metadata.plugin.interface.MetadataHookInterface.update","title":"<code>update(metadata: dict) -&gt; None</code>  <code>abstractmethod</code>","text":"<p>This updates the metadata mapping of the <code>project</code> table in-place.</p> Source code in <code>backend/src/hatchling/metadata/plugin/interface.py</code> <pre><code>@abstractmethod\ndef update(self, metadata: dict) -&gt; None:\n    \"\"\"\n    This updates the metadata mapping of the `project` table in-place.\n    \"\"\"\n</code></pre>"},{"location":"plugins/metadata-hook/reference/#hatchling.metadata.plugin.interface.MetadataHookInterface.get_known_classifiers","title":"<code>get_known_classifiers() -&gt; list[str]</code>","text":"<p>This returns extra classifiers that should be considered valid in addition to the ones known to PyPI.</p> Source code in <code>backend/src/hatchling/metadata/plugin/interface.py</code> <pre><code>def get_known_classifiers(self) -&gt; list[str]:  # noqa: PLR6301\n    \"\"\"\n    This returns extra classifiers that should be considered valid in addition to the ones known to PyPI.\n    \"\"\"\n    return []\n</code></pre>"},{"location":"plugins/publisher/package-index/","title":"Index publisher","text":"<p>See the documentation for publishing.</p>"},{"location":"plugins/publisher/package-index/#options","title":"Options","text":"Flag Config name Description <code>-r</code>/<code>--repo</code> <code>repo</code> The repository with which to publish artifacts <code>-u</code>/<code>--user</code> <code>user</code> The user with which to authenticate <code>-a</code>/<code>--auth</code> <code>auth</code> The credentials to use for authentication <code>--ca-cert</code> <code>ca-cert</code> The path to a CA bundle <code>--client-cert</code> <code>client-cert</code> The path to a client certificate, optionally containing the private key <code>--client-key</code> <code>client-key</code> The path to the client certificate's private key <code>repos</code> A table of named repositories to their respective options"},{"location":"plugins/publisher/package-index/#configuration","title":"Configuration","text":"<p>The publisher plugin name is <code>index</code>.</p>  config.toml <pre><code>[publish.index]\n</code></pre>"},{"location":"plugins/publisher/package-index/#repositories","title":"Repositories","text":"<p>All top-level options can be overridden per repository using the <code>repos</code> table with a required <code>url</code> attribute for each repository. The following shows the default configuration:</p>  config.toml <pre><code>[publish.index.repos.main]\nurl = \"https://upload.pypi.org/legacy/\"\n\n[publish.index.repos.test]\nurl = \"https://test.pypi.org/legacy/\"\n</code></pre> <p>The <code>repo</code> and <code>repos</code> options have no effect.</p>"},{"location":"plugins/publisher/package-index/#confirmation-prompt","title":"Confirmation prompt","text":"<p>You can require a confirmation prompt or use of the <code>-y</code>/<code>--yes</code> flag by setting publishers' <code>disable</code> option to <code>true</code> in either Hatch's config file or project-specific configuration (which takes precedence):</p>  config.toml pyproject.toml hatch.toml <pre><code>[publish.index]\ndisable = true\n</code></pre> <pre><code>[tool.hatch.publish.index]\ndisable = true\n</code></pre> <pre><code>[publish.index]\ndisable = true\n</code></pre>"},{"location":"plugins/publisher/reference/","title":"Publisher plugins","text":""},{"location":"plugins/publisher/reference/#known-third-party","title":"Known third-party","text":"<ul> <li>hatch-aws-publisher - publish AWS Lambda functions with SAM</li> </ul>"},{"location":"plugins/publisher/reference/#hatch.publish.plugin.interface.PublisherInterface","title":"<code>PublisherInterface</code>","text":"<p>Example usage:</p>  plugin.py hooks.py <pre><code>    from hatch.publish.plugin.interface import PublisherInterface\n\n\n    class SpecialPublisher(PublisherInterface):\n        PLUGIN_NAME = 'special'\n        ...\n</code></pre> <pre><code>    from hatchling.plugin import hookimpl\n\n    from .plugin import SpecialPublisher\n\n\n    @hookimpl\n    def hatch_register_publisher():\n        return SpecialPublisher\n</code></pre> Source code in <code>src/hatch/publish/plugin/interface.py</code> <pre><code>class PublisherInterface(ABC):\n    \"\"\"\n    Example usage:\n\n    ```python tab=\"plugin.py\"\n        from hatch.publish.plugin.interface import PublisherInterface\n\n\n        class SpecialPublisher(PublisherInterface):\n            PLUGIN_NAME = 'special'\n            ...\n    ```\n\n    ```python tab=\"hooks.py\"\n        from hatchling.plugin import hookimpl\n\n        from .plugin import SpecialPublisher\n\n\n        @hookimpl\n        def hatch_register_publisher():\n            return SpecialPublisher\n    ```\n    \"\"\"\n\n    PLUGIN_NAME = ''\n    \"\"\"The name used for selection.\"\"\"\n\n    def __init__(self, app, root, cache_dir, project_config, plugin_config):\n        self.__app = app\n        self.__root = root\n        self.__cache_dir = cache_dir\n        self.__project_config = project_config\n        self.__plugin_config = plugin_config\n\n        self.__disable = None\n\n    @property\n    def app(self):\n        \"\"\"\n        An instance of [Application](../utilities.md#hatchling.bridge.app.Application).\n        \"\"\"\n        return self.__app\n\n    @property\n    def root(self):\n        \"\"\"\n        The root of the project tree as a path-like object.\n        \"\"\"\n        return self.__root\n\n    @property\n    def cache_dir(self):\n        \"\"\"\n        The directory reserved exclusively for this plugin as a path-like object.\n        \"\"\"\n        return self.__cache_dir\n\n    @property\n    def project_config(self) -&gt; dict:\n        \"\"\"\n        ```toml config-example\n        [tool.hatch.publish.&lt;PLUGIN_NAME&gt;]\n        ```\n        \"\"\"\n        return self.__project_config\n\n    @property\n    def plugin_config(self) -&gt; dict:\n        \"\"\"\n        This is defined in Hatch's [config file](../../config/hatch.md).\n\n        ```toml tab=\"config.toml\"\n        [publish.&lt;PLUGIN_NAME&gt;]\n        ```\n        \"\"\"\n        return self.__plugin_config\n\n    @property\n    def disable(self):\n        \"\"\"\n        Whether this plugin is disabled, thus requiring confirmation when publishing. Local\n        [project configuration](reference.md#hatch.publish.plugin.interface.PublisherInterface.project_config)\n        takes precedence over global\n        [plugin configuration](reference.md#hatch.publish.plugin.interface.PublisherInterface.plugin_config).\n        \"\"\"\n        if self.__disable is None:\n            if 'disable' in self.project_config:\n                disable = self.project_config['disable']\n                if not isinstance(disable, bool):\n                    message = f'Field `tool.hatch.publish.{self.PLUGIN_NAME}.disable` must be a boolean'\n                    raise TypeError(message)\n            else:\n                disable = self.plugin_config.get('disable', False)\n                if not isinstance(disable, bool):\n                    message = f'Global plugin configuration `publish.{self.PLUGIN_NAME}.disable` must be a boolean'\n                    raise TypeError(message)\n\n            self.__disable = disable\n\n        return self.__disable\n\n    @abstractmethod\n    def publish(self, artifacts: list[str], options: dict):\n        \"\"\"\n        :material-align-horizontal-left: **REQUIRED** :material-align-horizontal-right:\n\n        This is called directly by the [`publish`](../../cli/reference.md#hatch-publish) command\n        with the arguments and options it receives.\n        \"\"\"\n</code></pre>"},{"location":"plugins/publisher/reference/#hatch.publish.plugin.interface.PublisherInterface.PLUGIN_NAME","title":"<code>PLUGIN_NAME = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The name used for selection.</p>"},{"location":"plugins/publisher/reference/#hatch.publish.plugin.interface.PublisherInterface.app","title":"<code>app</code>  <code>property</code>","text":"<p>An instance of Application.</p>"},{"location":"plugins/publisher/reference/#hatch.publish.plugin.interface.PublisherInterface.root","title":"<code>root</code>  <code>property</code>","text":"<p>The root of the project tree as a path-like object.</p>"},{"location":"plugins/publisher/reference/#hatch.publish.plugin.interface.PublisherInterface.cache_dir","title":"<code>cache_dir</code>  <code>property</code>","text":"<p>The directory reserved exclusively for this plugin as a path-like object.</p>"},{"location":"plugins/publisher/reference/#hatch.publish.plugin.interface.PublisherInterface.project_config","title":"<code>project_config: dict</code>  <code>property</code>","text":"pyproject.toml hatch.toml <pre><code>[tool.hatch.publish.&lt;PLUGIN_NAME&gt;]\n</code></pre> <pre><code>[publish.&lt;PLUGIN_NAME&gt;]\n</code></pre>"},{"location":"plugins/publisher/reference/#hatch.publish.plugin.interface.PublisherInterface.plugin_config","title":"<code>plugin_config: dict</code>  <code>property</code>","text":"<p>This is defined in Hatch's config file.</p>  config.toml <pre><code>[publish.&lt;PLUGIN_NAME&gt;]\n</code></pre>"},{"location":"plugins/publisher/reference/#hatch.publish.plugin.interface.PublisherInterface.disable","title":"<code>disable</code>  <code>property</code>","text":"<p>Whether this plugin is disabled, thus requiring confirmation when publishing. Local project configuration takes precedence over global plugin configuration.</p>"},{"location":"plugins/publisher/reference/#hatch.publish.plugin.interface.PublisherInterface.publish","title":"<code>publish(artifacts: list[str], options: dict)</code>  <code>abstractmethod</code>","text":"<p> REQUIRED </p> <p>This is called directly by the <code>publish</code> command with the arguments and options it receives.</p> Source code in <code>src/hatch/publish/plugin/interface.py</code> <pre><code>@abstractmethod\ndef publish(self, artifacts: list[str], options: dict):\n    \"\"\"\n    :material-align-horizontal-left: **REQUIRED** :material-align-horizontal-right:\n\n    This is called directly by the [`publish`](../../cli/reference.md#hatch-publish) command\n    with the arguments and options it receives.\n    \"\"\"\n</code></pre>"},{"location":"plugins/version-scheme/reference/","title":"Version scheme plugins","text":""},{"location":"plugins/version-scheme/reference/#known-third-party","title":"Known third-party","text":"<ul> <li>hatch-semver - uses semantic versioning</li> </ul>"},{"location":"plugins/version-scheme/reference/#hatchling.version.scheme.plugin.interface.VersionSchemeInterface","title":"<code>VersionSchemeInterface</code>","text":"<p>Example usage:</p>  plugin.py hooks.py <pre><code>from hatchling.version.scheme.plugin.interface import VersionSchemeInterface\n\n\nclass SpecialVersionScheme(VersionSchemeInterface):\n    PLUGIN_NAME = 'special'\n    ...\n</code></pre> <pre><code>from hatchling.plugin import hookimpl\n\nfrom .plugin import SpecialVersionScheme\n\n\n@hookimpl\ndef hatch_register_version_scheme():\n    return SpecialVersionScheme\n</code></pre> Source code in <code>backend/src/hatchling/version/scheme/plugin/interface.py</code> <pre><code>class VersionSchemeInterface(ABC):  # no cov\n    \"\"\"\n    Example usage:\n\n    ```python tab=\"plugin.py\"\n    from hatchling.version.scheme.plugin.interface import VersionSchemeInterface\n\n\n    class SpecialVersionScheme(VersionSchemeInterface):\n        PLUGIN_NAME = 'special'\n        ...\n    ```\n\n    ```python tab=\"hooks.py\"\n    from hatchling.plugin import hookimpl\n\n    from .plugin import SpecialVersionScheme\n\n\n    @hookimpl\n    def hatch_register_version_scheme():\n        return SpecialVersionScheme\n    ```\n    \"\"\"\n\n    PLUGIN_NAME = ''\n    \"\"\"The name used for selection.\"\"\"\n\n    def __init__(self, root: str, config: dict) -&gt; None:\n        self.__root = root\n        self.__config = config\n\n    @property\n    def root(self) -&gt; str:\n        \"\"\"\n        The root of the project tree as a string.\n        \"\"\"\n        return self.__root\n\n    @property\n    def config(self) -&gt; dict:\n        \"\"\"\n        ```toml config-example\n        [tool.hatch.version]\n        ```\n        \"\"\"\n        return self.__config\n\n    @cached_property\n    def validate_bump(self) -&gt; bool:\n        \"\"\"\n        This is the value of the `validate-bump` option, with the `HATCH_VERSION_VALIDATE_BUMP`\n        environment variable taking precedence. Validation is enabled by default.\n\n        ```toml config-example\n        [tool.hatch.version]\n        validate-bump = true\n        ```\n        \"\"\"\n        from hatchling.utils.constants import VersionEnvVars\n\n        if VersionEnvVars.VALIDATE_BUMP in os.environ:\n            return os.environ[VersionEnvVars.VALIDATE_BUMP] not in {'false', '0'}\n\n        validate_bump = self.config.get('validate-bump', True)\n        if not isinstance(validate_bump, bool):\n            message = 'option `validate-bump` must be a boolean'\n            raise TypeError(message)\n\n        return validate_bump\n\n    @abstractmethod\n    def update(self, desired_version: str, original_version: str, version_data: dict) -&gt; str:\n        \"\"\"\n        This should return a normalized form of the desired version. If the\n        [validate_bump](reference.md#hatchling.version.scheme.plugin.interface.VersionSchemeInterface.validate_bump)\n        property is `True`, this method should also verify that the version is higher than the original version.\n        \"\"\"\n</code></pre>"},{"location":"plugins/version-scheme/reference/#hatchling.version.scheme.plugin.interface.VersionSchemeInterface.PLUGIN_NAME","title":"<code>PLUGIN_NAME = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The name used for selection.</p>"},{"location":"plugins/version-scheme/reference/#hatchling.version.scheme.plugin.interface.VersionSchemeInterface.root","title":"<code>root: str</code>  <code>property</code>","text":"<p>The root of the project tree as a string.</p>"},{"location":"plugins/version-scheme/reference/#hatchling.version.scheme.plugin.interface.VersionSchemeInterface.config","title":"<code>config: dict</code>  <code>property</code>","text":"pyproject.toml hatch.toml <pre><code>[tool.hatch.version]\n</code></pre> <pre><code>[version]\n</code></pre>"},{"location":"plugins/version-scheme/reference/#hatchling.version.scheme.plugin.interface.VersionSchemeInterface.validate_bump","title":"<code>validate_bump: bool</code>  <code>cached</code> <code>property</code>","text":"<p>This is the value of the <code>validate-bump</code> option, with the <code>HATCH_VERSION_VALIDATE_BUMP</code> environment variable taking precedence. Validation is enabled by default.</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.version]\nvalidate-bump = true\n</code></pre> <pre><code>[version]\nvalidate-bump = true\n</code></pre>"},{"location":"plugins/version-scheme/reference/#hatchling.version.scheme.plugin.interface.VersionSchemeInterface.update","title":"<code>update(desired_version: str, original_version: str, version_data: dict) -&gt; str</code>  <code>abstractmethod</code>","text":"<p>This should return a normalized form of the desired version. If the validate_bump property is <code>True</code>, this method should also verify that the version is higher than the original version.</p> Source code in <code>backend/src/hatchling/version/scheme/plugin/interface.py</code> <pre><code>@abstractmethod\ndef update(self, desired_version: str, original_version: str, version_data: dict) -&gt; str:\n    \"\"\"\n    This should return a normalized form of the desired version. If the\n    [validate_bump](reference.md#hatchling.version.scheme.plugin.interface.VersionSchemeInterface.validate_bump)\n    property is `True`, this method should also verify that the version is higher than the original version.\n    \"\"\"\n</code></pre>"},{"location":"plugins/version-scheme/standard/","title":"Standard version scheme","text":"<p>See the documentation for versioning.</p>"},{"location":"plugins/version-scheme/standard/#configuration","title":"Configuration","text":"<p>The version scheme plugin name is <code>standard</code>.</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.version]\nscheme = \"standard\"\n</code></pre> <pre><code>[version]\nscheme = \"standard\"\n</code></pre>"},{"location":"plugins/version-scheme/standard/#options","title":"Options","text":"Option Description <code>validate-bump</code> When setting a specific version, this determines whether to check that the new version is higher than the original. The default is <code>true</code>."},{"location":"plugins/version-source/code/","title":"Code version source","text":""},{"location":"plugins/version-source/code/#updates","title":"Updates","text":"<p>Setting the version is not supported.</p>"},{"location":"plugins/version-source/code/#configuration","title":"Configuration","text":"<p>The version source plugin name is <code>code</code>.</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.version]\nsource = \"code\"\n</code></pre> <pre><code>[version]\nsource = \"code\"\n</code></pre>"},{"location":"plugins/version-source/code/#options","title":"Options","text":"Option Description <code>path</code> (required) A relative path to a Python file or extension module that will be loaded <code>expression</code> A Python expression that when evaluated in the context of the loaded file returns the version. The default expression is simply <code>__version__</code>. <code>search-paths</code> A list of relative paths to directories that will be prepended to Python's search path"},{"location":"plugins/version-source/code/#missing-imports","title":"Missing imports","text":"<p>If the chosen path imports another module in your project, then you'll need to use absolute imports coupled with the <code>search-paths</code> option. For example, say you need to load the following file:</p>  src/pkg/__init__.py <pre><code>    from ._version import get_version\n\n    __version__ = get_version()\n</code></pre> <p>You should change it to:</p>  src/pkg/__init__.py <pre><code>    from pkg._version import get_version\n\n    __version__ = get_version()\n</code></pre> <p>and the configuration would become:</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.version]\nsource = \"code\"\npath = \"src/pkg/__init__.py\"\nsearch-paths = [\"src\"]\n</code></pre> <pre><code>[version]\nsource = \"code\"\npath = \"src/pkg/__init__.py\"\nsearch-paths = [\"src\"]\n</code></pre>"},{"location":"plugins/version-source/env/","title":"Environment version source","text":"<p>Retrieves the version from an environment variable. This can be useful in build pipelines where the version is set by an external trigger.</p>"},{"location":"plugins/version-source/env/#updates","title":"Updates","text":"<p>Setting the version is not supported.</p>"},{"location":"plugins/version-source/env/#configuration","title":"Configuration","text":"<p>The version source plugin name is <code>env</code>.</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.version]\nsource = \"env\"\n</code></pre> <pre><code>[version]\nsource = \"env\"\n</code></pre>"},{"location":"plugins/version-source/env/#options","title":"Options","text":"Option Description <code>variable</code> (required) The name of the environment variable"},{"location":"plugins/version-source/reference/","title":"Version source plugins","text":""},{"location":"plugins/version-source/reference/#known-third-party","title":"Known third-party","text":"<ul> <li>hatch-vcs - uses your preferred version control system (like Git)</li> <li>hatch-nodejs-version - uses the <code>version</code> field of NodeJS <code>package.json</code> files</li> <li>hatch-regex-commit - automatically creates a Git commit and tag after version bumping</li> <li>versioningit - determines version from Git or Mercurial tags, with customizable version formatting</li> </ul>"},{"location":"plugins/version-source/reference/#hatchling.version.source.plugin.interface.VersionSourceInterface","title":"<code>VersionSourceInterface</code>","text":"<p>Example usage:</p>  plugin.py hooks.py <pre><code>from hatchling.version.source.plugin.interface import VersionSourceInterface\n\n\nclass SpecialVersionSource(VersionSourceInterface):\n    PLUGIN_NAME = 'special'\n    ...\n</code></pre> <pre><code>from hatchling.plugin import hookimpl\n\nfrom .plugin import SpecialVersionSource\n\n\n@hookimpl\ndef hatch_register_version_source():\n    return SpecialVersionSource\n</code></pre> Source code in <code>backend/src/hatchling/version/source/plugin/interface.py</code> <pre><code>class VersionSourceInterface(ABC):  # no cov\n    \"\"\"\n    Example usage:\n\n    ```python tab=\"plugin.py\"\n    from hatchling.version.source.plugin.interface import VersionSourceInterface\n\n\n    class SpecialVersionSource(VersionSourceInterface):\n        PLUGIN_NAME = 'special'\n        ...\n    ```\n\n    ```python tab=\"hooks.py\"\n    from hatchling.plugin import hookimpl\n\n    from .plugin import SpecialVersionSource\n\n\n    @hookimpl\n    def hatch_register_version_source():\n        return SpecialVersionSource\n    ```\n    \"\"\"\n\n    PLUGIN_NAME = ''\n    \"\"\"The name used for selection.\"\"\"\n\n    def __init__(self, root: str, config: dict) -&gt; None:\n        self.__root = root\n        self.__config = config\n\n    @property\n    def root(self) -&gt; str:\n        \"\"\"\n        The root of the project tree as a string.\n        \"\"\"\n        return self.__root\n\n    @property\n    def config(self) -&gt; dict:\n        \"\"\"\n        ```toml config-example\n        [tool.hatch.version]\n        ```\n        \"\"\"\n        return self.__config\n\n    @abstractmethod\n    def get_version_data(self) -&gt; dict:\n        \"\"\"\n        This should return a mapping with a `version` key representing the current version of the project and will be\n        displayed when invoking the [`version`](../../cli/reference.md#hatch-version) command without any arguments.\n\n        The mapping can contain anything else and will be passed to\n        [set_version](reference.md#hatchling.version.source.plugin.interface.VersionSourceInterface.set_version)\n        when updating the version.\n        \"\"\"\n\n    def set_version(self, version: str, version_data: dict) -&gt; None:\n        \"\"\"\n        This should update the version to the first argument with the data provided during retrieval.\n        \"\"\"\n        raise NotImplementedError\n</code></pre>"},{"location":"plugins/version-source/reference/#hatchling.version.source.plugin.interface.VersionSourceInterface.PLUGIN_NAME","title":"<code>PLUGIN_NAME = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The name used for selection.</p>"},{"location":"plugins/version-source/reference/#hatchling.version.source.plugin.interface.VersionSourceInterface.root","title":"<code>root: str</code>  <code>property</code>","text":"<p>The root of the project tree as a string.</p>"},{"location":"plugins/version-source/reference/#hatchling.version.source.plugin.interface.VersionSourceInterface.config","title":"<code>config: dict</code>  <code>property</code>","text":"pyproject.toml hatch.toml <pre><code>[tool.hatch.version]\n</code></pre> <pre><code>[version]\n</code></pre>"},{"location":"plugins/version-source/reference/#hatchling.version.source.plugin.interface.VersionSourceInterface.get_version_data","title":"<code>get_version_data() -&gt; dict</code>  <code>abstractmethod</code>","text":"<p>This should return a mapping with a <code>version</code> key representing the current version of the project and will be displayed when invoking the <code>version</code> command without any arguments.</p> <p>The mapping can contain anything else and will be passed to set_version when updating the version.</p> Source code in <code>backend/src/hatchling/version/source/plugin/interface.py</code> <pre><code>@abstractmethod\ndef get_version_data(self) -&gt; dict:\n    \"\"\"\n    This should return a mapping with a `version` key representing the current version of the project and will be\n    displayed when invoking the [`version`](../../cli/reference.md#hatch-version) command without any arguments.\n\n    The mapping can contain anything else and will be passed to\n    [set_version](reference.md#hatchling.version.source.plugin.interface.VersionSourceInterface.set_version)\n    when updating the version.\n    \"\"\"\n</code></pre>"},{"location":"plugins/version-source/reference/#hatchling.version.source.plugin.interface.VersionSourceInterface.set_version","title":"<code>set_version(version: str, version_data: dict) -&gt; None</code>","text":"<p>This should update the version to the first argument with the data provided during retrieval.</p> Source code in <code>backend/src/hatchling/version/source/plugin/interface.py</code> <pre><code>def set_version(self, version: str, version_data: dict) -&gt; None:\n    \"\"\"\n    This should update the version to the first argument with the data provided during retrieval.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"plugins/version-source/regex/","title":"Regex version source","text":"<p>See the documentation for versioning.</p>"},{"location":"plugins/version-source/regex/#updates","title":"Updates","text":"<p>Setting the version is supported.</p>"},{"location":"plugins/version-source/regex/#configuration","title":"Configuration","text":"<p>The version source plugin name is <code>regex</code>.</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.version]\nsource = \"regex\"\n</code></pre> <pre><code>[version]\nsource = \"regex\"\n</code></pre>"},{"location":"plugins/version-source/regex/#options","title":"Options","text":"Option Description <code>path</code> (required) A relative path to a file containing the project's version <code>pattern</code> A regular expression that has a named group called <code>version</code> that represents the version. The default pattern looks for a variable named <code>__version__</code> or <code>VERSION</code> that is set to a string containing the version, optionally prefixed with the lowercase letter <code>v</code>."},{"location":"tutorials/environment/basic-usage/","title":"Managing environments","text":"<p>Hatch environments are isolated workspaces that can be used for project tasks including running tests, building documentation and running code formatters and linters.</p>"},{"location":"tutorials/environment/basic-usage/#the-default-environment","title":"The default environment","text":"<p>When you start using Hatch, you can create the <code>default</code> environment. To do this use the <code>env create</code> command:</p> <pre><code>hatch env create\n</code></pre> <p>This will not only create will the <code>default</code> environment for you to work in but will also install your project in dev mode in this <code>default</code> environment.</p> <p>Tip</p> <p>You never need to manually create environments as spawning a shell or running commands within one will automatically trigger creation.</p>"},{"location":"tutorials/environment/basic-usage/#using-the-default-environment","title":"Using the default environment","text":"<p>Hatch will always use the <code>default</code> environment if an environment is not chosen explicitly when running a command.</p> <p>For instance, the following shows how to get version information for the Python in use.</p> <pre><code>$ hatch run python -V\nPython 3.12.1\n</code></pre>"},{"location":"tutorials/environment/basic-usage/#configure-the-default-environment","title":"Configure the default environment","text":"<p>You can customize the tools that are installed into the <code>default</code> environment by adding a table called <code>tool.hatch.envs.default</code> to your <code>pyproject.toml</code> file. Below is an example of adding the dependencies <code>pydantic</code> and <code>numpy</code> to the <code>default</code> environment.</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.default]\ndependencies = [\n  \"pydantic\",\n  \"numpy\",\n]\n</code></pre> <pre><code>[envs.default]\ndependencies = [\n  \"pydantic\",\n  \"numpy\",\n]\n</code></pre> <p>You can declare versions for your dependencies as well within this configuration.</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.default]\ndependencies = [\n  \"pydantic&gt;=2.0\",\n  \"numpy\",\n]\n</code></pre> <pre><code>[envs.default]\ndependencies = [\n  \"pydantic&gt;=2.0\",\n  \"numpy\",\n]\n</code></pre>"},{"location":"tutorials/environment/basic-usage/#create-custom-environment","title":"Create custom environment","text":"<p>You can create custom environments in Hatch by adding a section to your <code>pyproject.toml</code> file <code>[tool.hatch.envs.&lt;ENV_NAME&gt;]</code>. Below you define an environment called <code>test</code> and you add the <code>pytest</code> and <code>pytest-cov</code> dependencies to that environment's configuration.</p>  pyproject.toml hatch.toml <pre><code>[tool.hatch.envs.test]\ndependencies = [\n  \"pytest\",\n  \"pytest-cov\"\n]\n</code></pre> <pre><code>[envs.test]\ndependencies = [\n  \"pytest\",\n  \"pytest-cov\"\n]\n</code></pre> <p>The first time that you call the test environment, Hatch will:</p> <ol> <li>Create the environment</li> <li>Install your project into that environment in dev mode (by default) along with its dependencies.</li> <li>Install the environment's dependencies</li> </ol>"},{"location":"tutorials/environment/basic-usage/#run-commands-within-a-specific-environment","title":"Run commands within a specific environment","text":"<p>Hatch offers a unique environment feature that allows you run a specific command within a specific environment rather than needing to activate the environment as you would using a tool such as Conda or venv.</p> <p>For instance, if you define an environment called <code>test</code> that contains the dependencies from the previous section, you can run the <code>pytest</code> command from the <code>test</code> environment using the syntax:</p> <pre><code>hatch run &lt;ENV_NAME&gt;:command\n</code></pre> <p>To access the <code>test</code> environment and run <code>pytest</code>, you can run:</p> <pre><code>$ hatch run test:pytest\n============================== test session starts ===============================\nplatform darwin -- Python 3.12.1, pytest-7.4.4, pluggy-1.3.0\nrootdir: /your/path/to/yourproject\ncollected 0 items\n</code></pre> <p>Note</p> <p><code>test:pytest</code> represents the name of the environment to call (<code>test</code>) and the command to run (<code>pytest</code>).</p>"},{"location":"tutorials/environment/basic-usage/#view-current-environments","title":"View current environments","text":"<p>Above you defined and created a new test environment in your <code>pyproject.toml</code> file. You can now use the <code>env show</code> command to see both the currently created environments and the dependencies in each environment.</p> <pre><code>$ hatch env show\n             Standalone\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Name    \u2503 Type    \u2503 Dependencies \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 default \u2502 virtual \u2502              \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 test    \u2502 virtual \u2502 pytest       \u2502\n\u2502         \u2502         \u2502 pytest-cov   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Note</p> <p>The output may have more columns depending on your environment configuration.</p>"},{"location":"tutorials/environment/basic-usage/#locating-environments","title":"Locating environments","text":"<p>To see where your current environment is located you can use the <code>env find</code> command.</p> <pre><code>$ hatch env find test\n/your/path/Application Support/hatch/env/virtual/yourproject/twO2iQR3/test\n</code></pre> <p>Note</p> <p>That path is what you would see on macOS but differs for each platform, and is configurable.</p>"},{"location":"tutorials/environment/basic-usage/#launching-a-shell-within-a-specific-environment","title":"Launching a shell within a specific environment","text":"<p>If you wish to launch a shell for a specific environment that you have created, like the previous <code>test</code> environment, you can use:</p> <pre><code>hatch -e test shell\n</code></pre> <p>Once the environment is active, you can run commands like you would in any Python environment.</p> <p>Notice below that when running <code>pip list</code> in the test environment, you can see:</p> <ol> <li>That your package is installed in editable mode.</li> <li>That the environment contains both <code>pytest</code> and <code>pytest-cov</code> as specified above in the <code>pyproject.toml</code> file.</li> </ol> <pre><code>$ pip list\nPackage     Version Editable project location\n----------- ------- ----------------------------------------------------\ncoverage    7.4.1\niniconfig   2.0.0\npackaging   23.2\npip         23.3.1\npluggy      1.4.0\npytest      8.0.0\npytest-cov  4.1.0\nyourproject 0.1.0  /your/path/to/yourproject\n</code></pre>"},{"location":"tutorials/environment/basic-usage/#conda-environments","title":"Conda environments","text":"<p>If you prefer to use Conda environments with Hatch, you can check out the hatch-conda plugin.</p>"},{"location":"tutorials/python/manage/","title":"Managing Python distributions","text":"<p>The <code>python</code> command group provides a set of commands to manage Python distributions that may be used by other tools.</p> <p>Note</p> <p>When using environments, manual management is not necessary since by default Hatch will automatically download and manage Python distributions internally when a requested version cannot be found.</p>"},{"location":"tutorials/python/manage/#location","title":"Location","text":"<p>There are two ways to control where Python distributions are installed. Both methods make it so that each installed distribution is placed in a subdirectory of the configured location named after the distribution.</p> <ol> <li>The globally configured default directory for Python installations.</li> <li>The <code>-d</code>/<code>--dir</code> option of every <code>python</code> subcommand, which takes precedence over the default directory.</li> </ol>"},{"location":"tutorials/python/manage/#installation","title":"Installation","text":"<p>To install a Python distribution, use the <code>python install</code> command. For example:</p> <pre><code>hatch python install 3.12\n</code></pre> <p>This will:</p> <ol> <li>Download the <code>3.12</code> Python distribution</li> <li>Unpack it into a directory named <code>3.12</code> within the configured default directory for Python installations</li> <li>Add the installation to the user PATH</li> </ol> <p>Now its <code>python</code> executable can be used by you or other tools.</p> <p>Note</p> <p>For PATH changes to take effect in the current shell, you will need to restart it.</p>"},{"location":"tutorials/python/manage/#multiple","title":"Multiple","text":"<p>You can install multiple Python distributions at once by providing multiple distribution names. For example:</p> <pre><code>hatch python install 3.12 3.11 pypy3.10\n</code></pre> <p>If you would like to install all available Python distributions that are compatible with your system, use <code>all</code> as the distribution name:</p> <pre><code>hatch python install all\n</code></pre> <p>Tip</p> <p>The commands for updating and removing also support this functionality.</p>"},{"location":"tutorials/python/manage/#private","title":"Private","text":"<p>By default, installing Python distributions will add them to the user PATH. To disable this behavior, use the <code>--private</code> flag like so:</p> <pre><code>hatch python install 3.12 --private\n</code></pre> <p>This when combined with the directory option can be used to create private, isolated installations.</p>"},{"location":"tutorials/python/manage/#listing-distributions","title":"Listing distributions","text":"<p>You can see all of the available and installed Python distributions by using the <code>python show</code> command. For example, if you already installed the <code>3.12</code> distribution you may see something like this:</p> <pre><code>$ hatch python show\n    Installed\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Name \u2503 Version \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 3.12 \u2502 3.12.7  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      Available\n\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Name     \u2503 Version \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 3.7      \u2502 3.7.9   \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 3.8      \u2502 3.8.20  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 3.9      \u2502 3.9.20  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 3.10     \u2502 3.10.15 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 3.11     \u2502 3.11.10 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 3.13     \u2502 3.13.0  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 pypy2.7  \u2502 7.3.15  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 pypy3.9  \u2502 7.3.15  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 pypy3.10 \u2502 7.3.15  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"tutorials/python/manage/#finding-installations","title":"Finding installations","text":"<p>The Python executable of an installed distribution can be found by using the <code>python find</code> command. For example:</p> <pre><code>$ hatch python find 3.12\n/home/.local/share/hatch/pythons/3.12/python/bin/python3\n</code></pre> <p>You can instead output its parent directory by using the <code>-p</code>/<code>--parent</code> flag:</p> <pre><code>$ hatch python find 3.12 --parent\n/home/.local/share/hatch/pythons/3.12/python/bin\n</code></pre> <p>This is useful when other tools do not need to use the executable directly but require knowing the directory containing it.</p>"},{"location":"tutorials/python/manage/#updates","title":"Updates","text":"<p>To update installed Python distributions, use the <code>python update</code> command. For example:</p> <pre><code>hatch python update 3.12 3.11 pypy3.10\n</code></pre> <p>When there are no updates available for a distribution, a warning will be displayed:</p> <pre><code>$ hatch python update 3.12\nThe latest version is already installed: 3.12.7\n</code></pre>"},{"location":"tutorials/python/manage/#removal","title":"Removal","text":"<p>To remove installed Python distributions, use the <code>python remove</code> command. For example:</p> <pre><code>hatch python remove 3.12 3.11 pypy3.10\n</code></pre>"},{"location":"tutorials/testing/overview/","title":"Testing projects","text":"<p>The <code>test</code> command (by default) uses pytest with select plugins and coverage.py. View the testing configuration for more information.</p> <p>The majority of projects can be fully tested this way without the need for custom environments.</p>"},{"location":"tutorials/testing/overview/#passing-arguments","title":"Passing arguments","text":"<p>When you run the <code>test</code> command without any arguments, <code>tests</code> is passed as the default argument to <code>pytest</code> (this assumes that you have a <code>tests</code> directory). For example, the following command invocation:</p> <pre><code>hatch test\n</code></pre> <p>would be translated roughly to:</p> <pre><code>pytest tests\n</code></pre> <p>You can pass arguments to <code>pytest</code> by appending them to the <code>test</code> command. For example, the following command invocation:</p> <pre><code>hatch test -vv tests/test_foo.py::test_bar\n</code></pre> <p>would be translated roughly to:</p> <pre><code>pytest -vv tests/test_foo.py::test_bar\n</code></pre> <p>You can force the treatment of arguments as positional by using the <code>--</code> separator, especially useful when built-in flags of the <code>test</code> command conflict with those of <code>pytest</code>, such as the <code>--help</code> flag. For example, the following command invocation:</p> <pre><code>hatch test -r -- -r fE -- tests\n</code></pre> <p>would be translated roughly to:</p> <pre><code>pytest -r fE -- tests\n</code></pre> <p>Note</p> <p>It's important to ensure that <code>pytest</code> receives an argument instructing what to run/where to locate tests. It's default behavior is <code>.</code> meaning that it will exhaustively search for tests in the current directory. This can not just be slow but also lead to unexpected behavior.</p>"},{"location":"tutorials/testing/overview/#environment-selection","title":"Environment selection","text":""},{"location":"tutorials/testing/overview/#single-environment","title":"Single environment","text":"<p>If no environment options are selected, the <code>test</code> command will only run tests in the first defined environment that either already exists or is compatible. Additionally, the checking order will prioritize environments that define a version of Python that matches the interpreter that Hatch is running on.</p> <p>For example, if you overrode the default matrix as follows:</p>  pyproject.toml hatch.toml <pre><code>[[tool.hatch.envs.hatch-test.matrix]]\npython = [\"3.12\", \"3.11\"]\n\n[[tool.hatch.envs.hatch-test.matrix]]\npython = [\"3.11\"]\nfeature = [\"foo\", \"bar\"]\n</code></pre> <pre><code>[[envs.hatch-test.matrix]]\npython = [\"3.12\", \"3.11\"]\n\n[[envs.hatch-test.matrix]]\npython = [\"3.11\"]\nfeature = [\"foo\", \"bar\"]\n</code></pre> <p>the expanded environments would normally be:</p> <pre><code>hatch-test.py3.12\nhatch-test.py3.11\nhatch-test.py3.11-foo\nhatch-test.py3.11-bar\n</code></pre> <p>If you install Hatch on Python 3.11, the checking order would be:</p> <pre><code>hatch-test.py3.11\nhatch-test.py3.11-foo\nhatch-test.py3.11-bar\nhatch-test.py3.12\n</code></pre> <p>Note</p> <p>If you installed Hatch with an official installer or are using one of the standalone binaries, the version of Python that Hatch runs on is out of your control. If you are relying on the single environment resolution behavior, consider explicitly selecting environments based on the Python version instead.</p>"},{"location":"tutorials/testing/overview/#all-environments","title":"All environments","text":"<p>You can run tests in all compatible environments by using the <code>--all</code> flag. For example, say you defined the matrix and overrides as follows:</p>  pyproject.toml hatch.toml <pre><code>[[tool.hatch.envs.hatch-test.matrix]]\npython = [\"3.12\", \"3.11\"]\nfeature = [\"foo\", \"bar\"]\n\n[tool.hatch.envs.hatch-test.overrides]\nmatrix.feature.platforms = [\n  { value = \"linux\", if = [\"foo\", \"bar\"] },\n  { value = \"windows\", if = [\"foo\"] },\n  { value = \"macos\", if = [\"bar\"] },\n]\n</code></pre> <pre><code>[[envs.hatch-test.matrix]]\npython = [\"3.12\", \"3.11\"]\nfeature = [\"foo\", \"bar\"]\n\n[envs.hatch-test.overrides]\nmatrix.feature.platforms = [\n  { value = \"linux\", if = [\"foo\", \"bar\"] },\n  { value = \"windows\", if = [\"foo\"] },\n  { value = \"macos\", if = [\"bar\"] },\n]\n</code></pre> <p>The following table shows the environments in which tests would be run:</p> Environment Linux Windows macOS <code>hatch-test.py3.12-foo</code> <code>hatch-test.py3.12-bar</code> <code>hatch-test.py3.11-foo</code> <code>hatch-test.py3.11-bar</code>"},{"location":"tutorials/testing/overview/#specific-environments","title":"Specific environments","text":"<p>You can select subsets of environments by using the <code>--include</code>/<code>-i</code> and <code>--exclude</code>/<code>-x</code> options. These options may be used to include or exclude certain matrix variables, optionally followed by specific comma-separated values, and may be selected multiple times.</p> <p>For example, say you defined the matrix as follows:</p>  pyproject.toml hatch.toml <pre><code>[[tool.hatch.envs.hatch-test.matrix]]\npython = [\"3.12\", \"3.11\"]\nfeature = [\"foo\", \"bar\", \"baz\"]\n</code></pre> <pre><code>[[envs.hatch-test.matrix]]\npython = [\"3.12\", \"3.11\"]\nfeature = [\"foo\", \"bar\", \"baz\"]\n</code></pre> <p>If you wanted to run tests in all environments that have Python 3.12 and either the <code>foo</code> or <code>bar</code> feature, you could use the following command invocation:</p> <pre><code>hatch test -i python=3.12 -i feature=foo,bar\n</code></pre> <p>Alternatively, we could exclude the <code>baz</code> feature to achieve the same result:</p> <pre><code>hatch test -i python=3.12 -x feature=baz\n</code></pre> <p>Tip</p> <p>Since selecting the version of Python is a common use case, you can use the <code>--python</code>/<code>-py</code> option as a shorthand. For example, the previous commands could have been written as:</p> <pre><code>hatch test -py 3.12 -i feature=foo,bar\nhatch test -py 3.12 -x feature=baz\n</code></pre>"},{"location":"tutorials/testing/overview/#measuring-code-coverage","title":"Measuring code coverage","text":"<p>You can enable code coverage by using the <code>--cover</code> flag. For example, the following command invocation:</p> <pre><code>hatch test --cover\n</code></pre> <p>would be translated roughly to:</p> <pre><code>coverage run -m pytest tests\n</code></pre> <p>After tests run in all of the selected environments, the coverage data is combined and a report is shown. The <code>--cover-quiet</code> flag can be used to suppress the report and implicitly enables the <code>--cover</code> flag:</p> <pre><code>hatch test --cover-quiet\n</code></pre> <p>Note</p> <p>Coverage data files are generated at the root of the project. Be sure to exclude them from version control with the following glob-style pattern:</p> <pre><code>.coverage*\n</code></pre>"},{"location":"tutorials/testing/overview/#retry-failed-tests","title":"Retry failed tests","text":"<p>You can retry failed tests with the <code>--retries</code> option:</p> <pre><code>hatch test --retries 2\n</code></pre> <p>If a test fails every time and the number of retries is set to <code>2</code>, the test will be run a total of three times.</p> <p>You can also set the number of seconds to wait between retries with the <code>--retry-delay</code> option:</p> <pre><code>hatch test --retries 2 --retry-delay 1\n</code></pre>"},{"location":"tutorials/testing/overview/#parallelize-test-execution","title":"Parallelize test execution","text":"<p>You can parallelize test execution with the <code>--parallel</code>/<code>-p</code> flag:</p> <pre><code>hatch test --parallel\n</code></pre> <p>This distributes tests within an environment across multiple workers. The number of workers corresponds to the number of logical rather than physical CPUs that are available.</p>"},{"location":"tutorials/testing/overview/#randomize-test-order","title":"Randomize test order","text":"<p>You can randomize the order of tests with the <code>--randomize</code>/<code>-r</code> flag:</p> <pre><code>hatch test --randomize\n</code></pre>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/archive/2022/","title":"2022","text":""},{"location":"blog/category/release/","title":"Release","text":""}]}